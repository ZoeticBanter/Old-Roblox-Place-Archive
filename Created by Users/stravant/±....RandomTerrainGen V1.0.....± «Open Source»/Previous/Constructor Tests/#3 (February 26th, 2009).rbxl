<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX0">
		<Properties>
			<token name="Controller">0</token>
			<bool name="ControllerFlagShown">true</bool>
			<Ref name="CurrentCamera">RBX1</Ref>
			<double name="DistributedGameTime">0</double>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
			<bool name="archivable">true</bool>
		</Properties>
		<Item class="Camera" referent="RBX2">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.707106769</R11>
					<R12>0.707106769</R12>
					<R20>0</R20>
					<R21>-0.707106769</R21>
					<R22>0.707106769</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX3">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.707106769</R11>
					<R12>0.707106769</R12>
					<R20>0</R20>
					<R21>-0.707106769</R21>
					<R22>0.707106769</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX4">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.707106769</R11>
					<R12>0.707106769</R12>
					<R20>0</R20>
					<R21>-0.707106769</R21>
					<R22>0.707106769</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX5">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.89442718</R11>
					<R12>0.44721359</R12>
					<R20>0</R20>
					<R21>-0.44721359</R21>
					<R22>0.89442718</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX6">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.707106769</R11>
					<R12>0.707106769</R12>
					<R20>0</R20>
					<R21>-0.707106769</R21>
					<R22>0.707106769</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX7">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0</X>
					<Y>5</Y>
					<Z>5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>-0</R02>
					<R10>-0</R10>
					<R11>0.707106769</R11>
					<R12>0.707106769</R12>
					<R20>0</R20>
					<R21>-0.707106769</R21>
					<R22>0.707106769</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>0</Y>
					<Z>-5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX1">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>18.2844124</X>
					<Y>15.1263514</Y>
					<Z>-6.22376585</Z>
					<R00>-0.322230607</R00>
					<R01>-0.432716131</R01>
					<R02>0.841976345</R02>
					<R10>-1.62903557e-009</R10>
					<R11>0.889416754</R11>
					<R12>0.457097143</R12>
					<R20>-0.946661174</R20>
					<R21>0.147290692</R21>
					<R22>-0.286597311</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>5.20000029</Y>
					<Z>0</Z>
					<R00>-0.322230607</R00>
					<R01>-0.432716131</R01>
					<R02>0.841976345</R02>
					<R10>-1.62903557e-009</R10>
					<R11>0.889416754</R11>
					<R12>0.457097143</R12>
					<R20>-0.946661174</R20>
					<R21>0.147290692</R21>
					<R22>-0.286597311</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX8">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>6.04029894</X>
					<Y>11.6656027</Y>
					<Z>0.156753138</Z>
					<R00>0.0259424876</R00>
					<R01>-0.865733445</R01>
					<R02>0.4998326</R02>
					<R10>-2.24363847e-010</R10>
					<R11>0.500000894</R11>
					<R12>0.866024911</R12>
					<R20>-0.999663413</R20>
					<R21>-0.0224668402</R21>
					<R22>0.0129712662</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0</X>
					<Y>1.20000005</Y>
					<Z>0</Z>
					<R00>0.0259424876</R00>
					<R01>-0.865733445</R01>
					<R02>0.4998326</R02>
					<R10>-2.24363847e-010</R10>
					<R11>0.500000894</R11>
					<R12>0.866024911</R12>
					<R20>-0.999663413</R20>
					<R21>-0.0224668402</R21>
					<R22>0.0129712662</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX9">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Matrix.h</string>
				<string name="Source">_G.Matrix = {}


--[[
////////////////////////////////////////
//// Rotation Constructors //////
//////////////////////////////////////
]]
function Matrix.rotationY(angle)
	return CFrame.new(0, 0, 0,  
		math.cos(angle), 0, -math.sin(angle), 
		0, 1, 0, 
		math.sin(angle), 0, math.cos(angle)
	)
end

function Matrix.rotationX(angle)
	return CFrame.new(0, 0, 0,  
		1, 0, 0,
		0, math.cos(angle), -math.sin(angle),
		0, math.sin(angle), math.cos(angle))
end

function Matrix.rotationZ(angle)
	return CFrame.new(0, 0, 0,  
		math.cos(angle), -math.sin(angle), 0, 
		math.sin(angle), math.cos(angle), 0, 
		0, 0, 1)
end

--[[
////////////////////////////////////////
///////  string.explode  ///////////
//////////////////////////////////////

takes a string and breaks it down using &quot;ch&quot; as a separator, 
where &quot;ch&quot; is not one of the magic characters ( * ^ % [ ] $ . + and - ) 

EG:

string.explode(&quot;lol,hax , 1337stuff, 8&quot;, &quot;,&quot;)
would give you the table:
{
	lol
	hax
	 1337stuff
	 8
}

]]
function string.explode(str, ch)
	local tb = {}
	std:gsub(&quot;[^&quot;..ch..&quot;]*%a+[^&quot;..ch..&quot;]*&quot;, function(a) table.insert(tb, a) end)
	return tb
end

--[[
//////////////////////////////////////////////////////////
//// multiplication of a CFrame by a point //////
/////////////////////////////////////////////////////////

EG:

if you have an arbitrarily rotated 1x1x1 cube, and you used this code:

local pos = Matrix.VectorByMatrix( Vector3.new(0.5, 0.5, 0.5), [part].CFrame )

pos would be the position of one vertex of the cube (at an offset of &lt;0.5, 0.5, 0.5&gt;)...
]]

function Matrix.VectorByMatrix(disp, rotation)
	local tb = tostring(rotation):explode(&quot;,&quot;)
	local vec = Vector3.new(
		tb[4]*disp.x + tb[5]*disp.y + tb[6]*disp.z,
		tb[7]*disp.x + tb[8]*disp.y + tb[9]*disp.z,
		tb[10]*disp.x + tb[11]*disp.y + tb[12]*disp.z)
	return vec
end

--[[function reflectionX(cf)
	local mx = {}
	(&quot; &quot;..tostring(cf)):gsub(&quot;[- ]
	
end]]
	
</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX10">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Join.h</string>
				<string name="Source">_G._Players = {}

function AddStat(player, type, name, val)
	if not player:FindFirstChild(&quot;leaderstats&quot;) then
		local b = Instance.new(&quot;IntValue&quot;)
		b.Name = &quot;leaderstats&quot;
		b.Parent = player
	end
	local a = Instance.new(type)
	a.Name = name
	a.Value = val
	a.Parent = player.leaderstats
end

game.Players.ChildAdded:connect(function(p)
	AddStat(p, &quot;IntValue&quot;, &quot;Bricks&quot;, 0)
	AddStat(p, &quot;IntValue&quot;, &quot;BricksAllowed&quot;, 100)

	local s = Instance.new(&quot;ObjectValue&quot;)
	s.Name = &quot;Selection&quot;
	s.Parent = p

	_Players[p.Name] = {} --table of all parts belonging to player
end)

game.Players.ChildRemoved:connect(function(p)
	for _, p in pairs(_Players[p.Name]) do
		p.Parent = nil
	end
	_Players[p.Name] = nil
end)

game.Workspace.DescendantAdded:connect(function(p)
	print(p, &quot;-&gt; Instance()&quot;)
	if p.className ~= &quot;Part&quot; then return end
	if p:FindFirstChild(&quot;Block&quot;) then
		table.insert(_Players[p.Block.Value.Name], p)
	end
end)

game.Workspace.DescendantRemoving:connect(function(p)
	print(p, &quot;-&gt; Remove()&quot;)
	if p.className ~= &quot;Part&quot; then return end
	if p:FindFirstChild(&quot;Block&quot;) then
		if not game.Players:FindFirstChild(p.Block.Value.Name) then return end
		for k, v in pairs(_Players[p.Block.Value.Name]) do
			if v == p then
				table.remove(_Players[p.Block.Value.Name], k)
				return
			end
		end
	end	
end)


</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX11">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">26</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.200000003</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<token name="Controller">0</token>
				<bool name="ControllerFlagShown">true</bool>
				<bool name="DraggingV1">false</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<string name="Name">Base</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<bool name="archivable">true</bool>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>100</X>
					<Y>0.400000006</Y>
					<Z>100</Z>
				</Vector3>
			</Properties>
		</Item>
	</Item>
	<Item class="RunService" referent="RBX12">
		<Properties>
			<string name="Name">Run Service</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX13</External>
	<External>RBX14</External>
	<Item class="Players" referent="RBX15">
		<Properties>
			<int name="MaxPlayers">12</int>
			<string name="Name">Players</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="StarterPack" referent="RBX16">
		<Properties>
			<string name="Name">StarterPack</string>
			<bool name="archivable">true</bool>
		</Properties>
		<Item class="HopperBin" referent="RBX17">
			<Properties>
				<token name="BinType">0</token>
				<string name="Name">R_Move</string>
				<Content name="TextureId"><null></null></Content>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX18">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_main</string>
					<string name="Source">local player = script.Parent.Parent.Parent
local tl = script.Parent

local resource_part = Instance.new(&quot;Part&quot;)

local mouse_isdown
function Selection(a)
	if a then player.Selection.Value = a else return player.Selection.Value end
end

local last_func = function() end
local last_func_select = nil

local move_dist = 1

local h = Instance.new(&quot;Hint&quot;)

function mkarrow(color)
	local a = game.Lighting.Arrow:clone()
	a.BrickColor = BrickColor.new(color)
	a.Owner.Value = player
	return a
end

function round(a)
	a = a/move_dist
	if math.abs(math.ceil(a) - a) &gt; math.abs(math.floor(a) - a) then
		a = math.floor(a)
		else
		a = math.ceil(a)
	end
	return a*move_dist
end

local selection_hud = {
	{o = mkarrow(21), d = Vector3.new(0, 0, -1), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(0, 0, -move_dist)
	end},
	{o = mkarrow(21), d = Vector3.new(0, 0, 1), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(0, 0, move_dist)
	end},
	{o = mkarrow(23), d = Vector3.new(1, 0, 0), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(move_dist, 0, 0)
	end},
	{o = mkarrow(23), d = Vector3.new(-1, 0, 0), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(-move_dist, 0, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, 1, 0), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(0, move_dist, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, -1, 0), rf = function(p) 
		p.CFrame = p.CFrame * CFrame.new(0, -move_dist, 0)
	end}
}
	
function Apply_Function(target) 
	for _, tb in pairs(selection_hud) do
		if tb.o == target then
			tb.rf(Selection())
			last_func = tb.rf
			last_func_select = Selection()
			return true
		end
	end
	return false
end

function Apply_Hud(part)
	for _, tb in pairs(selection_hud) do
		tb.o.Parent = game.Workspace
		tb.o.CFrame = part.CFrame * CFrame.new(tb.d.x * (part.Size.x/2 + 1), tb.d.y * (part.Size.y/2 + 1), tb.d.z * (part.Size.z/2 + 1))
	end
end

function Remove_Hud()
	for _, tb in pairs(selection_hud) do
		tb.o.Parent = nil
	end
end

function Apply_Text()
	if Selection() then
		h.Text = &quot;Selection&apos;s position : &lt; &quot;..round(Selection().Position.x)..&quot; , &quot;..round(Selection().Position.y)..&quot; , &quot;..round(Selection().Position.z)..&quot; &gt;   Interval distance : &quot;..move_dist		
		else
		h.Text = &quot;Selection&apos;s position : [ No selection ]   Interval distance : &quot;..move_dist
	end
end

tl.Selected:connect(function(m)
	h.Parent = player
	Apply_Text()
	if Selection() then Apply_Hud(Selection()) end
	m.Button1Down:connect(function()
		if not m.Target or m.Target == Selection() then return end
		if Apply_Function(m.Target) then Apply_Text() Apply_Hud(Selection()) return end
		if m.Target:FindFirstChild(&quot;Block&quot;) then
			if m.Target.Block.Value == player then --ownership, add later
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				Selection(m.Target)
				Selection().Transparency = 0.5
				Selection().Parent= player.Character
				else
				h.Text = &quot;*ERROR* permission insufficient to edit this part&quot;
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				player.Selection.Value = nil
				wait(1.5)
				Apply_Text()
			end
			else
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
		end
		Apply_Text()
		if Selection() then 
			Apply_Hud(Selection()) 
			else
			Remove_Hud()
		end
	end)
	m.KeyDown:connect(function(k_id)
		print(k_id:byte())
		if k_id:byte() == 13 then --enter key
			if Selection() and Selection() == last_func_select then
				last_func(Selection())
				Apply_Text()
				Apply_Hud(Selection())
				else
				if Selection() then
					h.Text = &quot;*ERROR* Selection has changed&quot;
					wait(1.5)
					Apply_Text()
					else
					h.Text = &quot;*ERROR* No selection&quot;
					wait(1.5)
					Apply_Text()
				end
			end
		elseif k_id:byte() == 27 then
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
			Remove_Hud()
			h.Text = &quot;*DESELECTED*&quot;
			wait(1.5)
			Apply_Text()
		elseif k_id == &quot;q&quot; then
			if move_dist == 5 then
				move_dist = 2
				elseif move_dist == 2 then	
				move_dist = 1
				elseif move_dist == 1 then				
				move_dist = 0.5
				elseif move_dist == 0.5 then
				move_dist = 0.1
				elseif move_dist ==0.1 then
				move_dist = 5
			end
			Apply_Text()
		elseif k_id == &quot;e&quot; then
			if move_dist == 0.1 then
				move_dist = 0.5
				elseif move_dist == 0.5 then	
				move_dist = 1
				elseif move_dist == 1 then				
				move_dist = 2
				elseif move_dist == 2 then
				move_dist = 5
				elseif move_dist == 5 then
				move_dist = 0.1
			end
			Apply_Text()
		end
	end)
end)

tl.Deselected:connect(function()
	Remove_Hud()
	h.Parent = nil
end)
</string>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="HopperBin" referent="RBX19">
			<Properties>
				<token name="BinType">0</token>
				<string name="Name">Create</string>
				<Content name="TextureId"><null></null></Content>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX20">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_main</string>
					<string name="Source">local player = script.Parent.Parent.Parent
local tl = script.Parent

local h = Instance.new(&quot;Hint&quot;)

move_dist = 1

function round(a)
	a = a/move_dist
	if math.abs(math.ceil(a) - a) &gt; math.abs(math.floor(a) - a) then
		a = math.floor(a)
		else
		a = math.ceil(a)
	end
	return a*move_dist
end

tl.Selected:connect(function(m)
	m.Button1Down:connect(function()
		if player.Selection.Value then player.Selection.Value.Parent = game.Workspace end
		if m.Target then
			local pm = m.Target:FindFirstChild(&quot;Block&quot;)
			if pm then
				if pm.Value == player then
					--deselect old part
					if player.Selection.Value then 
						player.Selection.Value.Transparency = 0 
						player.Selection.Value.Parent = game.Workspace 
					end
					player.Selection.Value = nil
					--clone part
					if player.leaderstats.Bricks.Value &gt;= player.leaderstats.BricksAllowed.Value then return end
					player.leaderstats.Bricks.Value = player.leaderstats.Bricks.Value + 1 
					local p = m.Target:clone()
					p.CFrame = m.Target.CFrame * CFrame.new(0, m.Target.Size.y, 0)
					p.Parent = game.Workspace
					p.Block.Value = player
					--select part
					player.Selection.Value = p
					player.Selection.Value.Transparency = 0.5
				end
				else
				--deselect old part
				if player.Selection.Value then 
					player.Selection.Value.Transparency = 0 
					player.Selection.Value.Parent = game.Workspace 
				end
				player.Selection.Value = nil
				--make new part
				if player.leaderstats.Bricks.Value &gt;= player.leaderstats.BricksAllowed.Value then return end
				player.leaderstats.Bricks.Value = player.leaderstats.Bricks.Value + 1 
				local p = game.Lighting.Part:clone()
				p.Block.Value = player
				p.CFrame = CFrame.new(round(m.Hit.p.x), round(m.Hit.p.y), round(m.Hit.p.z))
				p.Parent = game.Workspace
				--select part
				player.Selection.Value = p
				player.Selection.Value.Transparency = 0.5
			end
		end
		if player.Selection.Value then player.Selection.Value.Parent = player.Character end
	end)
end)

</string>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="HopperBin" referent="RBX21">
			<Properties>
				<token name="BinType">0</token>
				<string name="Name">Resize</string>
				<Content name="TextureId"><null></null></Content>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX22">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_main</string>
					<string name="Source">local player = script.Parent.Parent.Parent
local tl = script.Parent

local resource_part = Instance.new(&quot;Part&quot;)

local mouse_isdown
function Selection(a)
	if a then player.Selection.Value = a else return player.Selection.Value end
end

local last_func = function() end
local last_func_select = nil

local size_change = 1

local size_mode = 1 --increase = 1/decrease = -1 size

local h = Instance.new(&quot;Hint&quot;)

function mkarrow(color)
	local a = game.Lighting.Arrow:clone()
	a.BrickColor = BrickColor.new(color)
	a.Owner.Value = player
	return a
end

function round(a)
	a = a/size_change
	if math.abs(math.ceil(a) - a) &gt; math.abs(math.floor(a) - a) then
		a = math.floor(a)
		else
		a = math.ceil(a)
	end
	return a*size_change
end

local selection_hud = {
	{o = mkarrow(21), d = Vector3.new(0, 0, -1), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x, p.Size.y, p.Size.z + size_change)
		p.CFrame = cf * CFrame.new(0, 0, -size_change*0.5)
	end},
	{o = mkarrow(21), d = Vector3.new(0, 0, 1), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x, p.Size.y, p.Size.z + size_change)
		p.CFrame = cf * CFrame.new(0, 0, size_change*0.5)
	end},
	{o = mkarrow(23), d = Vector3.new(1, 0, 0), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x + size_change, p.Size.y, p.Size.z)
		p.CFrame = cf * CFrame.new(size_change*0.5, 0, 0)
	end},
	{o = mkarrow(23), d = Vector3.new(-1, 0, 0), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x + size_change, p.Size.y, p.Size.z)
		p.CFrame = cf * CFrame.new(-size_change*0.5, 0, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, 1, 0), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x, p.Size.y + size_change, p.Size.z)
		p.CFrame = cf * CFrame.new(0, size_change*0.5, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, -1, 0), rf = function(p) 
		local cf = p.CFrame
		p.Size = Vector3.new(p.Size.x, p.Size.y + size_change, p.Size.z)
		p.CFrame = cf * CFrame.new(0, -size_change*0.5, 0)
	end}
}
	
function Apply_Function(target) 
	for _, tb in pairs(selection_hud) do
		if tb.o == target then
			tb.rf(Selection())
			last_func = tb.rf
			last_func_select = Selection()
			return true
		end
	end
	return false
end

function Apply_Hud(part)
	for _, tb in pairs(selection_hud) do
		tb.o.Parent = game.Workspace
		tb.o.CFrame = part.CFrame * CFrame.new(tb.d.x * (part.Size.x/2 + 1), tb.d.y * (part.Size.y/2 + 1), tb.d.z * (part.Size.z/2 + 1))
	end
end

function Remove_Hud()
	for _, tb in pairs(selection_hud) do
		tb.o.Parent = nil
	end
end

function Apply_Text()
	if Selection() then
		h.Text = &quot;Selection&apos;s size : &lt; &quot;..round(Selection().Size.x)..&quot; , &quot;..round(Selection().Size.y)..&quot; , &quot;..round(Selection().Size.z)..&quot; &gt;  &quot;
		if size_change &gt; 0 then
			h.Text = h.Text..&quot; Mode : Make [ Larger ] by &quot;..size_change..&quot; studs&quot;
			else
			h.Text = h.Text..&quot; Mode : Make [ Smaller ] by &quot;..math.abs(size_change)..&quot; studs&quot;		
		end
		else
		h.Text = &quot; Selection&apos;s size : [ No selection ] &quot;
		if size_change &gt; 0 then
			h.Text = h.Text..&quot; Mode : Make [ Larger ] by &quot;..size_change..&quot; studs&quot;
			else
			h.Text = h.Text..&quot; Mode : Make [ Smaller ] by &quot;..math.abs(size_change)..&quot; studs&quot;		
		end
	end
end

tl.Selected:connect(function(m)
	h.Parent = player
	Apply_Text()
	if Selection() then Apply_Hud(Selection()) end
	m.Button1Down:connect(function()
		if not m.Target or m.Target == Selection() then return end
		if Apply_Function(m.Target) then Apply_Text() Apply_Hud(Selection()) return end
		if m.Target:FindFirstChild(&quot;Block&quot;) then
			if m.Target.Block.Value == player then --ownership, add later
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				Selection(m.Target)
				Selection().Transparency = 0.5
				Selection().Parent= player.Character
				else
				h.Text = &quot;*ERROR* permission insufficient to edit this part&quot;
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				player.Selection.Value = nil
				wait(1.5)
				Apply_Text()
			end
			else
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
		end
		Apply_Text()
		if Selection() then 
			Apply_Hud(Selection()) 
			else
			Remove_Hud()
		end
	end)
	m.KeyDown:connect(function(k_id)
		print(k_id:byte())
		if k_id:byte() == 13 then --enter key
			if Selection() and Selection() == last_func_select then
				last_func(Selection())
				Apply_Text()
				Apply_Hud(Selection())
				else
				if Selection() then
					h.Text = &quot;*ERROR* Selection has changed&quot;
					wait(1.5)
					Apply_Text()
					else
					h.Text = &quot;*ERROR* No selection&quot;
					wait(1.5)
					Apply_Text()
				end
			end
		elseif k_id:byte() == 27 then
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
			Remove_Hud()
			h.Text = &quot;*DESELECTED*&quot;
			wait(1.5)
			Apply_Text()
		elseif k_id == &quot;q&quot; then
			size_change = size_change - 1
			if size_change == 0 then
				size_change = -1
			end
			Apply_Text()
		elseif k_id == &quot;e&quot; then
			size_change = size_change + 1
			if size_change == 0 then
				size_change = 1
			end
			Apply_Text()
		end
	end)
end)

tl.Deselected:connect(function()
	Remove_Hud()
	h.Parent = nil
end)
</string>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="HopperBin" referent="RBX23">
			<Properties>
				<token name="BinType">0</token>
				<string name="Name">G_Move</string>
				<Content name="TextureId"><null></null></Content>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX24">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_main</string>
					<string name="Source">local player = script.Parent.Parent.Parent
local tl = script.Parent

local resource_part = Instance.new(&quot;Part&quot;)

local mouse_isdown
function Selection(a)
	if a then player.Selection.Value = a else return player.Selection.Value end
end

local last_func = function() end
local last_func_select = nil

local move_dist = 1

local h = Instance.new(&quot;Hint&quot;)

function mkarrow(color)
	local a = game.Lighting.Arrow:clone()
	a.BrickColor = BrickColor.new(color)
	a.Owner.Value = player
	return a
end

function round(a)
	a = a/move_dist
	if math.abs(math.ceil(a) - a) &gt; math.abs(math.floor(a) - a) then
		a = math.floor(a)
		else
		a = math.ceil(a)
	end
	return a*move_dist
end

local selection_hud = {
	{o = mkarrow(21), d = Vector3.new(0, 0, -1), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(0, 0, -move_dist)
	end},
	{o = mkarrow(21), d = Vector3.new(0, 0, 1), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(0, 0, move_dist)
	end},
	{o = mkarrow(23), d = Vector3.new(1, 0, 0), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(move_dist, 0, 0)
	end},
	{o = mkarrow(23), d = Vector3.new(-1, 0, 0), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(-move_dist, 0, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, 1, 0), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(0, move_dist, 0)
	end},
	{o = mkarrow(28), d = Vector3.new(0, -1, 0), rf = function(p) 
		p.CFrame = p.CFrame + Vector3.new(0, -move_dist, 0)
	end}
}
	
function Apply_Function(target) 
	for _, tb in pairs(selection_hud) do
		if tb.o == target then
			tb.rf(Selection())
			last_func = tb.rf
			last_func_select = Selection()
			return true
		end
	end
	return false
end

function Apply_Hud(part)
	local rot = (part.CFrame - part.CFrame.p)
	local sx, sy, sz = part.Size.x, part.Size.y, part.Size.z
	--calculate 3 verticies
	local a, b, c = (rot*CFrame.new(-sx/2, sy/2, sz/2)).p, (rot*CFrame.new(sx/2, -sy/2, sz/2)).p, (rot*CFrame.new(sx/2, sy/2, -sz/2)).p
	--calculate extent box
	local eb = Vector3.new(math.max(a.x, b.x, c.x), math.max(a.y, b.y, c.y), math.max(a.z, b.z, c.z))

	for _, tb in pairs(selection_hud) do
		tb.o.Parent = game.Workspace
		print(&quot;Old size : &lt;&quot;, part.Size, &quot;&gt;  New size : &lt;&quot;, eb*2, &quot;&gt;&quot;)
		tb.o.CFrame = part.CFrame + Vector3.new(tb.d.x * (eb.x + 1), tb.d.y * (eb.y + 1), tb.d.z * (eb.z + 1))
	end
end

function Remove_Hud()
	for _, tb in pairs(selection_hud) do
		tb.o.Parent = nil
	end
end

function Apply_Text()
	if Selection() then
		h.Text = &quot;Selection&apos;s position : &lt; &quot;..round(Selection().Position.x)..&quot; , &quot;..round(Selection().Position.y)..&quot; , &quot;..round(Selection().Position.z)..&quot; &gt;   Interval distance : &quot;..move_dist		
		else
		h.Text = &quot;Selection&apos;s position : [ No selection ]   Interval distance : &quot;..move_dist
	end
end

tl.Selected:connect(function(m)
	h.Parent = player
	Apply_Text()
	if Selection() then Apply_Hud(Selection()) end
	m.Button1Down:connect(function()
		if not m.Target or m.Target == Selection() then return end
		if Apply_Function(m.Target) then Apply_Text() Apply_Hud(Selection()) return end
		if m.Target:FindFirstChild(&quot;Block&quot;) then
			if m.Target.Block.Value == player then
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				Selection(m.Target)
				Selection().Transparency = 0.5
				Selection().Parent= player.Character
				else
				h.Text = &quot;*ERROR* permission insufficient to edit this part&quot;
				if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
				player.Selection.Value = nil
				wait(1.5)
				Apply_Text()
			end
			else
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
		end
		Apply_Text()
		if Selection() then 
			Apply_Hud(Selection()) 
			else
			Remove_Hud()
		end
	end)
	m.KeyDown:connect(function(k_id)
		print(k_id:byte())
		if k_id:byte() == 13 then --enter key
			if Selection() and Selection() == last_func_select then
				last_func(Selection())
				Apply_Text()
				Apply_Hud(Selection())
				else
				if Selection() then
					h.Text = &quot;*ERROR* Selection has changed&quot;
					wait(1.5)
					Apply_Text()
					else
					h.Text = &quot;*ERROR* No selection&quot;
					wait(1.5)
					Apply_Text()
				end
			end
		elseif k_id:byte() == 27 then
			if Selection() then Selection().Transparency = 0 Selection().Parent = game.Workspace end
			player.Selection.Value = nil
			Remove_Hud()
			h.Text = &quot;*DESELECTED*&quot;
			wait(1.5)
			Apply_Text()
		elseif k_id == &quot;q&quot; then
			if move_dist == 5 then
				move_dist = 2
				elseif move_dist == 2 then	
				move_dist = 1
				elseif move_dist == 1 then				
				move_dist = 0.5
				elseif move_dist == 0.5 then
				move_dist = 0.1
				elseif move_dist ==0.1 then
				move_dist = 5
			end
			Apply_Text()
		elseif k_id == &quot;e&quot; then
			if move_dist == 0.1 then
				move_dist = 0.5
				elseif move_dist == 0.5 then	
				move_dist = 1
				elseif move_dist == 1 then				
				move_dist = 2
				elseif move_dist == 2 then
				move_dist = 5
				elseif move_dist == 5 then
				move_dist = 0.1
			end
			Apply_Text()
		end
	end)
end)

tl.Deselected:connect(function()
	Remove_Hud()
	h.Parent = nil
end)
</string>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="HopperBin" referent="RBX25">
			<Properties>
				<token name="BinType">0</token>
				<string name="Name">Remove</string>
				<Content name="TextureId"><null></null></Content>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX26">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_main</string>
					<string name="Source">local player = script.Parent.Parent.Parent
local tl = script.Parent

local h = Instance.new(&quot;Hint&quot;)

move_dist = 1

function round(a)
	a = a/move_dist
	if math.abs(math.ceil(a) - a) &gt; math.abs(math.floor(a) - a) then
		a = math.floor(a)
		else
		a = math.ceil(a)
	end
	return a*move_dist
end

tl.Selected:connect(function(m)
	m.Button1Down:connect(function()
		if player.Selection.Value then player.Selection.Value.Parent = game.Workspace end
		if m.Target then
			local pm = m.Target:FindFirstChild(&quot;Block&quot;)
			if pm then
				if pm.Value == player then
					if player.Selection.Value == m.Target then player.Selection.Value = nil end
					m.Target.Parent = nil
					player.leaderstats.Bricks.Value = player.leaderstats.Bricks.Value - 1 
				end
			end
		end
		if player.Selection.Value then player.Selection.Value.Parent = player.Character end
	end)
end)

</string>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBX27">
		<Properties>
			<token name="AmbientReverb">0</token>
			<float name="DistanceFactor">10</float>
			<float name="DopplerScale">1</float>
			<string name="Name">Soundscape</string>
			<float name="RolloffScale">1</float>
			<bool name="archivable">true</bool>
		</Properties>
		<External>RBX28</External>
		<External>RBX29</External>
		<External>RBX30</External>
		<External>RBX31</External>
		<External>RBX32</External>
		<External>RBX33</External>
		<External>RBX34</External>
		<External>RBX35</External>
		<External>RBX36</External>
		<External>RBX37</External>
		<External>RBX38</External>
		<External>RBX39</External>
		<External>RBX40</External>
		<External>RBX41</External>
	</Item>
	<Item class="ContentProvider" referent="RBX42">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBX43">
		<Properties>
			<string name="Name">PhysicsService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX44</External>
	<Item class="Selection" referent="RBX45">
		<Properties>
			<string name="Name">Selection</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX46</External>
	<Item class="ControllerService" referent="RBX47">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX48">
		<Properties>
			<Color3 name="Ambient">4287203721</Color3>
			<float name="Brightness">1</float>
			<Color3 name="ColorShift_Bottom">4278190080</Color3>
			<Color3 name="ColorShift_Top">4278190080</Color3>
			<float name="GeographicLatitude">41.7332993</float>
			<string name="Name">Lighting</string>
			<Color3 name="ShadowColor">4290559169</Color3>
			<string name="TimeOfDay">14:00:00</string>
			<bool name="archivable">true</bool>
		</Properties>
		<Item class="Part" referent="RBX49">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">21</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>2.4000001</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<token name="Controller">0</token>
				<bool name="ControllerFlagShown">true</bool>
				<bool name="DraggingV1">false</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">0</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<string name="Name">A</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<bool name="archivable">true</bool>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="CylinderMesh" referent="RBX50">
				<Properties>
					<float name="Bevel">0.5</float>
					<float name="Bevel Roundness">0</float>
					<float name="Bulge">0</float>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="Part" referent="RBX51">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">21</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>2.4000001</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<token name="Controller">0</token>
				<bool name="ControllerFlagShown">true</bool>
				<bool name="DraggingV1">false</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">0</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<string name="Name">Arrow</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<bool name="archivable">true</bool>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX52">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><null></null></Content>
					<token name="MeshType">3</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.5</X>
						<Y>0.5</Y>
						<Z>0.5</Z>
					</Vector3>
					<Content name="TextureId"><null></null></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
			<Item class="ObjectValue" referent="RBX53">
				<Properties>
					<string name="Name">Owner</string>
					<Ref name="Value">null</Ref>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="Part" referent="RBX54">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>2.4000001</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<token name="Controller">0</token>
				<bool name="ControllerFlagShown">true</bool>
				<bool name="DraggingV1">false</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">0</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<string name="Name">Part</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<bool name="archivable">true</bool>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="ObjectValue" referent="RBX55">
				<Properties>
					<string name="Name">Block</string>
					<Ref name="Value">null</Ref>
					<bool name="archivable">true</bool>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="ChangeHistoryService" referent="RBX56">
		<Properties>
			<string name="Name">ChangeHistoryService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX57</External>
</roblox>