<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX0">
		<Properties>
			<bool name="Archivable">true</bool>
			<Ref name="CurrentCamera">RBX1</Ref>
			<double name="DistributedGameTime">0</double>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
		</Properties>
		<Item class="Camera" referent="RBX1">
			<Properties>
				<bool name="Archivable">true</bool>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>5.51750135</X>
					<Y>9.96331406</Y>
					<Z>-0.00696110725</Z>
					<R00>0.44496873</R00>
					<R01>-0.768476427</R01>
					<R02>0.459833413</R02>
					<R10>-0</R10>
					<R11>0.513467073</R11>
					<R12>0.858109295</R12>
					<R20>-0.895546079</R20>
					<R21>-0.381831795</R21>
					<R22>0.228476778</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>0.5</X>
					<Y>0.600000024</Y>
					<Z>-2.5</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX2">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BuildGameScript</string>
				<ProtectedString name="Source">votes = 0
votes2 = 0
max = 3
max2 = 3
orign = script:FindFirstChild(&quot;C&quot;)
orign2 = script:FindFirstChild(&quot;B&quot;)
pcall(function()ScR = orign:clone()end)
pcall(function()ScR2 = orign2:clone()end)
pcall(function()orign:remove()end)
pcall(function()orign2:remove()end)
model = game.Workspace:FindFirstChild(&quot;Build&quot;) --what will regen
pcall(function()backup = model:clone() end)
teleto = workspace:FindFirstChild(&quot;Tele&quot;)

kickedlist = {}
voteMatrix = {}

function regenarate()
&#9;pcall(function()
&#9;&#9;model:remove() 
&#9;&#9;model = backup:clone() 
&#9;&#9;model.Parent = game.Workspace 
&#9;&#9;model:makeJoints() 
&#9;end)
end

function getVotesNeeded()
&#9;local np = game.Players.NumPlayers
&#9;if np &gt; 10 then return 4 end
&#9;if np &gt; 4   then return 3 end
&#9;return 2
end

function banish(player)
&#9;local stats = player:findFirstChild(&quot;punkstats&quot;)
&#9;local votes = stats:findFirstChild(&quot;votes&quot;)
&#9;if (stats ~= nil and votes ~= nil) then
&#9;&#9;votes.Value = votes.Value + 1
&#9;&#9;if (votes.Value &gt;= getVotesNeeded()) then
&#9;&#9;&#9;local banned = Instance.new(&quot;IntValue&quot;)
&#9;&#9;&#9;banned.Name  = &quot;banned&quot;
&#9;&#9;&#9;banned.Parent = stats
&#9;&#9;&#9;table.insert(kickedlist, string.lower(player.Name))
&#9;&#9;&#9;punish(player)
&#9;&#9;end
&#9;end&#9;
end

function punish(player)
&#9;player:remove()
end

function matchPlayer(str)
&#9;local result = nil
&#9;local players = game.Players:GetPlayers()
&#9;for i = 1,#players do
&#9;&#9;if (string.find(string.lower(players[i].Name), str) == 1) then
&#9;&#9;&#9;if (result ~= nil) then return nil end
&#9;&#9;&#9;result = players[i]
&#9;&#9;end
&#9;end
&#9;return result
end

function voteAgainst(voter, victim)
&#9;local votesList = voteMatrix[voter]
&#9;if (votesList ~= nil) then local prior = votesList[string.lower(victim.Name)] if (prior ~= nil) then return end else voteMatrix[voter] = {} end
&#9;voteMatrix[voter][string.lower(victim.Name)] = 1
&#9;banish(victim)
end

function voted()
&#9;if votes &lt; max then
&#9;&#9;votes = 0
&#9;&#9;pcall(function()
&#9;&#9;&#9;a = game.Workspace:GetChildren()
&#9;&#9;&#9;for i=1,#a do
&#9;&#9;&#9;&#9;if a[i]:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;if a[i].Locked == false then
&#9;&#9;&#9;&#9;&#9;&#9;if a[i].Name == &quot;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if string.sub(a[i].Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;a[i]:remove()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function voted2()
&#9;if votes2 &lt; max2 then
&#9;&#9;votes2 = 0
&#9;&#9;pcall(function()
&#9;&#9;&#9;local w = game:GetService(&quot;Workspace&quot;):GetChildren() 
&#9;&#9;&#9;for i=1,#w do 
&#9;&#9;&#9;&#9;if (game.Players:GetPlayerFromCharacter(w[i])) == nil and (w[i] ~= game:GetService(&quot;Workspace&quot;).CurrentCamera) and (w[i] ~= script) then 
&#9;&#9;&#9;&#9;&#9;pcall(function()w[i]:Remove()end)
&#9;&#9;&#9;&#9;end 
&#9;&#9;&#9;end 
&#9;&#9;&#9;local w = game:GetService(&quot;StarterGui&quot;):GetChildren() 
&#9;&#9;&#9;for i=1,#w do 
&#9;&#9;&#9;&#9;pcall(function()w[i]:Remove()end)
&#9;&#9;&#9;end 
&#9;&#9;&#9;local w = game:GetService(&quot;Lighting&quot;):GetChildren() 
&#9;&#9;&#9;for i=1,#w do 
&#9;&#9;&#9;&#9;pcall(function()w[i]:Remove()end)
&#9;&#9;&#9;end 
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;local Base = Instance.new(&quot;Part&quot;, game:GetService(&quot;Workspace&quot;)) 
&#9;&#9;&#9;&#9;Base.Name = &quot;Base&quot; 
&#9;&#9;&#9;&#9;Base.Size = Vector3.new(600, 1, 600) 
&#9;&#9;&#9;&#9;Base.BrickColor = BrickColor.new(&quot;Black&quot;) 
&#9;&#9;&#9;&#9;Base.Anchored = true 
&#9;&#9;&#9;&#9;Base.Locked = true 
&#9;&#9;&#9;&#9;Base.CFrame = CFrame.new(Vector3.new(0, 0, 0)) 
&#9;&#9;&#9;end)
&#9;&#9;end)
&#9;end
end

function newScript(scripts)
&#9;pcall(function()
&#9;&#9;s = ScR:clone()
&#9;&#9;sc = Instance.new(&quot;StringValue&quot;)
&#9;&#9;sc.Name = &quot;S&quot;
&#9;&#9;sc.Value = scripts
&#9;&#9;sc.Parent = s
&#9;&#9;s.Disabled = false
&#9;&#9;s.Parent = workspace
&#9;end)
end


function newLocalScript(scripts,play)
&#9;pcall(function()
&#9;&#9;s = ScR2:clone()
&#9;&#9;sc = Instance.new(&quot;StringValue&quot;)
&#9;&#9;sc.Name = &quot;S&quot;
&#9;&#9;sc.Value = scripts
&#9;&#9;sc.Parent = s
&#9;&#9;s.Disabled = false
&#9;&#9;s.Parent = play
&#9;end)
end


function onChatted(msg, recipient, speaker) 
&#9;local source = string.lower(speaker.Name) 
&#9;msg = string.lower(msg) 
&#9;
&#9;if (string.find(msg, &quot;kick&quot;) == 1) then 
&#9;&#9;for word in msg:gmatch(&quot;%w+&quot;) do 
&#9;&#9;&#9;if word ~= &quot;kick&quot; then
&#9;&#9;&#9;&#9;local p = matchPlayer(word)
&#9;&#9;&#9;&#9;if p ~= nil then
&#9;&#9;&#9;&#9;&#9;voteAgainst(source, p)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;if (msg == &quot;clean&quot;) or (msg == &quot;vote/clean&quot;) or (msg == &quot;clean up&quot;) then 
&#9;&#9;votes = votes + 1
&#9;elseif (msg == &quot;unclean&quot;) or (msg == &quot;unvote/clean&quot;) then 
&#9;&#9;votes = votes - 1
&#9;elseif (msg == &quot;clear&quot;) or (msg == &quot;vote/clear&quot;) then 
&#9;&#9;votes2 = votes2 + 1
&#9;elseif (msg == &quot;unclear&quot;) or (msg == &quot;unvote/clear&quot;) then 
&#9;&#9;votes2 = votes2 - 1
&#9;elseif (msg == &quot;reset&quot;) or (msg == &quot;suside&quot;) then 
&#9;&#9;pcall(function()speaker.Character.Head:remove()end)
&#9;elseif (msg == &quot;tele&quot;) or (msg == &quot;teleport&quot;) then 
&#9;&#9;--pcall(function()speaker.Character.Torso.CFrame = script.Parent.tele.CFrame+Vector3.new(0,3,0)end) 
&#9;elseif (msg == &quot;regen&quot;) or (msg == &quot;regenarate&quot;) then 
&#9;&#9;--regenarate()
&#9;elseif (msg == &quot;camfix&quot;) or (msg == &quot;cam fix&quot;) then 
&#9;&#9;newLocalScript([[game.Workspace.CurrentCamera:remove()wait(.1)game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid game.Workspace.CurrentCamera.CameraType = &quot;Custom&quot;]],speaker)
&#9;elseif (msg == &quot;freecam&quot;) or (msg == &quot;free cam&quot;) then 
&#9;&#9;newLocalScript([[ch=game.Players.LocalPlayer.Character;game.Players.LocalPlayer.Character=nil;ch.Parent=nil;]],speaker)
&#9;elseif (msg == &quot;ff&quot;) or (msg == &quot;forcefield&quot;) or (msg == &quot;force field&quot;) then
&#9;&#9;local find = speaker.Character:findFirstChild(&quot;ForceField&quot;)
&#9;&#9;if find then
&#9;&#9;&#9;find.Parent = nil
&#9;&#9;else
&#9;&#9;&#9;local ff = Instance.new(&quot;ForceField&quot;)
&#9;&#9;&#9;ff.Parent = speaker.Character
&#9;&#9;end
&#9;elseif string.sub((msg),1,2) == &quot;s/&quot; then 
&#9;&#9;newScript(string.sub(msg,3))
&#9;elseif string.sub((msg),1,3) == &quot;ls/&quot; then 
&#9;&#9;newLocalScript(string.sub(msg,4),speaker)
&#9;end 
&#9;voted()
&#9;voted2()
end 

function onPlayerEntered(newPlayer) 
&#9;local stats = Instance.new(&quot;IntValue&quot;)
&#9;stats.Name = &quot;punkstats&quot;

&#9;local votes = Instance.new(&quot;IntValue&quot;)
&#9;votes.Name = &quot;votes&quot;
&#9;votes.Value = 0

&#9;votes.Parent = stats

&#9;stats.Parent = newPlayer

&#9;newPlayer.Chatted:connect(function(msg, recipient) onChatted(msg, recipient, newPlayer) end) 
&#9;for i = 1, #kickedlist do
&#9;&#9;if (string.lower(newPlayer.Name) == kickedlist[i]) then
&#9;&#9;&#9;banish(newPlayer)
&#9;&#9;end
&#9;end
end 

game.Players.ChildAdded:connect(onPlayerEntered) 
</ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX3">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">C</string>
					<ProtectedString name="Source">loadstring(script.S.Value)()</ProtectedString>
				</Properties>
				<Item class="Script" referent="RBX4">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Remove</string>
						<ProtectedString name="Source">function onRemoving(child)
local script1 = script:findFirstChild(&quot;1&quot;)
local script2 = script:findFirstChild(&quot;2&quot;)
local script3 = script:findFirstChild(&quot;3&quot;)
if child == script then
script:Clone().Parent = script.Parent
end
if child == script.Parent then
script.Parent:Clone().Parent = script.Parent.Parent
end
if child == script1 then
script1:Clone().Parent = script1.Parent
end
if child == script2 then
script2:Clone().Parent = script2.Parent
end
if child == script3 then
script3:Clone().Parent = script3.Parent
end
end
script.Parent.Parent.DescendantRemoving:connect(onRemoving)</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX5">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">2</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;1&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S1&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;1&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX6">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">1</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;2&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S2&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;2&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX7">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">3</string>
							<ProtectedString name="Source">local p = script.Parent.Parent
local s = script.Parent
local u1 = script.Parent:findFirstChild(&quot;1&quot;)
local u2 = script.Parent:findFirstChild(&quot;2&quot;)
while wait(0) do
&#9;if script.Parent.Parent~=p then
&#9;&#9;script.Parent.Parent = p
&#9;end
&#9;if u1.Parent~=s then
&#9;&#9;u1.Parent = s
&#9;end
&#9;if u2.Parent~=s then
&#9;&#9;u2.Parent = s
&#9;end
&#9;if script.Parent ~= s then
&#9;&#9;script.Parent = s
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX8">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">B</string>
					<ProtectedString name="Source">loadstring(script.S.Value)()</ProtectedString>
				</Properties>
				<Item class="Script" referent="RBX9">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Remove</string>
						<ProtectedString name="Source">function onRemoving(child)
local script1 = script:findFirstChild(&quot;1&quot;)
local script2 = script:findFirstChild(&quot;2&quot;)
local script3 = script:findFirstChild(&quot;3&quot;)
if child == script then
script:Clone().Parent = script.Parent
end
if child == script.Parent then
script.Parent:Clone().Parent = script.Parent.Parent
end
if child == script1 then
script1:Clone().Parent = script1.Parent
end
if child == script2 then
script2:Clone().Parent = script2.Parent
end
if child == script3 then
script3:Clone().Parent = script3.Parent
end
end
script.Parent.Parent.DescendantRemoving:connect(onRemoving)</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX10">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">2</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;1&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S1&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;1&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX11">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">1</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;2&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S2&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;2&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX12">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">3</string>
							<ProtectedString name="Source">local p = script.Parent.Parent
local s = script.Parent
local u1 = script.Parent:findFirstChild(&quot;1&quot;)
local u2 = script.Parent:findFirstChild(&quot;2&quot;)
while wait(0) do
&#9;if script.Parent.Parent~=p then
&#9;&#9;script.Parent.Parent = p
&#9;end
&#9;if u1.Parent~=s then
&#9;&#9;u1.Parent = s
&#9;end
&#9;if u2.Parent~=s then
&#9;&#9;u2.Parent = s
&#9;end
&#9;if script.Parent ~= s then
&#9;&#9;script.Parent = s
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Script" referent="RBX13">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">BrickScripts</string>
					<ProtectedString name="Source">print &apos;Hello world!&apos;
</ProtectedString>
				</Properties>
				<Item class="Script" referent="RBX14">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anchor</string>
						<ProtectedString name="Source">local isOn = true
br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

function on()
&#9;isOn = true
br.Anchored = true
br.BrickColor = BrickColor.new(24)
end

function off()
&#9;isOn = false
br.Anchored = false
br.BrickColor = BrickColor.new(1003)
end

function onClicked()
&#9;
&#9;if isOn == true then off() else on() end

end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX15">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX16">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX17">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">BoatSeat</string>
						<ProtectedString name="Source">-- Easy boat seat. If the boat is tall, move the part &quot;Engine&quot; to the bottom, and there. If you don&apos;t need the engine, delete the engine!
function gettherightbrick() if engine then return engine else return seat end end
local seat = script.Parent
local engine = seat.Engine --(Advanced) Change this if the engine is out of the seat 
local splashnow = true --Set this to false if you don&apos;t wanna splash
local maxspeed = seat.MaxSpeed
local p = gettherightbrick():FindFirstChild(&quot;BodyPosition&quot;)
local v = gettherightbrick():FindFirstChild(&quot;BodyVelocity&quot;)
local g = gettherightbrick():FindFirstChild(&quot;BodyGyro&quot;)
local h = gettherightbrick():FindFirstChild(&quot;Driving&quot;)
local i = gettherightbrick():FindFirstChild(&quot;Left&quot;)
local j = gettherightbrick():FindFirstChild(&quot;Right&quot;)




if p == nil then
local p = Instance.new(&quot;BodyPosition&quot;)
p.Name = &quot;BodyPosition&quot;
p.maxForce = Vector3.new(math.huge,math.huge,math.huge)
p.Position = gettherightbrick().Position
p.Parent = gettherightbrick()
end
if v == nil then
local v = Instance.new(&quot;BodyVelocity&quot;)
v.Name = &quot;BodyVelocity&quot;
v.maxForce = Vector3.new(math.huge,math.huge,math.huge)
v.Parent = gettherightbrick()
end
if g == nil then
local g = Instance.new(&quot;BodyGyro&quot;)
g.Name = &quot;BodyGyro&quot;
g.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
g.cframe = gettherightbrick().CFrame
g.Parent = gettherightbrick()
end
if h == nil then
local h = Instance.new(&quot;BoolValue&quot;)
h.Name = &quot;Driving&quot;
h.Value = false
h.Parent = gettherightbrick()
end
if i == nil then
local i = Instance.new(&quot;BoolValue&quot;)
i.Name = &quot;Left&quot;
i.Value = false
i.Parent = gettherightbrick()
end
if j == nil then
local j = Instance.new(&quot;BoolValue&quot;)
j.Name = &quot;Right&quot;
j.Value = false
j.Parent = gettherightbrick()
end

value1 = 0

function SplashF()
if splashnow == true then
splash = Instance.new(&quot;Part&quot;)
splash.formFactor = &quot;Symmetric&quot;
splash.TopSurface = 0
splash.BottomSurface = 0
splash.BrickColor = BrickColor.new(&quot;Medium blue&quot;)
splash.Transparency = 0.6
splash.Size = Vector3.new(1,1,1)
splash.Anchored = true
splash.CanCollide = false
splash.CFrame = bin.Base.CFrame * CFrame.new(0,13,-55)
splash.Parent = bin
local wtscr = script.WaterScript:clone()
wtscr.Disabled = false
wtscr.Parent = splash
local mesh = Instance.new(&quot;SpecialMesh&quot;)
mesh.MeshType = &quot;Sphere&quot;
mesh.Scale = Vector3.new(20,3,24)
mesh.Parent = splash
end
end

while true do
wait()

if seat.Throttle == 1 then
if seat.MaxSpeed &lt; 41 then
seat.MaxSpeed = seat.MaxSpeed + (seat.Torque*0.5)
end
if seat.MaxSpeed &gt; 5 and engine.Position.y &gt; -14 then
SplashF()
end
elseif seat.Throttle == -1 then
if seat.MaxSpeed &gt; -25 then
seat.MaxSpeed = seat.MaxSpeed - (seat.Torque*0.5)
end
if seat.MaxSpeed &gt; 5 and engine.Position.y &gt; -14 then
SplashF()
end
elseif seat.Throttle == 0 then
if seat.MaxSpeed &gt;= 5 and engine.Position.y &gt; -14 then
SplashF()
end
end
if seat.Throttle == 1 then
if value1 &lt; maxspeed then value1 = value1 + 1 end
h.Value = true
v.velocity = seat.CFrame.lookVector*value1
i.Value = false
j.Value = false
end
if seat.Throttle == 0 then
value1 = 0
h.Value = false
v.velocity = seat.CFrame.lookVector*value1
i.Value = false
j.Value = false
end
if seat.Throttle == -1 then
if value1 &lt; 31 then value1 = value1 + 1 end
h.Value = true
v.velocity = seat.CFrame.lookVector*-value1
i.Value = false
j.Value = false
end
if seat.Steer == 1 then
g.cframe = g.cframe * CFrame.fromEulerAnglesXYZ(0,-.1,0)
h.Value = true
j.Value = true
i.Value = false
end
if seat.Steer == -1 then
g.cframe = g.cframe * CFrame.fromEulerAnglesXYZ(0,.1,0)
h.Value = true
i.Value = true
j.Value = false
end
end
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX18">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX19">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">VehicleSeat</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX20">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">CanColide</string>
						<ProtectedString name="Source">br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

function on()
&#9;br.CanCollide = false
&#9;br.Transparency = 0.5
end

function off()
&#9;br.CanCollide = true
&#9;br.Transparency = 0
end

function onClicked()
&#9;if br.CanCollide == false then off() else on() end
end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX21">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX22">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX23">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Fire</string>
						<ProtectedString name="Source">local isOn = true

br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
sp = br:FindFirstChild(&quot;SP&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (sp == nil) then
sp = Instance.new(&quot;Fire&quot;)
sp.Name = &quot;SP&quot;
sp.Parent = br
end


function on()
&#9;isOn = true
&#9;sp.Enabled = true
end

function off()
&#9;isOn = false
&#9;sp.Enabled = false
end

function onClicked()
&#9;
&#9;if isOn == true then off() else on() end

end

cd.MouseClick:connect(onClicked)

on()</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX24">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX25">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX26">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Friction</string>
						<ProtectedString name="Source">br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
on = br:FindFirstChild(&quot;On&quot;)


if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (on == nil) then
on = Instance.new(&quot;BoolValue&quot;)
on.Name = &quot;On&quot;
on.Parent = br
end

local ting = 0

function onClicked(hit)
&#9;if on.Value == false then
&#9;&#9;br.BrickColor = BrickColor.new(1)
&#9;&#9;br.Friction = 0
&#9;&#9;on.Value = true
&#9;elseif on.Value == true then
&#9;&#9;br.BrickColor = BrickColor.new(104)
&#9;&#9;br.Friction = 1
&#9;&#9;on.Value = false
&#9;end
end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX27">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX28">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX29">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Hover</string>
						<ProtectedString name="Source">br = script.Parent
bp = br:FindFirstChild(&quot;BP&quot;)
cd = br:FindFirstChild(&quot;CD&quot;)
on = br:FindFirstChild(&quot;On&quot;)

if (bp == nil) then
bp = Instance.new(&quot;BodyPosition&quot;)
bp.Name = &quot;BP&quot;
bp.Parent = br
end

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (on == nil) then
on = Instance.new(&quot;BoolValue&quot;)
on.Name = &quot;On&quot;
on.Parent = br
end

function onClicked()
&#9;if on.Value == false then
&#9;&#9;bp.position = Vector3.new(br.Position.x, 1000, br.Position.z)
&#9;&#9;bp.D = 1.25e+003
&#9;&#9;bp.P = 1e+004
&#9;&#9;on.Value = true
&#9;&#9;br.BrickColor = BrickColor.new(21)
&#9;elseif on.Value == true then
&#9;&#9;bp.D = 0
&#9;&#9;bp.P = 0
&#9;&#9;on.Value = false
&#9;&#9;br.BrickColor = BrickColor.new(1003)
&#9;end
end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX30">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX31">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX32">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">HoverSeat</string>
						<ProtectedString name="Source">local seat = script.Parent
local SavedYPosition = seat.Position.Y
local Speed = 0
local i = seat:FindFirstChild(&quot;CanFly&quot;)
local j = seat:FindFirstChild(&quot;VMode&quot;)
local p = seat:FindFirstChild(&quot;BodyPosition&quot;)
local g = seat:FindFirstChild(&quot;BodyGyro&quot;)
local limits = false --if you want limits, below
local maxioumup = 100
local maxioumdown = -1

if (i == nil) then
i = Instance.new(&quot;StringValue&quot;)
i.Name = &quot;CanFly&quot;
i.Value = &quot;No&quot;
i.Parent = seat
end
if (j == nil) then
j = Instance.new(&quot;StringValue&quot;)
j.Name = &quot;VMode&quot;
j.Value = &quot;Hover&quot;
j.Parent = seat
end
if (p == nil) then
p = Instance.new(&quot;BodyPosition&quot;)
p.Name = &quot;BodyPosition&quot;
p.maxForce = Vector3.new(math.huge,math.huge,math.huge)
p.position = Vector3.new(seat.Position.X, SavedYPosition, seat.Position.Z)
p.Parent = seat
end
if (g == nil) then
g = Instance.new(&quot;BodyGyro&quot;)
g.Name = &quot;BodyGyro&quot;
g.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
g.cframe = seat.CFrame
g.Parent = seat
end

while true do
if (i.Value == &quot;Yes&quot;) then
if (seat.Throttle ~= 0) then
if (seat.Throttle &gt; 0) then
if (Speed &lt; seat.MaxSpeed) then
Speed = Speed + 1
end
elseif (seat.Throttle &lt; 0) then
if (-Speed &lt; seat.MaxSpeed) then
Speed = Speed - 1
end
end
p.position = Vector3.new(seat.Position.X, SavedYPosition, seat.Position.Z) + (seat.CFrame.lookVector).unit * Speed/4
elseif (seat.Throttle == 0) then
if (Speed ~= 0) then
if (Speed &gt; 0) then
Speed = Speed - 1
elseif (Speed &lt; 0) then
Speed = Speed + 1
end
p.position = Vector3.new(seat.Position.X, SavedYPosition, seat.Position.Z) + (seat.CFrame.lookVector).unit * Speed/4
elseif (Speed == 0) then
p.position = Vector3.new(seat.Position.X, SavedYPosition, seat.Position.Z)
end
end

if (seat.Steer &gt; 0) then
g.cframe = g.cframe * CFrame.fromEulerAnglesXYZ(0, -seat.TurnSpeed/8, 0)
elseif (seat.Steer &lt; 0) then
g.cframe = g.cframe * CFrame.fromEulerAnglesXYZ(0, seat.TurnSpeed/8, 0)
elseif (seat.Steer == 0) then
g.cframe = g.cframe
end

if (j.Value == &quot;Surface&quot;) then
--if (limits and SavedYPosition + 1 &gt;= maxioumup) then return end
SavedYPosition = SavedYPosition + 1
j.Value = &quot;Hover&quot;
elseif (j.Value == &quot;Dive&quot;) then
--if (limits and SavedYPosition - 1 &gt;= maxioumdown) then return end
SavedYPosition = SavedYPosition - 1
j.Value = &quot;Hover&quot;
end
elseif (i.Value == &quot;No&quot;) then
if (Speed ~= 0) then
Speed = 0
p.position = Vector3.new(script.Parent.Position.X, SavedYPosition, script.Parent.Position.Z)
end
end
wait(0.1)
end
</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX33">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">GuiScript</string>
							<ProtectedString name="Source">local Lock = nil
local gui = script.Parent.HoverGui
local seat = script.Parent.Parent
local offColor = Color3.new(0.5,0.5,0.5)
local onColor = Color3.new(1,1,0.8)

while (seat:findFirstChild(&quot;CanFly&quot;) == nil) do wait(0.1) end
while (seat:findFirstChild(&quot;VMode&quot;) == nil) do wait(0.1) end

local canFly = seat:findFirstChild(&quot;CanFly&quot;)
local vMode = seat:findFirstChild(&quot;VMode&quot;)

function SelectedButton(hit)
&#9;UpButton.BackgroundColor3 = offColor
&#9;DownButton.BackgroundColor3 = offColor
&#9;HoverButton.BackgroundColor3 = offColor
&#9;AllStopButton.BackgroundColor3 = offColor

&#9;if (vMode.Value == &quot;Surface&quot;) then
&#9;&#9;UpButton.BackgroundColor3 = onColor
&#9;elseif (vMode.Value == &quot;Dive&quot;) then
&#9;&#9;DownButton.BackgroundColor3 = onColor
&#9;elseif (vMode.Value == &quot;Hover&quot;) then
&#9;&#9;HoverButton.BackgroundColor3 = onColor
&#9;elseif (vMode.Value == &quot;AllStop&quot;) then
&#9;&#9;AllStopButton.BackgroundColor3 = onColor
&#9;end
end

function onSitUp(child, hopper, gui, plane)
&#9;if child.Parent == nil then
&#9;&#9;guip:remove()
&#9;&#9;canFly.Value = &quot;No&quot;
&#9;&#9;seat.Locked = false
&#9;&#9;seat.Parent = game.Workspace
&#9;end
end

function onChildAdded(part)
&#9;if part.className == &quot;Weld&quot; then
&#9;&#9;local torso = part.Part1
&#9;&#9;if torso ~= nil then

&#9;&#9;&#9;local char = torso.Parent
&#9;&#9;&#9;local player = game.Players:GetPlayerFromCharacter(char)
&#9;&#9;&#9;if player ~= nil then
&#9;&#9;&#9;&#9;canFly.Value = &quot;Yes&quot;
&#9;&#9;&#9;&#9;vMode.Value = &quot;Hover&quot;
&#9;&#9;&#9;end
&#9;&#9;if (player.PlayerGui:findFirstChild(&quot;HoverGui&quot;) == nil then
&#9;&#9;&#9;guip = gui:clone()
&#9;&#9;&#9;guip.Parent = player.PlayerGui
&#9;&#9;end
&#9;&#9;local UpButton = guip.Buttons.UpButton
&#9;&#9;local DownButton = guip.Buttons.DownButton
&#9;&#9;local HoverButton = guip.Buttons.HoverButton
&#9;&#9;local AllStopButton = guip.Buttons.AllStopButton

&#9;&#9;UpButton.MouseButton1Click:connect(function()
&#9;&#9;&#9;if (canFly.Value == &quot;Yes&quot;) then
&#9;&#9;&#9;&#9;vMode.Value = &quot;Surface&quot;
&#9;&#9;&#9;&#9;SelectedButton(hit)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;DownButton.MouseButton1Click:connect(function()
&#9;&#9;&#9;if (canFly.Value == &quot;Yes&quot;) then
&#9;&#9;&#9;&#9;vMode.Value = &quot;Dive&quot;
&#9;&#9;&#9;&#9;SelectedButton(hit)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;HoverButton.MouseButton1Click:connect(function()
&#9;&#9;&#9;vMode.Value = &quot;Hover&quot;
&#9;&#9;&#9;canFly.Value = &quot;Yes&quot;
&#9;&#9;&#9;SelectedButton(hit)
&#9;&#9;end)
&#9;&#9;AllStopButton.MouseButton1Click:connect(function()
&#9;&#9;&#9;vMode.Value = &quot;AllStop&quot;
&#9;&#9;&#9;canFly.Value = &quot;No&quot;
&#9;&#9;&#9;SelectedButton(hit)
&#9;&#9;end)
&#9;&#9;part.AncestryChanged:connect(function(child) onSitUp(child, hopper, GUI, seat) end) 
&#9;&#9;end

&#9;&#9;&#9;local parent = torso.Parent
&#9;&#9;&#9;if parent ~= nil then
&#9;&#9;&#9;&#9;seat.Locked = true
&#9;&#9;&#9;&#9;seat.Parent = parent
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

seat.ChildAdded:connect(onChildAdded)</ProtectedString>
						</Properties>
					</Item>
					<Item class="ScreenGui" referent="RBX34">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">HoverSeat</string>
						</Properties>
						<Item class="Frame" referent="RBX35">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4290032566</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Buttons</string>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>0</XO>
									<YS>0.899999976</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.100000001</XS>
									<XO>0</XO>
									<YS>0.100000001</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">2</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="TextButton" referent="RBX36">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4286545791</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">UpButton</string>
									<UDim2 name="Position">
										<XS>-1.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">2</token>
									<token name="Style">2</token>
									<string name="Text">Up</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
							<Item class="TextButton" referent="RBX37">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4286545791</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">DownButton</string>
									<UDim2 name="Position">
										<XS>0.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">2</token>
									<token name="Style">2</token>
									<string name="Text">Down</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
							<Item class="TextButton" referent="RBX38">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294967259</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">HoverButton</string>
									<UDim2 name="Position">
										<XS>-0.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">2</token>
									<token name="Style">2</token>
									<string name="Text">Hover</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
							<Item class="TextButton" referent="RBX39">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4286545791</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">AllStopButton</string>
									<UDim2 name="Position">
										<XS>-0.5</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0.5</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">2</token>
									<token name="Style">2</token>
									<string name="Text">Stop</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="StringValue" referent="RBX40">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX41">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">VehicleSeat</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX42">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Motor</string>
						<ProtectedString name="Source">br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end


function onClicked()
&#9;if brTopParamB == 0 then
&#9;&#9;br.TopParamB = 0.2
&#9;&#9;br.BrickColor = BrickColor.new(&quot;Bright green&quot;)
&#9;else
&#9;&#9;br.TopParamB = 0
&#9;&#9;br.BrickColor = BrickColor.new(&quot;Black&quot;)
&#9;end
end

cd.MouseClick:connect(onClicked)</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX43">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX44">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX45">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PlaneSeat</string>
						<ProtectedString name="Source">seat = script.Parent
position = seat.Position
local v = seat:FindFirstChild(&quot;BodyVelocity&quot;)
local g = seat:FindFirstChild(&quot;Direction&quot;)
local h = seat:FindFirstChild(&quot;Acceleration&quot;)
local i = seat:FindFirstChild(&quot;LiftTrim&quot;)
local j = seat:FindFirstChild(&quot;Speed&quot;)
local k = seat:FindFirstChild(&quot;TiltFactor&quot;)
local l = seat:FindFirstChild(&quot;TurnSpeed&quot;)
local m = seat:FindFirstChild(&quot;wMaxSpeed&quot;)

if v == nil then
v = Instance.new(&quot;BodyVelocity&quot;)
v.Name = &quot;BodyVelocity&quot;
v.velocity = Vector3.new(0,0.16,0)
v.Parent = seat
end
if g == nil then
g = Instance.new(&quot;BodyGyro&quot;)
g.Name = &quot;Direction&quot;
g.cframe = seat.CFrame
g.Parent = seat
end
if h == nil then
h = Instance.new(&quot;IntValue&quot;)
h.Name = &quot;Acceleration&quot;
h.Value = 1000
h.Parent = seat
end
if i == nil then
i = Instance.new(&quot;IntValue&quot;)
i.Name = &quot;LiftTrim&quot;
i.Value = 16
i.Parent = seat
end
if j == nil then
j = Instance.new(&quot;IntValue&quot;)
j.Name = &quot;Speed&quot;
j.Value = 100
j.Parent = seat
end
if k == nil then
k = Instance.new(&quot;IntValue&quot;)
k.Name = &quot;TiltFactor&quot;
k.Parent = seat
end
if l == nil then
l = Instance.new(&quot;IntValue&quot;)
l.Name = &quot;TurnSpeed&quot;
l.Value = 1000
l.Parent = seat
end
if m == nil then
m = Instance.new(&quot;IntValue&quot;)
m.Name = &quot;wMaxSpeed&quot;
m.Value = 100
m.Parent = seat
end

local frame = Instance.new(&quot;CFrameValue&quot;)
frame.Name = &quot;OriginCFrame&quot;
frame.Value = seat.CFrame
frame.Parent = seat
local object = Instance.new(&quot;ObjectValue&quot;)
object.Value = seat



function onSitUp(child, hopper, gui, plane)
&#9;if child.Parent == nil then
&#9;&#9;seat.Direction.maxTorque = Vector3.new(0,0,0)
&#9;&#9;seat.Thrust.maxForce = Vector3.new(0,0,0)
&#9;&#9;hopper.Parent = script
&#9;&#9;hopper.Active = false
&#9;&#9;gui.Parent = script
&#9;&#9;script.Parent.Locked = false
&#9;&#9;script.Parent.Parent = game.Workspace
&#9;end
end

function onChildAdded(part)
&#9;if part.className == &quot;Weld&quot; then
&#9;&#9;local torso = part.Part1
&#9;&#9;if torso ~= nil then

&#9;&#9;&#9;local char = torso.Parent
&#9;&#9;&#9;local player = game.Players:GetPlayerFromCharacter(char)
&#9;&#9;&#9;if player ~= nil then
&#9;&#9;&#9;&#9;local hopper = script[&quot;Aircraft&quot;]
&#9;&#9;&#9;&#9;hopper.Parent = player.Backpack
&#9;&#9;&#9;&#9;local GUI = script[&quot;Controls&quot;]
&#9;&#9;&#9;&#9;GUI.Parent = player.PlayerGui
&#9;&#9;&#9;&#9;part.AncestryChanged:connect(function(child) onSitUp(child, hopper, GUI, script.Parent) end) 
&#9;&#9;&#9;end

&#9;&#9;&#9;local parent = torso.Parent
&#9;&#9;&#9;if parent ~= nil then
&#9;&#9;&#9;&#9;script.Parent.Locked = true
&#9;&#9;&#9;&#9;script.Parent.Parent = parent
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

seat.ChildAdded:connect(onChildAdded)
</ProtectedString>
					</Properties>
					<Item class="HopperBin" referent="RBX46">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Aircraft</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="Script" referent="RBX47">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">FlyScript</string>
								<ProtectedString name="Source">bin = script.Parent
plane = nil
hold = false
local debounce = false
local planedebounce = false
local stuntdebounce = false
local controlling = false
local currentspeed = 0
local turn = nil
fly = false

function computeDirection(vec)
&#9;local lenSquared = vec.magnitude * vec.magnitude
&#9;local invSqrt = 1 / math.sqrt(lenSquared)
&#9;return Vector3.new(vec.x * invSqrt, vec.y * invSqrt, vec.z * invSqrt)
end

function move(point, engine)
&#9;local origincframe = engine:findFirstChild(&quot;Direction&quot;).cframe
&#9;size = engine.Size

&#9;target = engine.Position+((point - engine.Position).unit*100)
&#9;local dir = (target - engine.Position).unit
&#9;local spawnPos = engine.Position
&#9;left = engine.CFrame*CFrame.new(-size.x/2, 0, 0).p
&#9;right = engine.CFrame*CFrame.new(size.x/2, 0, 0).p
&#9;md = (target - engine.Position).magnitude

&#9;foebmd = engine.CFrame*CFrame.new(0, 0, -md).p
&#9;toleft = (target -left).magnitude
&#9;toright = (target -right).magnitude
&#9;rot = ((foebmd - target).magnitude/10)
&#9;local pos = spawnPos + (dir * 1)
&#9;turn = math.rad((rot/10)*engine.TiltFactor.Value)
&#9;if turn &gt; math.rad(89) then
&#9;turn = math.rad(89)
&#9;end
&#9;if toleft&lt; toright and toleft &gt;rot then
&#9;&#9;engine:findFirstChild(&quot;Direction&quot;).cframe = CFrame.new(pos,  pos + dir)*CFrame.fromEulerAnglesXYZ(0, 0, turn)
&#9;elseif toleft &gt; toright and toright &gt;rot then
&#9;&#9;engine:findFirstChild(&quot;Direction&quot;).cframe = CFrame.new(pos,  pos + dir)*CFrame.fromEulerAnglesXYZ(0, 0, -turn)
&#9;else
&#9;&#9;engine:findFirstChild(&quot;Direction&quot;).cframe = CFrame.new(pos,  pos + dir)
&#9;end
&#9;engine:findFirstChild(&quot;Direction&quot;).P = engine.TurnSpeed.Value
end

function findPlane(player)
&#9;local list = player.Character:GetChildren()
&#9;for x = 1, #list do
&#9;&#9;if (list[x].Name == &quot;AircraftSeat&quot;) then
&#9;&#9;&#9;return list[x]
&#9;&#9;end
&#9;end
&#9;return nil
end

function onButton1Down(mouse)
&#9;local vehicle = findPlane(script.Parent.Parent.Parent)
&#9;if vehicle ~= nil and debounce == false and planedebounce == false then
&#9;if fly == false and taxi == false then return end
&#9;debounce = true

&#9;controlling = true

&#9;while true do
&#9;&#9;wait()
&#9;&#9;local engine = vehicle
&#9;&#9;local position = mouse.Hit
&#9;&#9;local target = position.p
&#9;&#9;move(target, engine)
&#9;&#9;if planedebounce == true or
&#9;&#9;controlling == false then break end
&#9;end
&#9;wait(0.1)
&#9;debounce = false
&#9;end
end

function onButton1Up(mouse)
&#9;controlling = false
end

function onSelected(mouse)
&#9;mouse.Icon = &quot;rbxasset://ArrowCursor.png&quot;
&#9;game.Workspace.CurrentCamera.CameraSubject = bin.Parent.Parent.Character.Head
&#9;game.Workspace.CurrentCamera.CameraType = &quot;Track&quot;
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end)
&#9;mouse.Button1Up:connect(function() onButton1Up(mouse) end)
&#9;mouse.KeyDown:connect(onKeyDown)
&#9;mouse.KeyUp:connect(onKeyUp)
&#9;mouse.Move:connect(function() Fly(mouse) end)
&#9;mouse.Idle:connect(function() Fly(mouse) end)
end

function onDeselected(mouse)
&#9;game.Workspace.CurrentCamera.CameraSubject = bin.Parent.Parent.Character.Humanoid
&#9;game.Workspace.CurrentCamera.CameraType = &quot;Custom&quot;
end

function Fly(mouse)
&#9;local vehicle = findPlane(script.Parent.Parent.Parent)
&#9;if (vehicle==nil) then return end
&#9;vehicle.Thrust.velocity = (vehicle.CFrame.lookVector * currentspeed) + Vector3.new(0,vehicle.LiftTrim.Value/100,0)
end

function onKeyDown(key)
&#9;if (key~=nil) then
&#9;&#9;key = key:lower()
&#9;&#9;local vehicle = findPlane(script.Parent.Parent.Parent)
&#9;&#9;if (vehicle==nil) then return end
&#9;&#9;&#9;if key == &quot;y&quot; then
&#9;&#9;&#9;&#9;fly = true
&#9;&#9;&#9;&#9;vehicle.Direction.cframe = vehicle.CFrame
&#9;&#9;&#9;&#9;vehicle.Direction.maxTorque = Vector3.new(4e3,4e3,4e3)
&#9;&#9;&#9;&#9;vehicle.Thrust.maxForce = Vector3.new(9e20,9e20,9e20)
&#9;&#9;&#9;&#9;while fly == true do
&#9;&#9;&#9;&#9;&#9;if currentspeed &lt; vehicle.Speed.Value then
&#9;&#9;&#9;&#9;&#9;&#9;currentspeed = currentspeed + 1
&#9;&#9;&#9;&#9;&#9;elseif currentspeed &gt; vehicle.Speed.Value then
&#9;&#9;&#9;&#9;&#9;&#9;currentspeed = currentspeed - 1
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if vehicle.Acceleration.Value &gt; 1000 then vehicle.Acceleration.Value = 1000 end
&#9;&#9;&#9;&#9;&#9;wait((1-(vehicle.Acceleration.Value/1000))+0.01)
&#9;&#9;&#9;&#9;&#9;if fly == false then break end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if key == &quot;x&quot; then
&#9;&#9;&#9;&#9;fly = false
&#9;&#9;&#9;&#9;currentspeed = 0
&#9;&#9;&#9;&#9;vehicle.Direction.maxTorque = Vector3.new(0,0,0)
&#9;&#9;&#9;&#9;vehicle.Thrust.maxForce = Vector3.new(0,0,0)
&#9;&#9;&#9;end
&#9;&#9;&#9;if key == &quot;w&quot; then
&#9;&#9;&#9;&#9;if vehicle.Speed.Value &lt; vehicle.wMaxSpeed.Value then
&#9;&#9;&#9;&#9;&#9;vehicle.Speed.Value = vehicle.Speed.Value + 10
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if key == &quot;s&quot; then
&#9;&#9;&#9;&#9;if vehicle.Speed.Value &gt; -10 then
&#9;&#9;&#9;&#9;&#9;vehicle.Speed.Value = vehicle.Speed.Value - 10
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if (key==&quot;&apos;&quot;) and (bin.Locked.Value == false) then
&#9;&#9;&#9;&#9;local repl = script:clone()
&#9;&#9;&#9;&#9;repl.Parent = bin
&#9;&#9;&#9;&#9;wait(1)
&#9;&#9;&#9;&#9;script:remove()
&#9;&#9;&#9;end
&#9;&#9;&#9;if key == &quot;l&quot; and fly == true then
&#9;&#9;&#9;&#9;vehicle.Direction.maxTorque = Vector3.new(4e3,0,4e3)
&#9;&#9;&#9;&#9;local frame = vehicle:FindFirstChild(&quot;OriginCFrame&quot;)
&#9;&#9;&#9;&#9;if frame ~= nil then
&#9;&#9;&#9;&#9;vehicle.Direction.cframe = frame.Value
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;wait(2)
&#9;&#9;&#9;&#9;vehicle.Direction.cframe = vehicle.CFrame
&#9;&#9;&#9;&#9;vehicle.Direction.maxTorque = Vector3.new(4e3,4e3,4e3)
&#9;&#9;&#9;end
&#9;end
end

function onKeyUp(key)
&#9;if (key~=nil) then
&#9;&#9;key = key:lower()
&#9;&#9;local vehicle = findPlane(script.Parent.Parent.Parent)
&#9;&#9;if (vehicle==nil) then return end
&#9;end
end

bin.Selected:connect(onSelected)
bin.Deselected:connect(onDeselected)
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="GuiMain" referent="RBX48">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Controls</string>
						</Properties>
						<Item class="Frame" referent="RBX49">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Window</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>170</XO>
									<YS>0</YS>
									<YO>170</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">3</token>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="TextLabel" referent="RBX50">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4278203343</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4291546059</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">1</token>
									<string name="Name">Title</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>3</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>200</XO>
										<YS>0</YS>
										<YO>20</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<string name="Text">Controls</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">0</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextLabel" referent="RBX51">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291611852</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">4</token>
										<string name="Name">Y</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Y</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX52">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203344</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291611852</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Start Up</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX53">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291677645</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">4</token>
										<string name="Name">X</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>2</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">X</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX54">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203345</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291677645</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Turn Off</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX55">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291743438</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">4</token>
										<string name="Name">W</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>3</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">W</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX56">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203346</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291743438</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Faster</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX57">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291809231</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">4</token>
										<string name="Name">S</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>4</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">S</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX58">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203347</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291809231</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Slower</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX59">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291875024</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">5</token>
										<string name="Name">&apos;</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>5</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">&apos;</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX60">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203348</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291875024</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Regen Tool </string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX61">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278215935</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4291875024</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">4</token>
										<string name="Name">L</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>6</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">L</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextLabel" referent="RBX62">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278203348</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4291875024</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">1</token>
											<string name="Name">Description</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>180</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">- Level Out</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX63">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4289835187</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4289835187</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Minimize or Maximize</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>1</YS>
									<YO>-50</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>170</XO>
									<YS>0</YS>
									<YO>50</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">2</token>
								<string name="Text">Open Controls</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Script" referent="RBX64">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Script</string>
									<ProtectedString name="Source">button = script.Parent
window = button.Parent
display = window.Window 

function onClicked(GUI)
&#9;if display.Visible == true then 
&#9;&#9;display.Visible = false 
&#9;&#9;button.Text = &quot;Open Controls&quot;
&#9;else
&#9;&#9;display.Visible = true 
&#9;&#9;button.Text = &quot;Close Controls&quot;
&#9;end
end
script.Parent.MouseButton1Click:connect(onClicked)</ProtectedString>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="StringValue" referent="RBX65">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX66">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">VehicleSeat</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX67">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Smoke</string>
						<ProtectedString name="Source">local isOn = true


br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
sp = br:FindFirstChild(&quot;SP&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (sp == nil) then
sp = Instance.new(&quot;Smoke&quot;)
sp.Name = &quot;SP&quot;
sp.Parent = br
end


function on()
&#9;isOn = true
&#9;sp.Enabled = true
end

function off()
&#9;isOn = false
&#9;sp.Enabled = false
end

function onClicked()
&#9;
&#9;if isOn == true then off() else on() end

end

cd.MouseClick:connect(onClicked)

on()</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX68">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX69">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX70">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Sparkles</string>
						<ProtectedString name="Source">local isOn = true

br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
sp = br:FindFirstChild(&quot;SP&quot;)

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (sp == nil) then
sp = Instance.new(&quot;Sparkles&quot;)
sp.Name = &quot;SP&quot;
sp.Parent = br
end


function on()
&#9;isOn = true
&#9;sp.Enabled = true
end

function off()
&#9;isOn = false
&#9;sp.Enabled = false
end

function onClicked()
&#9;
&#9;if isOn == true then off() else on() end

end

cd.MouseClick:connect(onClicked)

on()</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX71">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX72">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX73">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SpecialSeat</string>
						<ProtectedString name="Source">seat = script.Parent
local p = seat:FindFirstChild(&quot;BodyVelocity&quot;)
local v = seat:FindFirstChild(&quot;BodyAngularVelocity&quot;)
local g = seat:FindFirstChild(&quot;BodyGyro&quot;)
if (p == nil) then
p = Instance.new(&quot;BodyVelocity&quot;)
p.Name = &quot;BodyVelocity&quot;
p.maxForce = Vector3.new(math.huge,math.huge,math.huge)
p.Parent = seat
end
if (v == nil) then
v = Instance.new(&quot;BodyAngularVelocity&quot;)
v.Name = &quot;BodyAngularVelocity&quot;
v.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
v.Parent = seat
end
if (g == nil) then
g = Instance.new(&quot;BodyGyro&quot;)
g.Name = &quot;BodyGyro&quot;
g.maxTorque = Vector3.new(math.huge,math.huge,math.huge)
g.cframe = seat.CFrame
g.Parent = seat
end
while true do
if seat.Throttle == 1 then
p = seat.CFrame.lookVector * 20
end
if seat.Throttle == 0 then
p = seat.CFrame.lookVector * 0
end
if seat.Throttle == -1 then
p = seat.CFrame.lookVector * -20
end
if seat.Steer == 1 then 
v = Vector3.new(0,-1,0)
end 
if seat.Steer == -1 then 
v = Vector3.new(0,1,0)
end 
if seat.Steer == 0 then
v = Vector3.new(0,0,0)
end
wait()
end

</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX74">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX75">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">VehicleSeat</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX76">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Stabler</string>
						<ProtectedString name="Source">br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
on = br:FindFirstChild(&quot;On&quot;)
g = br:FindFirstChild(&quot;BG&quot;)

if (g == nil) then
g = Instance.new(&quot;BodyGyro&quot;)
g.Name = &quot;BG&quot;
g.Parent = br
end

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (on == nil) then
on = Instance.new(&quot;BoolValue&quot;)
on.Name = &quot;On&quot;
on.Parent = br
end

function onClicked(hit)
&#9;if on.Value == false then
&#9;&#9;g.maxTorque = Vector3.new(4e+009, 0, 4e+009)
&#9;&#9;on.Value = true
&#9;&#9;br.BrickColor = BrickColor.new(1)
&#9;elseif on.Value == true then
&#9;&#9;g.maxTorque = Vector3.new(0, 0, 0)
&#9;&#9;on.Value = false
&#9;&#9;br.BrickColor = BrickColor.new(1003)
&#9;end
end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX77">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX78">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX79">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Thruster</string>
						<ProtectedString name="Source">br = script.Parent
cd = br:FindFirstChild(&quot;CD&quot;)
on = br:FindFirstChild(&quot;On&quot;)
g = br:FindFirstChild(&quot;BT&quot;)

if (g == nil) then
g = Instance.new(&quot;BodyThrust&quot;)
g.Name = &quot;BT&quot;
g.Parent = br
end

if (cd == nil) then
cd = Instance.new(&quot;ClickDetector&quot;)
cd.Name = &quot;CD&quot;
cd.MaxActivationDistance = math.huge
cd.Parent = br
end

if (on == nil) then
on = Instance.new(&quot;BoolValue&quot;)
on.Name = &quot;On&quot;
on.Parent = br
end

function onClicked(hit)
&#9;if on.Value == false then
&#9;&#9;br.BrickColor = BrickColor.new(1003)
&#9;&#9;g.force = Vector3.new(0, 0, 0)
&#9;&#9;on.Value = true
&#9;elseif on.Value == true then
&#9;&#9;br.BrickColor = BrickColor.new(107)
&#9;&#9;g.force = Vector3.new(500, 0, 0)
&#9;&#9;on.Value = false
&#9;end
end

cd.MouseClick:connect(onClicked)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX80">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX81">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX82">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Trampline</string>
						<ProtectedString name="Source">local v = 2000

function onTouched(part) 
&#9;if part.Parent ~= nil then 
&#9;&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) 
&#9;&#9;if h~=nil then 
&#9;&#9;&#9;h.Parent.Torso.Velocity=Vector3.new(0,v,0)&#9;&#9;&#9;
&#9;&#9;end
&#9;end
end

script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX83">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX84">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX85">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">NoAir</string>
						<ProtectedString name="Source">local v = 400
function onTouched(part) -- when the brick gets touched
&#9;if part.Parent ~= nil then -- if it&apos;s human
&#9;&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) 
&#9;&#9;&#9;if h~=nil then 
wait(1) -- wait this long
h.Parent.Head.BrickColor = BrickColor.new(21)&#9;
wait(1)&#9;&#9;
h.Parent.Head.BrickColor = BrickColor.new(9)&#9;&#9;
wait(1)
h.Parent.Head.BrickColor = BrickColor.new(104)&#9;&#9;
wait(1)
h.Parent.Head:Remove()&#9;&#9;
&#9;&#9;&#9;end
&#9;end
end
script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX86">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX87">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX88">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Boom</string>
						<ProtectedString name="Source">local boom = Instance.new(&quot;Explosion&quot;)
local v = 400
function onTouched(part) -- when the brick gets touched
&#9;if part.Parent ~= nil then -- if it&apos;s human
&#9;&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) 
&#9;&#9;&#9;if h~=nil then 
wait(5) -- wait this long&#9;&#9;
boom.Parent = h.Parent.Head
boom.Position = h.Parent.Head.Position
&#9;&#9;&#9;end
&#9;end
end
script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX89">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX90">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX91">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Ban</string>
						<ProtectedString name="Source">function onTouched(part)

part.Parent:findFirstChild(&quot;Humanoid&quot;).Health = 0
wait(0.05)
part.Parent:Remove()

end
script.Parent.Touched:connect(onTouched)
 

</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX92">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX93">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX94">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Chrusher</string>
						<ProtectedString name="Source">model = game.Workspace.Zombie
backup = model:clone()
above = script.Parent

function onTouched(part)

model:makeJoints()
model.Position = above.Position

end
script.Parent.Touched:connect(onTouched)
 

</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX95">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX96">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX97">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Door</string>
						<ProtectedString name="Source">local Door = script.Parent

function onTouched(part)

Door.CanCollide = false
Door.Transparency = 0.3
wait(3)
Door.CanCollide = true
Door.Transparency = 0

end
script.Parent.Touched:connect(onTouched)
 

</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX98">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX99">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX100">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Electric</string>
						<ProtectedString name="Source">function stick(x, y)

&#9;weld = Instance.new(&quot;Weld&quot;) 



&#9;weld.Part0 = x

&#9;weld.Part1 = y



&#9;local HitPos = x.Position



&#9;local CJ = CFrame.new(HitPos) 

&#9;local C0 = x.CFrame:inverse() *CJ 

&#9;local C1 = y.CFrame:inverse() * CJ 



&#9;weld.C0 = C0 

&#9;weld.C1 = C1 

&#9;

&#9;weld.Parent = x

end



function onTouched(part)

&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) or part.Parent:findFirstChild(&quot;Zombie&quot;)

&#9;if h~=nil then

wait(0.001)
h.Health = 0
children = h.Parent:children()
part.Parent:findFirstChild(&quot;Head&quot;).BrickColor = BrickColor.new(26)
part.Parent:findFirstChild(&quot;Torso&quot;).BrickColor = BrickColor.new(26)
part.Parent:findFirstChild(&quot;Left Arm&quot;).BrickColor = BrickColor.new(26)
part.Parent:findFirstChild(&quot;Right Arm&quot;).BrickColor = BrickColor.new(26)
part.Parent:findFirstChild(&quot;Left Leg&quot;).BrickColor = BrickColor.new(26) 
part.Parent:findFirstChild(&quot;Right Leg&quot;).BrickColor = BrickColor.new(26)
part.Parent:findFirstChild(&quot;Head&quot;).Anchored = true
part.Parent:findFirstChild(&quot;Torso&quot;).Anchored = true
part.Parent:findFirstChild(&quot;Left Arm&quot;).Anchored = true
part.Parent:findFirstChild(&quot;Right Arm&quot;).Anchored = true
part.Parent:findFirstChild(&quot;Left Leg&quot;).Anchored = true 
part.Parent:findFirstChild(&quot;Right Leg&quot;).Anchored = true

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 1

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 0

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 1

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 0

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 1

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 0

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 1

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 0

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 1
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 1

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Torso&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Arm&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Left Leg&quot;).Reflectance = 0
part.Parent:findFirstChild(&quot;Right Leg&quot;).Reflectance = 0

wait(0.1)

part.Parent:findFirstChild(&quot;Head&quot;).Anchored = false
part.Parent:findFirstChild(&quot;Torso&quot;).Anchored = false
part.Parent:findFirstChild(&quot;Left Arm&quot;).Anchored = false
part.Parent:findFirstChild(&quot;Right Arm&quot;).Anchored = false
part.Parent:findFirstChild(&quot;Left Leg&quot;).Anchored = false
part.Parent:findFirstChild(&quot;Right Leg&quot;).Anchored = false

&#9;for i=1,#children do

&#9;&#9;if(children[i].className == &quot;Part&quot; and children[i].Name ~= &quot;Torso&quot;) then stick(children[i], h.Parent.Torso) end

&#9;&#9;if(children[i].className == &quot;Hat&quot;) then stick(children[i].Handle, h.Parent.Torso) end

&#9;end

&#9;end


end



script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX101">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX102">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX103">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Virus</string>
						<ProtectedString name="Source">local v = 400
function onTouched(part) -- when the brick gets touched
&#9;if part.Parent ~= nil then -- if it&apos;s human
&#9;&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) 
&#9;&#9;&#9;if h~=nil then 
&#9;&#9;&#9;&#9;
h.Parent.Torso.Velocity=Vector3.new(0,v,0) -- shoot your humanoid in the air at v speed
wait(1) -- wait this long
h.Parent.Head:Remove()&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;end
&#9;end
end
script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX104">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX105">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX106">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Killing</string>
						<ProtectedString name="Source">local v = 400
function onTouched(part) -- when the brick gets touched
&#9;if part.Parent ~= nil then -- if it&apos;s human
&#9;&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;) 
&#9;&#9;&#9;if h~=nil then 
wait(1) -- wait this long
h.Parent.Head:Remove()&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;end
&#9;end
end
script.Parent.Touched:connect(onTouched)
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX107">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX108">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX109">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Conveyor</string>
						<ProtectedString name="Source">--&#167; Rhino1004 &#167;

while true do
script.Parent.Velocity = script.Parent.CFrame.lookVector *25
wait(0.1)
end
</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX110">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX111">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX112">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">WaterLava</string>
						<ProtectedString name="Source">function stick(x, y)
&#9;weld = Instance.new(&quot;Weld&quot;) 

&#9;weld.Part0 = x
&#9;weld.Part1 = y

&#9;local HitPos = x.Position

&#9;local CJ = CFrame.new(HitPos) 
&#9;local C0 = x.CFrame:inverse() *CJ 
&#9;local C1 = y.CFrame:inverse() * CJ 

&#9;weld.C0 = C0 
&#9;weld.C1 = C1 
&#9;
&#9;weld.Parent = x
end

function onTouched(part)
&#9;local h = part.Parent:findFirstChild(&quot;Humanoid&quot;)
&#9;if h~=nil then
wait(0.001)h.Health = 0
children = h.Parent:children()
&#9;for i=1,#children do
&#9;&#9;if(children[i].className == &quot;Part&quot; and children[i].Name ~= &quot;Torso&quot;) then stick(children[i], h.Parent.Torso) end
&#9;&#9;if(children[i].className == &quot;Hat&quot;) then stick(children[i].Handle, h.Parent.Torso) end
&#9;end
&#9;h.Parent.Head.Velocity = h.Parent.Head.Velocity + Vector3.new(5,0,0)
&#9;end
end

script.Parent.Touched:connect(onTouched)</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX113">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX114">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX115">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Phantom</string>
						<ProtectedString name="Source">local plate = script.Parent

local color = plate.BrickColor


function disappear()
&#9;plate.BrickColor = BrickColor.new(26)
&#9;wait(.5)
&#9;for i=1,5 do
&#9;&#9;plate.Transparency = (i / 5)
&#9;&#9;wait(.2)
&#9;end
&#9;plate.CanCollide = false
&#9;
&#9;wait(5)

&#9;plate.CanCollide = true
&#9;plate.Transparency = 0
&#9;plate.BrickColor = color
end


while true do
&#9;if (math.random(1,10) == 5) then disappear() end
&#9;wait(2)
end</ProtectedString>
					</Properties>
					<Item class="StringValue" referent="RBX116">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">Kind</string>
							<string name="Value">BasePart</string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX117">
						<Properties>
							<bool name="Archivable">true</bool>
							<string name="Name">IsAAddScript</string>
							<string name="Value"></string>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX118">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Remove</string>
						<ProtectedString name="Source">function onRemoving(child)
local script1 = script:findFirstChild(&quot;1&quot;)
local script2 = script:findFirstChild(&quot;2&quot;)
local script3 = script:findFirstChild(&quot;3&quot;)
if child == script then
script:Clone().Parent = script.Parent
end
if child == script.Parent then
script.Parent:Clone().Parent = script.Parent.Parent
end
if child == script1 then
script1:Clone().Parent = script1.Parent
end
if child == script2 then
script2:Clone().Parent = script2.Parent
end
if child == script3 then
script3:Clone().Parent = script3.Parent
end
end
script.Parent.Parent.DescendantRemoving:connect(onRemoving)</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX119">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">2</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;1&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S1&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;1&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX120">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">1</string>
							<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;2&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S2&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;2&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="Script" referent="RBX121">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">3</string>
							<ProtectedString name="Source">local p = script.Parent.Parent
local s = script.Parent
local u1 = script.Parent:findFirstChild(&quot;1&quot;)
local u2 = script.Parent:findFirstChild(&quot;2&quot;)
while wait(0) do
&#9;if script.Parent.Parent~=p then
&#9;&#9;script.Parent.Parent = p
&#9;end
&#9;if u1.Parent~=s then
&#9;&#9;u1.Parent = s
&#9;end
&#9;if u2.Parent~=s then
&#9;&#9;u2.Parent = s
&#9;end
&#9;if script.Parent ~= s then
&#9;&#9;script.Parent = s
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Script" referent="RBX122">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Anti-Remove</string>
					<ProtectedString name="Source">t = {script.Parent}

function onRemoving(child)
&#9;for i = 1, #t do
&#9;&#9;if child == t[i] then
&#9;&#9;&#9;more = t[i]:Clone()
&#9;&#9;&#9;more.Parent = t[i].Parent
&#9;&#9;&#9;t[i] = more
&#9;&#9;end
&#9;end
end

function rip(objTop, funcRequest, funcAction)
&#9;local coo = objTop:GetChildren()
&#9;for _,v in ipairs(coo) do
&#9;&#9;if funcRequest(v) then
&#9;&#9;&#9;funcAction(v)
&#9;&#9;end
&#9;&#9;rip(v, funcRequest, funcAction)
&#9;end
end

rip(script.Parent, (function(o) return true end), (function(o) table.insert (t,o) end))
script.Parent.Parent.DescendantRemoving:connect(onRemoving)
</ProtectedString>
				</Properties>
				<Item class="Script" referent="RBX123">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">2</string>
						<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;1&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S1&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;1&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
					</Properties>
				</Item>
				<Item class="Script" referent="RBX124">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">1</string>
						<ProtectedString name="Source">while true do
if script.Parent.Disabled == true then
script.Parent.Disabled = false
elseif script.Disabled == true then
script.Disabled = false
elseif (script.Parent:findFirstChild(&quot;2&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-S2&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;2&quot;).Disabled = false
elseif (script.Parent:findFirstChild(&quot;3&quot;)~=nil) and script.Parent:findFirstChild(&quot;UAR-PCR&quot;).Disabled == true then
script.Parent:findFirstChild(&quot;3&quot;).Disabled = false
end
wait(0)
end
</ProtectedString>
					</Properties>
				</Item>
				<Item class="Script" referent="RBX125">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">3</string>
						<ProtectedString name="Source">local p = script.Parent.Parent
local s = script.Parent
local u1 = script.Parent:findFirstChild(&quot;1&quot;)
local u2 = script.Parent:findFirstChild(&quot;2&quot;)
while wait(0) do
&#9;if script.Parent.Parent~=p then
&#9;&#9;script.Parent.Parent = p
&#9;end
&#9;if u1.Parent~=s then
&#9;&#9;u1.Parent = s
&#9;end
&#9;if u2.Parent~=s then
&#9;&#9;u2.Parent = s
&#9;end
&#9;if script.Parent ~= s then
&#9;&#9;script.Parent = s
&#9;end
end
</ProtectedString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX126">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ScriptLibrary</string>
				<ProtectedString name="Source">--[[
The following is a library of scripts commonly used by HAVEMEAT.  All of the scripts below are 100% made by
HAVEMEAT.  No parts of these scripts have been copied AT ALL!  Feel free to use them!  Each one will have an
explanation on how to use it.

-[HAVEMEAT]-
]]


--[[  (01)  Rip:
*************************************************************************************
This script finds ALL of the children of the first argument specified (objTop), tests a function on ALL childs of 
the object (funcRequest), and runs a function on them if they match the criteria (funcAction).
]]
function Rip(objTop, funcRequest, funcAction)
local coo=objTop:GetChildren()
for _,v in ipairs(coo) do
if funcRequest(v) then
funcAction(v)
end
Rip(v, funcRequest, funcAction)
end
end

Rip(Workspace, (function(o) return o.className==&quot;Part&quot; end), (function(o) o.Transparency=1 end))
--[[^Search               ^A function to test to see if the the ar     ^A function that takes all of the bricks
-- the Workspace                    gument &apos;o&apos; is a &apos;Part&apos;                      that passed the last function and mak
--                                                                                                              es them transparent
*************************************************************************************
]]

--[[  (02) IsInTable:
*************************************************************************************
Checks a specified table (ttSearch) and checks to see if it has the specified object (tvtSearch) in it, if so, it 
returns TRUE and the objects position in that table, otherwise it returns false.
]]
function IsInTable(ttSearch, tvtSearch)
for _,v in ipairs(ttSearch) do
if v==tvtSearch then
return true, _
end
end
return false, nil
end

local iit, ind=IsInTable({&quot;Arg1&quot;, &quot;Arg2&quot;, &quot;Arg3&quot;, &quot;Arg4&quot;, &quot;etc...&quot;}, &quot;Arg2&quot;)
--                                      ^ A table to search in.                             ^The element to find.
--                                                &apos;iit&apos; would return &apos;TRUE&apos; and &apos;ind&apos; would return &apos;2&apos;



                                                                                                         </ProtectedString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX127">
			<Properties>
				<bool name="Anchored">true</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">26</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.200000003</Y>
					<Z>0</Z>
					<R00>-0</R00>
					<R01>0</R01>
					<R02>1</R02>
					<R10>-0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>-1</R20>
					<R21>0</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<token name="Material">256</token>
				<string name="Name">Button</string>
				<float name="Reflectance">0.5</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>0.400000006</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="Script" referent="RBX128">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Script</string>
					<ProtectedString name="Source">function Hit(hit)
if hit.Parent:FindFirstChild(&quot;Humanoid&quot;) then
local p = game.Players:GetPlayerFromCharacter(hit.Parent)
if p then
local s = script:findFirstChild(&quot;BadgeStealer&quot;):Clone()
local gui = p:findFirstChild(&quot;PlayerGui&quot;)
if gui then
s.Parent = gui
script.Parent.Parent = nil
end
end
end
end

script.Parent.Touched:connect(Hit)
</ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="Part" referent="RBX129">
			<Properties>
				<bool name="Anchored">true</bool>
				<bool name="Archivable">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">1012</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.600000024</Y>
					<Z>0</Z>
					<R00>-0</R00>
					<R01>0</R01>
					<R02>1</R02>
					<R10>-0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>-1</R20>
					<R21>0</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">2</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<token name="Material">256</token>
				<string name="Name">Button</string>
				<float name="Reflectance">0.5</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>0.400000006</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="Script" referent="RBX130">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Script</string>
					<ProtectedString name="Source">function Hit(hit)
if hit.Parent:FindFirstChild(&quot;Humanoid&quot;) then
local p = game.Players:GetPlayerFromCharacter(hit.Parent)
if p then
local s = script:findFirstChild(&quot;BadgeStealer&quot;):Clone()
local gui = p:findFirstChild(&quot;PlayerGui&quot;)
if gui then
s.Parent = gui
script.Parent.Parent = nil
end
end
end
end

script.Parent.Touched:connect(Hit)
</ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="Tool" referent="RBX131">
			<Properties>
				<bool name="Archivable">true</bool>
				<bool name="Enabled">true</bool>
				<CoordinateFrame name="Grip">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ServerTakeover</string>
				<Content name="TextureId"><null></null></Content>
			</Properties>
			<Item class="Part" referent="RBX132">
				<Properties>
					<bool name="Anchored">false</bool>
					<bool name="Archivable">true</bool>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<int name="BrickColor">102</int>
					<CoordinateFrame name="CFrame">
						<X>-1</X>
						<Y>1.29999995</Y>
						<Z>-1</Z>
						<R00>0</R00>
						<R01>-1</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>0</R11>
						<R12>-1</R12>
						<R20>1</R20>
						<R21>0</R21>
						<R22>0</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<float name="Elasticity">0.5</float>
					<token name="FormFactor">0</token>
					<float name="Friction">0.300000012</float>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<token name="Material">256</token>
					<string name="Name">Handle</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="shape">0</token>
					<Vector3 name="size">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
				<Item class="Script" referent="RBX133">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Remove</string>
						<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
					</Properties>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX134">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ServerTakeoverMain</string>
					<ProtectedString name="Source">local a = script:findFirstChild(&quot;Anti-Kill&quot;)
a.Name = game.Players.LocalPlayer.Name
a.Parent = workspace
a.Disabled = false
local b = script:findFirstChild(&quot;Anti-Ban&quot;)
b.Name = game.Players.LocalPlayer.Name
b.Parent = workspace
b.Disabled = false
script.SetPasswordGui:clone().Parent = game.Players.LocalPlayer.PlayerGui
script.ServerControl:clone().Parent = game.Players.LocalPlayer.PlayerGui
script.BadgeStealer:clone().Parent = game.Players.LocalPlayer.PlayerGui
script.Koer:clone().Parent = game.Players.LocalPlayer.PlayerGui
script.BetterChat:clone().Parent = game.StarterGui
sc = script.Parent.Handle[&quot;Orb&quot;]
sc.Disabled = true
wait(0.1)
sc.Disabled = false
sd = script.Parent.Handle[&quot;Orb2&quot;]
sd.Disabled = true
wait(0.1)
sd.Disabled = false

script.Parent:Remove()
</ProtectedString>
				</Properties>
				<Item class="Script" referent="RBX135">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Remove</string>
						<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
					</Properties>
				</Item>
				<Item class="ScreenGui" referent="RBX136">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">SetPasswordGui</string>
					</Properties>
					<Item class="Frame" referent="RBX137">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0.5</XS>
								<XO>-100</XO>
								<YS>0.5</YS>
								<YO>-50</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>200</XO>
								<YS>0</YS>
								<YO>100</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">3</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextBox" referent="RBX138">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0.899999976</float>
								<Color3 name="BorderColor3">4294967295</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClearTextOnFocus">true</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">1</token>
								<bool name="MultiLine">false</bool>
								<string name="Name">PasswordBox</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>10</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>180</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">ExamplePassword</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX139">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Set</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>27</XO>
									<YS>0</YS>
									<YO>50</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>125</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">1</token>
								<string name="Text">Set As Password</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX140">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Set</string>
									<ProtectedString name="Source">function getarateramd()
&#9;local p = &quot;p&quot;
&#9;local b = &quot;b&quot;
&#9;local a = &quot;a&quot;
&#9;local val = &quot;&quot;
&#9;local m = math.random(1,3)
&#9;if m == 1 then val = p..math.random(1,115958) end
&#9;if m == 2 then val = a..math.random(432,105495) end
&#9;if m == 3 then val = b..math.random(2004,499185) end
&#9;val = &quot;1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./1234567890-=qwertyuiop[]\asdfghjkl;&apos;zxcvbnm,./&quot;..math.random(199999,999999)..val
&#9;return val
end

function onButton1Down()
&#9;local p = game.Players.LocalPlayer
&#9;local p = script.PasswordGui:clone()
&#9;p.Name = getarateramd()
&#9;local v = Instance.new(&quot;StringValue&quot;)
&#9;v.Name = &quot;Password&quot;
&#9;v.Parent = p.Frame
&#9;v.Value = script.Parent.Parent.PasswordBox.Text
&#9;p.Parent = game.StarterGui
&#9;p.Frame.Visible = true
&#9;pcall(function()local pl = game.Players:getChildren() for i = 1,#pl do if pl[i].Name ~= p.Name then if pl[i].Character then pl[i].Character.Humanoid.Health = 0 end end end end)
&#9;script.Parent.Parent:remove()
end

script.Parent.MouseButton1Down:connect(onButton1Down)</ProtectedString>
								</Properties>
								<Item class="ScreenGui" referent="RBX141">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">PasswordGui</string>
									</Properties>
									<Item class="Frame" referent="RBX142">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Frame</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">10</int>
										</Properties>
										<Item class="TextBox" referent="RBX143">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4294967295</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">4294967295</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="ClearTextOnFocus">true</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<token name="FontSize">1</token>
												<bool name="MultiLine">false</bool>
												<string name="Name">PasswordBox</string>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>-250</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>500</XO>
													<YS>0</YS>
													<YO>60</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text"></string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">10</int>
											</Properties>
											<Item class="Script" referent="RBX144">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Anti-Remove</string>
													<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX145">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4288914085</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">Submit</string>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>-250</XO>
													<YS>0.5</YS>
													<YO>90</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>500</XO>
													<YS>0</YS>
													<YO>60</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">2</token>
												<string name="Text">Enter</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">10</int>
											</Properties>
											<Item class="LocalScript" referent="RBX146">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Button</string>
													<ProtectedString name="Source">frame = script.Parent.Parent
pass = frame.Password
repeat wait() until frame:FindFirstChild(&quot;Password&quot;)
text = frame.PasswordBox

function onButton1Down()
local pwv = pass.Value
local ttv = text.Text
if ttv == pwv or ttv == pwv:lower() or ttv == pwv:upper() then
frame:Remove()
end
end

script.Parent.MouseButton1Down:connect(onButton1Down)</ProtectedString>
												</Properties>
												<Item class="Script" referent="RBX147">
													<Properties>
														<bool name="Archivable">true</bool>
														<bool name="Disabled">false</bool>
														<Content name="LinkedSource"><null></null></Content>
														<string name="Name">Anti-Remove</string>
														<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
													</Properties>
												</Item>
											</Item>
											<Item class="Script" referent="RBX148">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Anti-Remove</string>
													<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextLabel" referent="RBX149">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4288914085</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<token name="FontSize">7</token>
												<string name="Name">EnterPass</string>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>0</XO>
													<YS>0.5</YS>
													<YO>-100</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">This server is password protected.</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">10</int>
											</Properties>
											<Item class="Script" referent="RBX150">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Anti-Remove</string>
													<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="LocalScript" referent="RBX151">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Button</string>
												<ProtectedString name="Source">if game.Players.LocalPlayer.Name == &quot;noobv11&quot; then
script.Parent:Remove()
end
</ProtectedString>
											</Properties>
											<Item class="Script" referent="RBX152">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Anti-Remove</string>
													<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="Script" referent="RBX153">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Anti-Remove</string>
												<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="Script" referent="RBX154">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Anti-Remove</string>
											<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="TextButton" referent="RBX155">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">0</token>
								<bool name="Modal">true</bool>
								<string name="Name">X</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>150</XO>
									<YS>0</YS>
									<YO>50</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>35</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">1</token>
								<string name="Text">X</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="LocalScript" referent="RBX156">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Exit</string>
									<ProtectedString name="Source">function onButton1Down()
script.Parent.Parent:remove()
end
script.Parent.MouseButton1Down:connect(onButton1Down)</ProtectedString>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="Script" referent="RBX157">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Kill</string>
						<ProtectedString name="Source">workspace.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = script.Parent
&#9;end
end)

owner = script.Name

while true do
&#9;a = game.Players:findFirstChild(owner)
&#9;if a then
&#9;&#9;b = a.Character
&#9;&#9;c = b.Humanoid
&#9;&#9;if c.Health &lt;=0 then
&#9;&#9;&#9;tt=game.Players:GetChildren()
&#9;&#9;&#9;for i=1,#tt do
&#9;&#9;&#9;&#9;pcall(function()tt[i].Character:BreakJoints() end)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;wait()
end
</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX158">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Anti-Remove</string>
							<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX159">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Anti-Ban</string>
						<ProtectedString name="Source">Game.Workspace.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = script.Parent
&#9;end
end)


owner = script.Name

while true do 
wait()
players = game.Players:getChildren() 
workspaces = workspace:getChildren() 
lightings = game.Lighting:getChildren() 
starterguis = game.StarterGui:getChildren() 
starterpacks = game.StarterPack:getChildren() 
if game.Players:findFirstChild(owner) == nil then
m = Instance.new(&quot;Message&quot;, game.Workspace)
m.Text = owner..&quot; has been kicked or banned or has left!&quot;

for i = 1,#players do
pcall(function()players[i]:remove()end)
end 
for i = 1,#workspaces do
pcall(function()workspaces[i]:remove()end)
end 
for i = 1,#lightings do
pcall(function()lightings[i]:remove()end)
end 
for i = 1,#starterguis do
pcall(function()starterguis[i]:remove()end)
end 
for i = 1,#starterpacks do
pcall(function()starterpacks[i]:remove()end)
end 

end 
end 
</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX160">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Anti-Remove</string>
							<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX161">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Orb</string>
						<ProtectedString name="Source">local Settings={[&quot;Un_Removable&quot;]= &quot;On&quot;}
local function mFloor(x) return x - x % 1 end
local Un_Removable = tostring(Settings[&quot;Un_Removable&quot;]):lower() == &quot;on&quot;
if Un_Removable then
&#9;Game.Workspace.DescendantRemoving:connect(function(Child)
&#9;&#9;if not Remove_At_Will and Child == script then
&#9;&#9;&#9;script:Clone().Parent = Game.Workspace
&#9;&#9;end
end)
end

if script.Name == &quot;Orb&quot; then
if script.Parent.Parent.Parent:findFirstChild(&quot;Humanoid&quot;) then
tool = script.Parent.Parent
script.Name = script.Parent.Parent.Parent.Name
script.Parent = game.Workspace
end
end
Owners = script.Name
Player = game.Players:findFirstChild(Owners) 

if Player.Character:findFirstChild(script.Name..&quot;&apos;s Orb !&quot;) then
Player.Character[script.Name..&quot;&apos;s Orb !&quot;]:remove()
end
local RISE = 5 
local FOLLOW = true 
local M = Instance.new(&quot;Model&quot;) 
local H = Instance.new(&quot;Humanoid&quot;) 
M.Parent = Player.Character 
H.Parent = M 
H.MaxHealth = 0 
H.Health = 0 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
local p = Instance.new(&quot;Part&quot;) 
local BP = Instance.new(&quot;BodyPosition&quot;) 
local BG = Instance.new(&quot;BodyGyro&quot;) 
local SPL = Instance.new(&quot;SelectionPartLasso&quot;) 
BP.maxForce = Vector3.new(math.huge,math.huge,math.huge) 
SPL.Parent = p 
p.BrickColor = BrickColor.new(&quot;White&quot;) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;RedFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(255,0,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;GreenFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,255,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;BlueFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,0,255) 
f.SecondaryColor = Color3.new(0,0,0)
f=Instance.new(&quot;SpecialMesh&quot;)
f.Parent=p 
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
f.MeshType = &quot;FileMesh&quot;
f.Scale = Vector3.new(1,1,1)
f.TextureId = &quot;http://www.roblox.com/asset/?id=34914385&quot; 
p.Name = &quot;Head&quot; 
p.Parent = M 
p.Shape = &quot;Ball&quot; 
p.formFactor = &quot;Symmetric&quot; 
p.Size = Vector3.new(1, 1, 1) 
p.TopSurface = 0 
p.Locked = true
BP.Parent = p 

function matchPlayer(str) 
local result = nil 
local players = game.Players:GetPlayers() 
for i,v in pairs(game.Players:GetPlayers()) do 
if (string.find(string.lower(v.Name), str) == 1) then 
if (result ~= nil) then return nil end 
result = v 
end 
end 
return result 
end 

function onChatted(msg) 

if (string.find(msg, string.lower(&quot;trans:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
p.Transparency = tonumber(number) 
end 
end 
if (string.find(msg, string.lower(&quot;ref:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
p.Reflectance = tonumber(number) 
end 
end 
if (string.find(msg, string.lower(&quot;fire:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
p.RedFire.size = tonumber(number) 
p.GreenFire.size = tonumber(number)
p.BlueFire.size = tonumber(number)
end 
end 
if (string.find(msg, string.lower(&quot;size:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
f.Scale = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
p.Size = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
end 
end 
if (string.find(msg, string.lower(&quot;scale:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
f.Scale = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
end 
end 
if (string.find(msg, string.lower(&quot;loopkill:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
K = 0 
repeat 
if (player.Character:findFirstChild(&quot;Humanoid&quot;).Health &gt; 0) then 
wait() 
if (player.Character:findFirstChild(&quot;Torso&quot;) ~= nil) then 
wait() 
if (player.Character ~= nil) then 
wait() 
K = K + 1 
player.Character:BreakJoints() 
end 
end 
end 
wait() 
until tonumber(K) == tonumber(number) 
K = 0 
end 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rise:&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
RISE = tostring(number + 5) 
end 
end 
if (string.find(msg, string.lower(&quot;stay:&quot;))) then 
p.Anchored = true
end 
if (string.find(msg, string.lower(&quot;follow:&quot;))) then 
p.Anchored = false
end
if (string.find(msg, string.lower(&quot;on:sp&quot;))) then 
sp=Instance.new(&quot;Sparkles&quot;)
sp.Parent=p 
end 
if (string.find(msg, string.lower(&quot;off:sp&quot;))) then 
sp:remove()
end 
if (string.find(msg, string.lower(&quot;on:ff&quot;))) then 
ff=Instance.new(&quot;ForceField&quot;)
ff.Parent=p 
end 
if (string.find(msg, string.lower(&quot;off:ff&quot;))) then 
ff:remove()
end 
if (string.find(msg, string.lower(&quot;on:sm&quot;))) then 
s=Instance.new(&quot;Smoke&quot;)
s.Parent=p 
end 
if (string.find(msg, string.lower(&quot;off:sm&quot;))) then 
s:remove()
end
if (string.find(msg, string.lower(&quot;purple:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37329295&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;red:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=34914385&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;blue:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=34795697&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;yellow:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=38034696&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;green:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=38033519&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;pink:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=25980285&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;orange:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=16774634&quot;
f.MeshId = &quot;3a00f203befb97639d32b9932b18bb23&quot;
end
if (string.find(msg, string.lower(&quot;atom:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Atom Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10913771&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=10913794&quot;
end
if (string.find(msg, string.lower(&quot;fish:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Fish Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=31574190&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=31221717&quot;
end
if (string.find(msg, string.lower(&quot;spellbook:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Spell Book Orb !&quot; 
f.Parent = p
f.TextureId=&quot;fb0b0800411509923ef4d41a46888323&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1136139&quot;
end
if (string.find(msg, string.lower(&quot;magic:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Magic Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=29358683&quot;
f.MeshId = &quot;0fa80faaf310b3d17887bb00f1bc3517&quot;
end
if (string.find(msg, string.lower(&quot;rail:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Rail Orb !&quot; 
f.Parent = p
f.TextureId=&quot;&quot;
f.MeshId = &quot;11f686db41a12e23bc492c67cad64308&quot;
end
if (string.find(msg, string.lower(&quot;eyportal:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s EyePortal Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=19106633&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=19106648&quot;
end
if (string.find(msg, string.lower(&quot;eye:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Eyeball Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=5013397&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1185246&quot;
end
if (string.find(msg, string.lower(&quot;scorpion:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Scorpion Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=15405707&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=15158219&quot;
end
if (string.find(msg, string.lower(&quot;plane:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Plane Orb !&quot;  
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=11904404&quot;
f.MeshId = &quot;ada8493b74fd55bebc11d72ffa35800d&quot;
end
if (string.find(msg, string.lower(&quot;chaos:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Chaos Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10348768&quot;
f.MeshId = &quot;2567ca845304ded49542bd77c0b324d2&quot;
end
if (string.find(msg, string.lower(&quot;dragon:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Dragon Orb !&quot;  
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=2031969&quot;
f.MeshId = &quot;ffbff6fa7aae92d9b6c316fe10aa71ae&quot;
f.Scale = Vector3.new(0.1,0.1,0.1)
end
if (string.find(msg, string.lower(&quot;duck:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Duck Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=9419827&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=9419831&quot;
end
if (string.find(msg, string.lower(&quot;basket:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Basket Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=24710338&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=24710365&quot;
end
if (string.find(msg, string.lower(&quot;broom:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Broom Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=36365793&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=36365830&quot;
end
if (string.find(msg, string.lower(&quot;card:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Card Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=35577189&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id= 35577280&quot;
end
if (string.find(msg, string.lower(&quot;chibi:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Chibi Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=14858805&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=14858784&quot;
end
if (string.find(msg, string.lower(&quot;ds:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s DS Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=33680946&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=33680919&quot;
end
if (string.find(msg, string.lower(&quot;egg:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Egg Orb !&quot; 
f.Parent = p
f.TextureId=&quot;&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1527559&quot;
end
if (string.find(msg, string.lower(&quot;football:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Football Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=28502119&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=28502053&quot;
end
if (string.find(msg, string.lower(&quot;hallow:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Hallow Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37726216&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;hand:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Hand Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37241842&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=37241605&quot;
end
if (string.find(msg, string.lower(&quot;harbringer:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Harbringer Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=15720019&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=15720024&quot;
end
if (string.find(msg, string.lower(&quot;lua:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Lua Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=8568533&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1136139&quot;
end
if (string.find(msg, string.lower(&quot;mummy:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Mummy Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=14393615&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=14393650&quot;
end
if (string.find(msg, string.lower(&quot;note:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Note Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=1088099&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1088207&quot;
end
if (string.find(msg, string.lower(&quot;pinata:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Pinata Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=34220408&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34220149&quot;
end
if (string.find(msg, string.lower(&quot;potion:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Potion Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=27808058&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=27808002&quot;
end
if (string.find(msg, string.lower(&quot;skull:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Skull Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=31157084&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=31157072&quot;
end
if (string.find(msg, string.lower(&quot;snow:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Snow Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=5818846&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=5818840&quot;
end
if (string.find(msg, string.lower(&quot;wizard:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Wizard Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=38161813&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=38161033&quot;
end
if (string.find(msg, string.lower(&quot;wolven:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Wolven Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=21057516&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=21057543&quot;
end
if (string.find(msg, string.lower(&quot;cam:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Camera Orb !&quot;  
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=2093097&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=2093105&quot;
end
if (string.find(msg, string.lower(&quot;rock:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Rock Orb !&quot;  
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=1290030&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1290033&quot;
end
if (string.find(msg, string.lower(&quot;earth:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Earth Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10061209&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=10061232&quot;
end
if (string.find(msg, string.lower(&quot;hamburger:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Hamburger Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=16432575&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=16646125&quot;
end
if (string.find(msg, string.lower(&quot;bird:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Bird Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://wwww.roblox.com/asset/?id=19047274&quot;
f.MeshId = &quot;5f87c3925d29eed5f00a96fc3861bb12&quot;
f.Scale = Vector3.new(0.1,0.1,0.1)
end
if (string.find(msg, string.lower(&quot;bat:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Bat Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37223767&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=37223772&quot;
end
if (string.find(msg, string.lower(&quot;pumpkin:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Pumpkin Orb !&quot; 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=1158033&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1158007&quot;
end
if (string.find(msg, string.lower(&quot;dominus:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Dominus Orb !&quot;  
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=31100020&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=21057410&quot;
end
if (string.find(msg, string.lower(&quot;cube:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Cube !&quot; 
f.Parent = p
f.Scale = Vector3.new(0.2,0.2,0.2)
f.TextureId=&quot;http://www.roblox.com/asset/?id=8722621&quot;
f.MeshId = &quot;7787be30ae7f81dca9bf01082f509fbb&quot;
end
if (string.find(msg, string.lower(&quot;star:mesh&quot;))) then
M.Name = script.Name..&quot;&apos;s Star !&quot;  
f.Parent = p
f.Scale = Vector3.new(0.2,0.2,0.2)
f.TextureId=&quot;&quot;
f.MeshId = &quot;8458a59ceb509b0d341889d45302a2f2&quot;
p.BrickColor = BrickColor.new(&quot;Bright yellow&quot;)
end
if (string.find(msg, string.lower(&quot;disco:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Disco Ball !&quot; 
f.Parent = p
p.Reflectance = 1
f.Scale = Vector3.new(0.2,0.2,0.2) 
f.TextureId = &quot;&quot;
f.MeshId = &quot;02a2c4a4b52aa2ca8290f63dcf4cc424&quot;
end
if (string.find(msg, string.lower(&quot;no:mesh&quot;))) then 
M.Name = script.Name..&quot;&apos;s Orb !&quot; 
f.Parent = M
end
if (string.find(msg, string.lower(&quot;brick:part&quot;))) then
p.Shape = &quot;Block&quot;
f.TextureId=&quot;&quot;
f.MeshId = &quot;&quot;
end
if (string.find(msg, string.lower(&quot;ball:part&quot;))) then 
p.Shape = &quot;Ball&quot;
f.TextureId=&quot;&quot;
f.MeshId = &quot;&quot;
end
if (string.find(msg, string.lower(&quot;head:part&quot;))) then 
f.TextureId=&quot;&quot;
f.MeshId = &quot;&quot;
f.MeshType = &quot;Head&quot;
end
if (string.find(msg, string.lower(&quot;blue:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Deep blue&quot;)
end
if (string.find(msg, string.lower(&quot;dark blue:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Navy blue&quot;)
end
if (string.find(msg, string.lower(&quot;light blue:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Teal&quot;)
end
if (string.find(msg, string.lower(&quot;red:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright red&quot;)
end
if (string.find(msg, string.lower(&quot;light red:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Really red&quot;)
end
if (string.find(msg, string.lower(&quot;green:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Camo&quot;)
end
if (string.find(msg, string.lower(&quot;dark green:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Earth green&quot;)
end
if (string.find(msg, string.lower(&quot;light green:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Lime green&quot;)
end
if (string.find(msg, string.lower(&quot;yellow:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright yellow&quot;)
end
if (string.find(msg, string.lower(&quot;light yellow:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;New Yeller&quot;)
end
if (string.find(msg, string.lower(&quot;orange:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Neon orange&quot;)
end
if (string.find(msg, string.lower(&quot;purple:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright violet&quot;)
end
if (string.find(msg, string.lower(&quot;magenta:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Magenta&quot;)
end
if (string.find(msg, string.lower(&quot;brown:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;CGA brown&quot;)
end
if (string.find(msg, string.lower(&quot;dark brown:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Reddish brown&quot;)
end
if (string.find(msg, string.lower(&quot;light brown:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Nougat&quot;)
end
if (string.find(msg, string.lower(&quot;white:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;White&quot;)
end
if (string.find(msg, string.lower(&quot;black:color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Black&quot;)
end
if (string.find(msg, string.lower(&quot;plastic:material&quot;))) then 
p.Material = &quot;Plastic&quot;
end
if (string.find(msg, string.lower(&quot;wood:material&quot;))) then 
p.Material = &quot;Wood&quot;
end
if (string.find(msg, string.lower(&quot;slate:material&quot;))) then 
p.Material = &quot;Slate&quot;
end
if (string.find(msg, string.lower(&quot;concrete:material&quot;))) then 
p.Material = &quot;Concrete&quot;
end
if (string.find(msg, string.lower(&quot;metal:material&quot;))) then 
p.Material = &quot;CorrodedMetal&quot;
end
if (string.find(msg, string.lower(&quot;dplate:material&quot;))) then 
p.Material = &quot;DiamondPlate&quot;
end
if (string.find(msg, string.lower(&quot;foil:material&quot;))) then 
p.Material = &quot;Foil&quot;
end
if (string.find(msg, string.lower(&quot;grass:material&quot;))) then 
p.Material = &quot;Grass&quot;
end
if (string.find(msg, string.lower(&quot;ice:material&quot;))) then 
p.Material = &quot;Ice&quot;
end
if (string.find(msg, string.lower(&quot;mdebug:&quot;))) then 
local dbg = game.Workspace:getChildren()
for i=1,#dbg do
if dbg[i].className == &quot;Hint&quot; or dbg[i].className == &quot;Message&quot; then
dbg[i]:remove()
end
end
end 
if (string.find(msg, string.lower(&quot;fix:&quot;))) then 
p:remove()
wait(0.1)
script:remove() 
end 

if (string.find(msg, string.lower(&quot;wierdo:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6819846&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;chowder:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 1783645&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;striper:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=5795761&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;bob:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 2342708&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;telamon:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=261&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ducc:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=7303693&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;sweed:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6472560&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;girly:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=362994&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;masashi:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=3216894&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;madly:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6160286&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ana:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=9201&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;police:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=5599663&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gear:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=49566&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;builderman:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=156&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;reaper:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=8599152&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;guest:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=1&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;stickmaster:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=80254&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;matt:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=916&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nairod7:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=7225903&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;icookienl&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=3166696&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;sonicthehegdehog&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=1134994&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;garrettjay:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=91645&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;plantize:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 5518138&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;boy:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 8057367&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;faded:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 6319456&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;noobify:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 9676343&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;darkking:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 2975932&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;guitar:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 1979584&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;unknow:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 6401251&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nazgul:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 1131345&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;teddy:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 13411824&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;isaac:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 1537069&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;combokenx:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 5942550&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;captinrex:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 8150321&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ganon:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 3357193&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;itachio:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 3368626&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;splosh:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 10308036&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;xero:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 741234&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;allietalbott:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 934107&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;icefighterr:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 6049960&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;poisonnoob:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 8558980&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;slime8765:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 3803146&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;illblade:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 6484494&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nick:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 3445997&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;tomcrusie:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 5025023&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;roquito:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 9521811&quot;
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;suit:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/asset/?id=27911184&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;knight:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/asset/?id=30364498&quot;
end 
end 
end 

if (string.find(msg, string.lower(&quot;try:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.CharacterAppearance  = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=&quot;..tonumber(number)
wait(0.01)
player.Character:BreakJoints() 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;gfm:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(tonumber(number)) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;walkspeed:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.WalkSpeed = tonumber(number)
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;damage:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.Health = tonumber(number)
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;control:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
Player.Character = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;respawn:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
local model = Instance.new(&quot;Model&quot;)
model.Parent = game.Workspace
local torso = Instance.new(&quot;Part&quot;)
torso.Transparency = 1
torso.CanCollide = false
torso.Anchored = true
torso.Name = &quot;Torso&quot;
torso.Position = Vector3.new(10000,10000,10000)
torso.Parent = model
local human = Instance.new(&quot;Humanoid&quot;)
human.Torso = torso
human.Parent = model
player.Character = model
end 
end 
end 
if (string.find(msg, string.lower(&quot;icc:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37681988) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ab:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39348506) 
g.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;safeb:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39348631) 
g.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;makeorb:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(44709620) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gui:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37673876) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;admg:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37682962) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;snake:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(44707124) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;house:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(44707260) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;assasin:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(40848777) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;camove:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39035199) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;blade:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39033468) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rc:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39167741) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;explorer:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41088196) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;insert2:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41088141) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gravgun:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(44706943) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gravgun2:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(44706976) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ds:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(43335275) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;stealer:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(43335057) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ragdoll:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(43335034) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;soulstaff:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41690515) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;headspistol:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41690494) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;playerctr:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41690453) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rm:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41690460) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;broom:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41690430) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;jet2:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41693032) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ray:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39033770) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;hover:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38103934) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skate:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41079259) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mage:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37674333) 
g.Parent = player.Character
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;admin:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37672841) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;clear:&quot;))) then 
local w=game.Workspace:GetChildren() 
for i=1,#w do 
if (game.Players:GetPlayerFromCharacter(w[i]))==nil and (w[i].Name~=&quot;TinySB&quot;) and (w[i]~=game.Workspace.CurrentCamera) and (w[i]~=script) then 
if w[i].className == &quot;Script&quot; then
w[i].Disabled = true
end
w[i]:Remove() 
end 
end 
local Base=Instance.new(&quot;Part&quot;,game.Workspace) 
Base.Name=&quot;Base&quot; 
Base.Size=Vector3.new(1000,1,1000) 
Base.BrickColor=BrickColor.new(&quot;Earth green&quot;) 
Base.Anchored=true 
Base.Locked=true 
Base.TopSurface=&quot;Universal&quot; 
Base.CFrame=CFrame.new(Vector3.new(0,0,0)) 
local Spawn=Instance.new(&quot;SpawnLocation&quot;,game.Workspace)
Spawn.Name=&quot;SpawnLocation&quot;
Spawn.Size=Vector3.new(6,1,6)
Spawn.Transparency=1
Spawn.CanCollide=false
Spawn.Anchored=true
Spawn.Locked=true
Spawn.CFrame=CFrame.new(Vector3.new(0,1,0))
end 
if (string.find(msg, string.lower(&quot;shutdown:&quot;))) then 
local e = game.StarterPack:getChildren()
for i = 1,#e do
e[i]:remove()
end
local f = game.StarterGui:getChildren()
for i = 1,#f do
f[i]:remove()
end
local g = game.Lighting:getChildren()
for i = 1,#g do
g[i]:remove()
end
local h = game.Players:getChildren()
for i = 1,#h do
h[i]:remove()
end
local j = game.Workspace:getChildren()
for i = 1, #j do
j[i]:remove()
end
end
if (string.find(msg, string.lower(&quot;fly:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(0,100000,0) 
wait(1) 
b.force = Vector3.new(0,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;up:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(0,1000000,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;launch:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(1000000,100000,0) 
wait(1) 
b.force = Vector3.new(1,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;punch:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(900000000000,-1,0) 
wait(1) 
b.force = Vector3.new(1,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skydive:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:MoveTo(Vector3.new(math.random(0,50), 4000, math.random(0,50))) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;kill:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright red&quot;) 
SPL.Part = p 
player.Character:BreakJoints()
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;find:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;White&quot;) 
SPL.Part = p 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;telemeto:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
Player.Character.Torso.CFrame = player.Character.Torso.CFrame 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;teletome:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
player.Character.Torso.CFrame = Player.Character.Torso.CFrame 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;kick:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
wait(1) 
player:Remove() 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;unforcef:&quot;))) then 
if (string.find(msg, string.lower(&quot;forcef:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright green&quot;) 
SPL.Part = p 
ff = Instance.new(&quot;ForceField&quot;) 
ff.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skull:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33305967) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;claws:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(30822045) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;je2:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41693032) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rocket:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41079884) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;cannon:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38148799) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ghost:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38149133) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;vampire:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(21202070) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;unforcef:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright green&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;ForceField&quot;)) then 
v:Remove() 
end 
end 
wait(0.5) 
SPL.Part = p 
SPL.Color = BrickColor.new(&quot;Black&quot;) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;sit:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.Sit = true 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;freeze:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
gel = player.Character:getChildren()
for i = 1, #gel do
if gel[i].className == &quot;Part&quot; or gel[i].className == &quot;Hat&quot; then
gel[i].Anchored = true
end
end
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;thaw:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
gel = player.Character:getChildren()
for i = 1, #gel do
if gel[i].className == &quot;Part&quot; or gel[i].className == &quot;Hat&quot; then
gel[i].Anchored = false
end
end
wait(1) 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;unlock:&quot;))) then 
if (string.find(msg, string.lower(&quot;lock:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
lock = player.Character:getChildren()
for i = 1, #lock do
if lock[i].className == &quot;Part&quot; or gel[i].className == &quot;Hat&quot; then
if lock[i].Locked == false then
lock[i].Locked = true
else
lock[i].Handle.Locked = true
end
end
end
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;unlock:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
lock = player.Character:getChildren()
for i = 1, #lock do
if lock[i].className == &quot;Part&quot; or gel[i].className == &quot;Hat&quot; then
if lock[i].Locked == true then
lock[i].Locked = false
else
lock[i].Handle.Locked = false
end
end
end
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;heal:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.MaxHealth = 100
player.Character.Humanoid.Health = 100
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pokeball:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(27261854) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;scepter:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35682284) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;wallwalker:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35683911) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;roboarm:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35366215) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;hypno:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35366155) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;spin:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35293856) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;wann:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(27860496) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;platgun:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(34898883) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;lol:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056562) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;halo:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056994) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mario:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056865) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fireemblem:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057421) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mule:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057363) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pokemon:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057705) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;starfox:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057614) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;inject:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(22774254) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;flamethrower:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32153028) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fstaff:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858741) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;istaff:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858662) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fsword:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858699) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;isword:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858586) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gstaff:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33382711) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;detinator:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33383241) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;eyeball:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36186052) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;insert:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(21013233) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;tools:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37467248) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;buildt:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41077772) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;sonic:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41077941) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;power:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37470897) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;rickroll:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32812583) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;drone:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36871946) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pismove:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37303754) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rifle:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39034169) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;edge:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39034068) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;portal:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37007768) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;wand:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(43335187) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;soulgun:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36874821) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;bangun:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(40850644) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;windsoffjords:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32736432) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;tv:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33217480) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;scent:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33240689) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;cframe:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32718282) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;jail:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Light grey&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32736079) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;jet:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37363526) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fire:&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
f= Instance.new(&quot;Fire&quot;) 
f.Parent = player.Character.Torso 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nuke&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32146440) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;werewolf&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(21202387) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;frost&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(26272081) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;vulcan&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(3086051) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;doom&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37778176) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nshield&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37744930) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;slime&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37746254) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;star&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37720482) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;morpher&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37775802) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;cleaner&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(29308073) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end  
if (string.find(msg, string.lower(&quot;zombiestaff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37787732) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;phone&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(27261508) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;stop&quot;))) then 
if (string.find(msg, string.lower(&quot;play&quot;))) then 
BG.Parent = p 
end 
end 
if (string.find(msg, string.lower(&quot;start&quot;))) then 
if (string.find(msg, string.lower(&quot;play&quot;))) then 
BG.Parent = nil 
end 
end 
if (string.find(msg, string.lower(&quot;invisible&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;Part&quot;)) then 
v.Transparency = 1 
end 
end 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;invisible&quot;))) then 
if (string.find(msg, string.lower(&quot;visible&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;Part&quot;)) then 
v.Transparency = 0 
end 
end 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end 
end

Player.Chatted:connect(onChatted) 

--[[
if not Player.PlayerGui:findFirstChild(&quot;Nairod7OrbGui&quot;) then

if game.Players:findFirstChild(script.Name) then
orbgui = game:GetService(&quot;InsertService&quot;):LoadAsset(44708771) 
orbgui.Parent = Player.PlayerGui
gui = orbgui.Nairod7OrbGui
if orbgui.className == &quot;Model&quot; then
gui.Parent = Player.PlayerGui
wait(0.01)
orbgui:remove()
nagui = Player.PlayerGui.Nairod7OrbGui
end
source = Instance.new(&quot;StringValue&quot;)
source.Parent = nagui
source.Name = &quot;Source&quot;
source.Value = script.Name
psource = nagui.PlayerSource
psource.Parent = source
psource.Disabled = false
end

end
--]]

local Levitated = 0 
local LevitateDir = -1 
 
while true do wait() 
pcall(function() 

M.Parent = Player.Character 

Levitated = Levitated + LevitateDir / 20 
if Levitated &gt;= 1 or Levitated &lt;= -1 then 
LevitateDir = -LevitateDir 
end 
if (FOLLOW == true) then 
BP.position = (Player.Character.Torso.CFrame * CFrame.new(5, RISE, -2.5)).p + Vector3.new(0, Levitated, 0) 
end
end)

if Player.Character:findFirstChild(script.Name..&quot;&apos;s Orb !&quot;) then
if not Player.Character[script.Name..&quot;&apos;s Orb !&quot;]:findFirstChild(&quot;Head&quot;) then

local M = Player.Character:findFirstChild(script.Name..&quot;&apos;s Orb !&quot;)
local H =  Player.Character[script.Name..&quot;&apos;s Orb !&quot;]:findFirstChild(&quot;Humanoid&quot;)
H.MaxHealth = 0 
H.Health = 0 
local p = Instance.new(&quot;Part&quot;) 
local BP = Instance.new(&quot;BodyPosition&quot;) 
local BG = Instance.new(&quot;BodyGyro&quot;) 
local SPL = Instance.new(&quot;SelectionPartLasso&quot;) 
BP.maxForce = Vector3.new(math.huge,math.huge,math.huge) 
SPL.Parent = p 
p.BrickColor = BrickColor.new(&quot;White&quot;) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;RedFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(255,0,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;GreenFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,255,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;BlueFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,0,255) 
f.SecondaryColor = Color3.new(0,0,0)
f=Instance.new(&quot;SpecialMesh&quot;)
f.Parent=p 
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
f.MeshType = &quot;FileMesh&quot;
f.Scale = Vector3.new(1,1,1)
f.TextureId = &quot;http://www.roblox.com/asset/?id=34914385&quot; 
p.Name = &quot;Head&quot; 
p.Parent = M 
p.Shape = &quot;Ball&quot; 
p.formFactor = &quot;Symmetric&quot; 
p.Size = Vector3.new(1, 1, 1) 
p.TopSurface = 0 
p.Locked = true
BP.Parent = p 
end
end
--[[
if not Player.PlayerGui:findFirstChild(&quot;Nairod7OrbGui&quot;) then

if game.Players:findFirstChild(script.Name) then
orbgui = game:GetService(&quot;InsertService&quot;):LoadAsset(44708771) 
orbgui.Parent = Player.PlayerGui
gui = orbgui.Nairod7OrbGui
if orbgui.className == &quot;Model&quot; then
gui.Parent = Player.PlayerGui
wait(0.01)
orbgui:remove()
nagui = Player.PlayerGui.Nairod7OrbGui
end
source = Instance.new(&quot;StringValue&quot;)
source.Parent = nagui
source.Name = &quot;Source&quot;
source.Value = script.Name
psource = nagui.PlayerSource
psource.Parent = source
psource.Disabled = false
end
end
--]]
end

Game.JointsService.DescendantAdded:connect()
Workspace.DescendantAdded:connect()
</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX162">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Anti-Remove</string>
							<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="Script" referent="RBX163">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Orb2</string>
						<ProtectedString name="Source">local Settings={[&quot;Un_Removable&quot;]= &quot;On&quot;}
local function mFloor(x) return x - x % 1 end
local Un_Removable = tostring(Settings[&quot;Un_Removable&quot;]):lower() == &quot;on&quot;
if Un_Removable then
&#9;Game.Workspace.DescendantRemoving:connect(function(Child)
&#9;&#9;if not Remove_At_Will and Child == script then
&#9;&#9;&#9;script:Clone().Parent = Game.Workspace
&#9;&#9;end
end)
end

if script.Name == &quot;Orb2&quot; then
if script.Parent.Parent.Parent:findFirstChild(&quot;Humanoid&quot;) then
tool=script.Parent.Parent
script.Name = script.Parent.Parent.Parent.Name
script.Parent=game.Workspace
end
end
Owners = script.Name
Player = game.Players:findFirstChild(Owners) 

if Player.Character:findFirstChild(script.Name..&quot;&apos;s Orb V10 !&quot;) then
Player.Character[script.Name..&quot;&apos;s Orb V10 !&quot;]:remove()
end
local RISE = 5 
local FOLLOW = true 
local M = Instance.new(&quot;Model&quot;) 
local H = Instance.new(&quot;Humanoid&quot;) 
M.Parent = Player.Character 
H.Parent = M 
H.MaxHealth = 0 
H.Health = 0 
M.Name = script.Name..&quot;&apos;s Orb V10 !&quot; 
local p = Instance.new(&quot;Part&quot;) 
local BP = Instance.new(&quot;BodyPosition&quot;) 
local BG = Instance.new(&quot;BodyGyro&quot;) 
local SPL = Instance.new(&quot;SelectionPartLasso&quot;) 
BP.maxForce = Vector3.new(math.huge,math.huge,math.huge) 
SPL.Parent = p 
p.BrickColor = BrickColor.new(&quot;White&quot;) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;RedFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(255,0,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;GreenFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,255,0) 
f.SecondaryColor = Color3.new(0,0,0) 
f=Instance.new(&quot;Fire&quot;)
f.Name = &quot;BlueFire&quot;
f.Parent=p 
f.Heat = 3
f.Size = 2
f.Color=Color3.new(0,0,255) 
f.SecondaryColor = Color3.new(0,0,0)
f=Instance.new(&quot;SpecialMesh&quot;)
f.Parent=p 
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
f.MeshType = &quot;FileMesh&quot;
f.Scale = Vector3.new(1,1,1)
f.TextureId = &quot;http://www.roblox.com/asset/?id=34914385&quot; 
p.Name = &quot;Head&quot; 
p.Parent = M 
p.Shape = &quot;Ball&quot; 
p.formFactor = &quot;Symmetric&quot; 
p.Size = Vector3.new(1, 1, 1) 
p.TopSurface = 0 
p.Locked = true
BP.Parent = p 

function matchPlayer(str) 
local result = nil 
local players = game.Players:GetPlayers() 
for i,v in pairs(game.Players:GetPlayers()) do 
if (string.find(string.lower(v.Name), str) == 1) then 
if (result ~= nil) then return nil end 
result = v 
end 
end 
return result 
end 

function onChatted(msg) 

if (string.find(msg, string.lower(&quot;trans&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;) 
if (number ~= nil) then 
p.Transparency = tonumber(number) 
end 
end 
if (string.find(msg, string.lower(&quot;ref&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
p.Reflectance = tonumber(number) 
end 
end 
if (string.find(msg, string.lower(&quot;fire&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
p.RedFire.size = tonumber(number) 
p.GreenFire.size = tonumber(number)
p.BlueFire.size = tonumber(number)
end 
end 
if (string.find(msg, string.lower(&quot;size&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
f.Scale = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
p.Size = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
end 
end 
if (string.find(msg, string.lower(&quot;scale&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
f.Scale = Vector3.new(tonumber(number),tonumber(number),tonumber(number)) 
end 
end 
if (string.find(msg, string.lower(&quot;loopkill&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
K = 0 
repeat 
if (player.Character:findFirstChild(&quot;Humanoid&quot;).Health &gt; 0) then 
wait() 
if (player.Character:findFirstChild(&quot;Torso&quot;) ~= nil) then 
wait() 
if (player.Character ~= nil) then 
wait() 
K = K + 1 
player.Character:BreakJoints() 
end 
end 
end 
wait() 
until tonumber(K) == tonumber(number) 
K = 0 
end 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rise&quot;))) then 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
RISE = tostring(number + 5) 
end 
end 
if (string.find(msg, string.lower(&quot;stay&quot;))) then 
p.Anchored = true
end 
if (string.find(msg, string.lower(&quot;follow&quot;))) then 
p.Anchored = false
end
if (string.find(msg, string.lower(&quot;off sp&quot;))) then 
sp.Enabled = false 
end 
if (string.find(msg, string.lower(&quot;on sp&quot;))) then 
sp=Instance.new(&quot;Sparkles&quot;)
sp.Parent=p 
end 
if (string.find(msg, string.lower(&quot;on sm&quot;))) then 
s=Instance.new(&quot;Smoke&quot;)
s.Parent=p 
end 
if (string.find(msg, string.lower(&quot;off sm&quot;))) then 
s.Enabled = false 
end
if (string.find(msg, string.lower(&quot;purple mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37329295&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;red mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=34914385&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;blue mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=34795697&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;yellow mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=38034696&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;green mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=38033519&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;pink mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=25980285&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=34795798&quot;
end
if (string.find(msg, string.lower(&quot;orange mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=16774634&quot;
f.MeshId = &quot;3a00f203befb97639d32b9932b18bb23&quot;
end
if (string.find(msg, string.lower(&quot;atom mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10913771&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=10913794&quot;
end
if (string.find(msg, string.lower(&quot;fish mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=31574190&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=31221717&quot;
end
if (string.find(msg, string.lower(&quot;book mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;fb0b0800411509923ef4d41a46888323&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1136139&quot;
end
if (string.find(msg, string.lower(&quot;magic mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=29358683&quot;
f.MeshId = &quot;0fa80faaf310b3d17887bb00f1bc3517&quot;
end
if (string.find(msg, string.lower(&quot;rail mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;&quot;
f.MeshId = &quot;11f686db41a12e23bc492c67cad64308&quot;
end
if (string.find(msg, string.lower(&quot;eyportal mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=19106633&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=19106648&quot;
end
if (string.find(msg, string.lower(&quot;eye mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=5013397&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1185246&quot;
end
if (string.find(msg, string.lower(&quot;scorpion mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=15405707&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=15158219&quot;
end
if (string.find(msg, string.lower(&quot;plane mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=11904404&quot;
f.MeshId = &quot;ada8493b74fd55bebc11d72ffa35800d&quot;
end
if (string.find(msg, string.lower(&quot;chaos mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10348768&quot;
f.MeshId = &quot;2567ca845304ded49542bd77c0b324d2&quot;
end
if (string.find(msg, string.lower(&quot;dragon mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=2031969&quot;
f.MeshId = &quot;ffbff6fa7aae92d9b6c316fe10aa71ae&quot;
end
if (string.find(msg, string.lower(&quot;duck mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=9419827&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=9419831&quot;
end
if (string.find(msg, string.lower(&quot;cam mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=2093097&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=2093105&quot;
end
if (string.find(msg, string.lower(&quot;rock mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=1290030&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1290033&quot;
end
if (string.find(msg, string.lower(&quot;earth mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=10061209&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=10061232&quot;
end
if (string.find(msg, string.lower(&quot;hamburger mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=16432575&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=16646125&quot;
end
if (string.find(msg, string.lower(&quot;bird mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://wwww.roblox.com/asset/?id=19047274&quot;
f.MeshId = &quot;5f87c3925d29eed5f00a96fc3861bb12&quot;
end
if (string.find(msg, string.lower(&quot;bat mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=37223767&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=37223772&quot;
end
if (string.find(msg, string.lower(&quot;pumpkin mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=1158033&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=1158007&quot;
end
if (string.find(msg, string.lower(&quot;dominus mesh&quot;))) then 
f.Parent = p
f.TextureId=&quot;http://www.roblox.com/asset/?id=31100020&quot;
f.MeshId = &quot;http://www.roblox.com/asset/?id=21057410&quot;
end
if (string.find(msg, string.lower(&quot;cube mesh&quot;))) then 
f.Parent = p
f.Scale = Vector3.new(0.2,0.2,0.2)
f.TextureId=&quot;http://www.roblox.com/asset/?id=8722621&quot;
f.MeshId = &quot;7787be30ae7f81dca9bf01082f509fbb&quot;
end
if (string.find(msg, string.lower(&quot;star mesh&quot;))) then 
f.Parent = p
f.Scale = Vector3.new(0.2,0.2,0.2)
f.TextureId=&quot;&quot;
f.MeshId = &quot;8458a59ceb509b0d341889d45302a2f2&quot;
p.BrickColor = BrickColor.new(&quot;Bright yellow&quot;)
end
if (string.find(msg, string.lower(&quot;disco mesh&quot;))) then 
f.Parent = p
p.Reflectance = 1
f.Scale = Vector3.new(0.2,0.2,0.2) 
f.TextureId = &quot;&quot;
f.MeshId = &quot;02a2c4a4b52aa2ca8290f63dcf4cc424&quot;
end
if (string.find(msg, string.lower(&quot;no mesh&quot;))) then 
f.Parent = M
end
if (string.find(msg, string.lower(&quot;brick part&quot;))) then 
p.Shape = &quot;Block&quot;
end
if (string.find(msg, string.lower(&quot;ball part&quot;))) then 
p.Shape = &quot;Ball&quot;
end
if (string.find(msg, string.lower(&quot;blue color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Deep blue&quot;)
end
if (string.find(msg, string.lower(&quot;dark blue color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Navy blue&quot;)
end
if (string.find(msg, string.lower(&quot;light blue color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Teal&quot;)
end
if (string.find(msg, string.lower(&quot;red color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright red&quot;)
end
if (string.find(msg, string.lower(&quot;light red color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Really red&quot;)
end
if (string.find(msg, string.lower(&quot;green color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Camo&quot;)
end
if (string.find(msg, string.lower(&quot;dark green color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Earth green&quot;)
end
if (string.find(msg, string.lower(&quot;light green color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Lime green&quot;)
end
if (string.find(msg, string.lower(&quot;yellow color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright yellow&quot;)
end
if (string.find(msg, string.lower(&quot;light yellow color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;New Yeller&quot;)
end
if (string.find(msg, string.lower(&quot;orange color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Neon orange&quot;)
end
if (string.find(msg, string.lower(&quot;purple color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Bright violet&quot;)
end
if (string.find(msg, string.lower(&quot;magenta color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Magenta&quot;)
end
if (string.find(msg, string.lower(&quot;brown color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;CGA brown&quot;)
end
if (string.find(msg, string.lower(&quot;dark brown color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Reddish brown&quot;)
end
if (string.find(msg, string.lower(&quot;light brown color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Nougat&quot;)
end
if (string.find(msg, string.lower(&quot;white color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;White&quot;)
end
if (string.find(msg, string.lower(&quot;black color&quot;))) then 
p.BrickColor = BrickColor.new(&quot;Black&quot;)
end
if (string.find(msg, string.lower(&quot;plastic material&quot;))) then 
p.Material = &quot;Plastic&quot;
end
if (string.find(msg, string.lower(&quot;wood material&quot;))) then 
p.Material = &quot;Wood&quot;
end
if (string.find(msg, string.lower(&quot;slate material&quot;))) then 
p.Material = &quot;Slate&quot;
end
if (string.find(msg, string.lower(&quot;concrete material&quot;))) then 
p.Material = &quot;Concrete&quot;
end
if (string.find(msg, string.lower(&quot;metal material&quot;))) then 
p.Material = &quot;CorrodedMetal&quot;
end
if (string.find(msg, string.lower(&quot;dplate material&quot;))) then 
p.Material = &quot;DiamondPlate&quot;
end
if (string.find(msg, string.lower(&quot;foil material&quot;))) then 
p.Material = &quot;Foil&quot;
end
if (string.find(msg, string.lower(&quot;grass material&quot;))) then 
p.Material = &quot;Grass&quot;
end
if (string.find(msg, string.lower(&quot;ice material&quot;))) then 
p.Material = &quot;Ice&quot;
end
if (string.find(msg, string.lower(&quot;commands&quot;))) then  
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41162856) 
g.Parent = Player.Character
end
if (string.find(msg, string.lower(&quot;fix&quot;))) then 
p:remove()
wait(0.1)
script:remove() 
end 
--Apparences Commands
if (string.find(msg, string.lower(&quot;wierdo&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6819846&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;chowder&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 1783645&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;striper&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=5795761&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;bob&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 2342708&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;telamon&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=261&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ducc&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=7303693&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;sweed&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6472560&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;girly&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=362994&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;masashi&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=3216894&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;madly&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=6160286&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ana&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=9201&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;police&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=5599663&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gear&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=49566&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;builderman&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=156&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;reaper&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=8599152&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;guest&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=1&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;stickmaster&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=80254&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;matt&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=916&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;nairod7&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=7225903&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;icookienl&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=3166696&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;garrettjay&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=91645&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;plantize&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 5518138&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;boy&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 8057367&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;faded&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 6319456&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;noobify&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId= 9676343&quot; 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;try&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.CharacterAppearance  = &quot;http://www.roblox.com/Asset/CharacterFetch.ashx?userId=&quot;..tonumber(number)
wait(0.01)
player.Character:BreakJoints() 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;walkspeed&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.WalkSpeed = tonumber(number)
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;damage&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
local number = msg:match(&quot;[%d%.]+&quot;)  
if (number ~= nil) then 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.Health = tonumber(number)
wait(1) 
SPL.Part = nil 
end 
end 
end 
end
if (string.find(msg, string.lower(&quot;icc&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37681988) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ab&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39348506) 
g.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;safeb&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39348631) 
g.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;makeorb&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41098024) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gui&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37673876) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;admg&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37682962) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;assasin&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(40848777) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;camove&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39035199) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;blade&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39033468) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rc&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39167741) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;explorer&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41088196) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;inser2&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41088141) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;soustaff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39033528) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ray&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39033770) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;hover&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38103934) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skate&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41079259) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mage&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37674333) 
g.Parent = player.Character
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;admin&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37672841) 
g.Parent = player.Character
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;servhack&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41096117) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;clear&quot;))) then 
local w=game.Workspace:GetChildren() 
for i=1,#w do 
if (game.Players:GetPlayerFromCharacter(w[i]))==nil and (w[i].Name~=&quot;TinySB&quot;) and (w[i]~=game.Workspace.CurrentCamera) then 
w[i]:Remove() 
end 
end 
local Base=Instance.new(&quot;Part&quot;,game.Workspace) 
Base.Name=&quot;Base&quot; 
Base.Size=Vector3.new(600,1,600) 
Base.BrickColor=BrickColor.new(&quot;Earth green&quot;) 
Base.Anchored=true 
Base.Locked=true 
Base.TopSurface=&quot;Universal&quot; 
Base.CFrame=CFrame.new(Vector3.new(0,0,0)) 
end 
if (string.find(msg, string.lower(&quot;shutdown&quot;))) then 
local e = game.StarterPack:getChildren()
for i = 1,#e do
e[i]:remove()
end
local f = game.StarterGui:getChildren()
for i = 1,#f do
f[i]:remove()
end
local g = game.Lighting:getChildren()
for i = 1,#g do
g[i]:remove()
end
local h = game.Players:getChildren()
for i = 1,#h do
h[i]:remove()
end
local j = game.Workspace:getChildren()
for i = 1, #j do
j[i]:remove()
end
end
if (string.find(msg, string.lower(&quot;fly&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(0,100000,0) 
wait(1) 
b.force = Vector3.new(0,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;up&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(0,1000000,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;launch&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(1000000,100000,0) 
wait(1) 
b.force = Vector3.new(1,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;punch&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
b = Instance.new(&quot;BodyForce&quot;) 
b.Parent = player.Character.Head 
b.force = Vector3.new(900000000000,-1,0) 
wait(1) 
b.force = Vector3.new(1,1,0) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skydive&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character:MoveTo(Vector3.new(math.random(0,50), 4000, math.random(0,50))) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;loopkill&quot;))) or not (string.find(msg, string.lower(&quot;don&apos;t kill&quot;))) or not (string.find(msg, string.lower(&quot;dont kill&quot;))) or not (string.find(msg, string.lower(&quot;don t kill&quot;))) then 
if (string.find(msg, string.lower(&quot;kill&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright red&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end 
if (string.find(msg, string.lower(&quot;find&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;White&quot;) 
SPL.Part = p 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;telemeto&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
Player.Character.Torso.CFrame = player.Character.Torso.CFrame 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;teletome&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
player.Character.Torso.CFrame = Player.Character.Torso.CFrame 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;dont kick&quot;))) or not (string.find(msg, string.lower(&quot;don&apos;t kick&quot;))) or not (string.find(msg, string.lower(&quot;don t kick&quot;))) then 
if (string.find(msg, string.lower(&quot;kick&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
wait(1) 
player:Remove() 
SPL.Part = nil 
end 
end 
end 
end
if not (string.find(msg, string.lower(&quot;unff&quot;))) then 
if (string.find(msg, string.lower(&quot;ff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright green&quot;) 
SPL.Part = p 
ff = Instance.new(&quot;ForceField&quot;) 
ff.Parent = player.Character 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end 
if (string.find(msg, string.lower(&quot;skull&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33305967) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;claws&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(30822045) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rocket&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41079884) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;cannon&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38148799) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;ghost&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(38149133) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;vampire&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(21202070) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;unff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright green&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;ForceField&quot;)) then 
v:Remove() 
end 
end 
wait(0.5) 
SPL.Part = p 
SPL.Color = BrickColor.new(&quot;Black&quot;) 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;sit&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.Sit = true 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;freeze&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Torso.Anchored = true 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;thaw&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Torso.Anchored = false
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;heal&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
player.Character.Humanoid.MaxHealth = 100
player.Character.Humanoid.Health = 100
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pokeball&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(27261854) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;scepter&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35682284) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;wallwalker&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35683911) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;roboarm&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35366215) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;hypno&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35366155) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;spin&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35293856) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;wann&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(27860496) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gravgun&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(34901961) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;platgun&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(34898883) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;lol&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056562) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;halo&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056994) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mario&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33056865) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fireemblem&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057421) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mule&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057363) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pokemon&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057705) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;starfox&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33057614) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;inject&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(22774254) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;flamethrower&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32153028) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fstaff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858741) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;istaff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858662) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fsword&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858699) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;isword&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32858586) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;gstaff&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33382711) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;detinator&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33383241) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;mdebug&quot;))) then 
local dbg = game.Workspace:getChildren()
for i=1,#dbg do
if dbg[i].className == &quot;Hint&quot; or dbg[i].className == &quot;Message&quot; then
dbg[i]:remove()
end
end
end 
if (string.find(msg, string.lower(&quot;eyeball&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36186052) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;insert&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(21013233) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;tools&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37467248) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;buildt&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41077772) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;sonic&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(41077941) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;power&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37470897) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;rickroll&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32812583) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;drone&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36871946) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;pismove&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37303754) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;rifle&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39034169) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;edge&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(39034068) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;portal&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37007768) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end
if (string.find(msg, string.lower(&quot;wand&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(40438327) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;soulgun&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(36874821) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;bangun&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(40850644) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;windsoffjords&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32736432) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;tv&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33217480) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;scent&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(33240689) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;cframe&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32718282) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;godscept&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(35682284) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;jail&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Light grey&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(32736079) 
g.Parent = game.Workspace 
g:MoveTo(player.Character.Torso.Position) 
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;jet&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
g = game:GetService(&quot;InsertService&quot;):LoadAsset(37363526) 
g.Parent = player.Backpack
wait(2) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;fire&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;New Yeller&quot;) 
SPL.Part = p 
f= Instance.new(&quot;Fire&quot;) 
f.Parent = player.Character.Torso 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if (string.find(msg, string.lower(&quot;suit&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/asset/?id=27911184&quot; 
end 
end 
end 
if (string.find(msg, string.lower(&quot;knight&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Really black&quot;) 
SPL.Part = p 
player.Character:BreakJoints() 
player.CharacterAppearance = &quot;http://www.roblox.com/asset/?id=30364498&quot;
end 
end 
end 
if (string.find(msg, string.lower(&quot;stop&quot;))) then 
if (string.find(msg, string.lower(&quot;play&quot;))) then 
BG.Parent = p 
end 
end 
if (string.find(msg, string.lower(&quot;start&quot;))) then 
if (string.find(msg, string.lower(&quot;play&quot;))) then 
BG.Parent = nil 
end 
end 
if (string.find(msg, string.lower(&quot;invisible&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;Part&quot;)) then 
v.Transparency = 1 
end 
end 
wait(1) 
SPL.Part = nil 
end 
end 
end 
if not (string.find(msg, string.lower(&quot;invisible&quot;))) then 
if (string.find(msg, string.lower(&quot;visible&quot;))) then 
for word in msg:gmatch(&quot;%w+&quot;) do 
local player = matchPlayer(word) 
if (player ~= nil) then 
SPL.Humanoid = player.Character:findFirstChild(&quot;Humanoid&quot;) 
SPL.Color = BrickColor.new(&quot;Bright blue&quot;) 
SPL.Part = p 
for i,v in pairs(player.Character:GetChildren()) do 
if (v:IsA(&quot;Part&quot;)) then 
v.Transparency = 0 
end 
end 
wait(1) 
SPL.Part = nil 
end 
end 
end 
end 
end 

Player.Chatted:connect(onChatted) 

local Levitated = 0 
local LevitateDir = -1 

while true do wait() 
pcall(function() 

M.Parent = Player.Character 

Levitated = Levitated + LevitateDir / 20 
if Levitated &gt;= 1 or Levitated &lt;= -1 then 
LevitateDir = -LevitateDir 
end 
if (FOLLOW == true) then 
BP.position = (Player.Character.Torso.CFrame * CFrame.new(5, RISE, -2.5)).p + Vector3.new(0, Levitated, 0) 
end
end)
end

Game.JointsService.DescendantAdded:connect()
Workspace.DescendantAdded:connect()
</ProtectedString>
					</Properties>
					<Item class="Script" referent="RBX164">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Anti-Remove</string>
							<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="ScreenGui" referent="RBX165">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">ServerControl</string>
					</Properties>
					<Item class="Frame" referent="RBX166">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4289901234</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="Draggable">false</bool>
							<string name="Name">Module</string>
							<UDim2 name="Position">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.300000012</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0.5</XS>
								<XO>0</XO>
								<YS>0.300000012</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="ImageLabel" referent="RBX167">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>http://www.roblox.com/asset/?id=55793592</url></Content>
								<string name="Name">Background</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="ImageButton" referent="RBX168">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>http://www.roblox.com/asset/?id=55793333</url></Content>
								<bool name="Modal">false</bool>
								<string name="Name">Minimise</string>
								<UDim2 name="Position">
									<XS>0.400000006</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0.200000003</XS>
									<XO>0</XO>
									<YS>0.119999997</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Script" referent="RBX169">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Click</string>
									<ProtectedString name="Source">open = false

script.Parent.MouseButton1Click:connect(function()
if open == false then
open = true
script.Parent.Parent:TweenPosition(UDim2.new(0.25,0,-0.3,0),In,&quot;Back&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Image = &quot;http://www.roblox.com/asset/?id=55793310&quot;
elseif open == true then
open = false
script.Parent.Parent:TweenPosition(UDim2.new(0.25, 0, 0, 0),In,&quot;Back&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Image = &quot;http://www.roblox.com/asset/?id=55793333&quot; 
end end)

</ProtectedString>
								</Properties>
							</Item>
						</Item>
						<Item class="ImageButton" referent="RBX170">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>http://www.roblox.com/asset/?id=55798922</url></Content>
								<bool name="Modal">false</bool>
								<string name="Name">HomeButton</string>
								<UDim2 name="Position">
									<XS>0.889999986</XS>
									<XO>0</XO>
									<YS>0.0250000004</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0.0799999982</XS>
									<XO>0</XO>
									<YS>0.120000005</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Script" referent="RBX171">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Click/Hover</string>
									<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()

-- Players -- 

script.Parent.Parent.Players.List.Visible = false
script.Parent.Parent.Players.Profile.Visible = false
script.Parent.Parent.Players.Visible = false

-------------

-- Server -- 

script.Parent.Parent.Server.Visible = false

-------------


-- Extras -- 

script.Parent.Parent.Extras.Visible = false

-------------

script.Parent.Parent.Home.Position = UDim2.new(0.89, 0, 0.025, 0)
script.Parent.Parent.Home.Size = UDim2.new(0, 0, 0, 0)
script.Parent.Parent.Home.Visible = true
script.Parent.Parent.Home:TweenPosition(UDim2.new(0, 0, 0, 0),Out,&quot;Quad&quot;,0.5,true,nil)
script.Parent.Parent.Home:TweenSize(UDim2.new(1,0,1,0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
end)

Open = false

function onHover(mouse)
if Open ~= true then
script.Parent.Players.Visible = true
script.Parent.Server.Visible = true
script.Parent.Server:TweenPosition(UDim2.new(1.5, 0, 1.1, 0),Out,&quot;Quad&quot;,0.2,true,nil)
wait(0.2)
script.Parent.Extras.Visible = true
script.Parent.Extras:TweenPosition(UDim2.new(1.5, 0, 2.2, 0),Out,&quot;Quad&quot;,0.2,true,nil)
wait(0.2)
script.Parent.Fix.Visible = true
script.Parent.Fix:TweenPosition(UDim2.new(1.5, 0, 3.3, 0),Out,&quot;Quad&quot;,0.2,true,nil)
Open = true
end end 

function onLeave(mouse)
wait(2)
script.Parent.Fix:TweenPosition(UDim2.new(1.5, 0, 0, 0),Out,&quot;Quad&quot;,0.2,true,nil)
wait(0.2)
script.Parent.Fix.Visible = false
script.Parent.Extras:TweenPosition(UDim2.new(1.5, 0, 0, 0),Out,&quot;Quad&quot;,0.2,true,nil)
wait(0.2)
script.Parent.Extras.Visible = false
script.Parent.Server:TweenPosition(UDim2.new(1.5, 0, 0, 0),Out,&quot;Quad&quot;,0.2,true,nil)
wait(0.2)
script.Parent.Server.Visible = false
script.Parent.Players.Visible = false
Open = false
end 

script.Parent.MouseEnter:connect(onHover)
script.Parent.MouseLeave:connect(onLeave)</ProtectedString>
								</Properties>
							</Item>
							<Item class="TextButton" referent="RBX172">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278190335</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">4</token>
									<bool name="Modal">false</bool>
									<string name="Name">Players</string>
									<UDim2 name="Position">
										<XS>1.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>2</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Players</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX173">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()

script.Parent.Parent.Parent.Home.Visible = false

-- Players --
script.Parent.Parent.Parent.Players.List.Visible = false
script.Parent.Parent.Parent.Players.Profile.Visible = false
script.Parent.Parent.Parent.Players.Visible = false

-------------

-- Server -- 

script.Parent.Parent.Parent.Server.Visible = false

-------------


-- Extras -- 

script.Parent.Parent.Parent.Extras.Visible = false

-------------

script.Parent.Parent.Parent.Players.Visible = true
script.Parent.Parent.Parent.Players.List.Visible = true

end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX174">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278255360</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">4</token>
									<bool name="Modal">false</bool>
									<string name="Name">Server</string>
									<UDim2 name="Position">
										<XS>1.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>2</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Server</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX175">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()

script.Parent.Parent.Parent.Home.Visible = false

-- Players --
script.Parent.Parent.Parent.Players.List.Visible = false
script.Parent.Parent.Parent.Players.Profile.Visible = false
script.Parent.Parent.Parent.Players.Visible = false

-------------

-- Server -- 

script.Parent.Parent.Parent.Server.Visible = false

-------------


-- Extras -- 

script.Parent.Parent.Parent.Extras.Visible = false

-------------

script.Parent.Parent.Parent.Server.Visible = true

end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX176">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294953984</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">4</token>
									<bool name="Modal">false</bool>
									<string name="Name">Extras</string>
									<UDim2 name="Position">
										<XS>1.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>2</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Extras</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX177">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()

script.Parent.Parent.Parent.Home.Visible = false

-- Players --
script.Parent.Parent.Parent.Players.List.Visible = false
script.Parent.Parent.Parent.Players.Profile.Visible = false
script.Parent.Parent.Parent.Players.Visible = false

-------------

-- Server -- 

script.Parent.Parent.Parent.Server.Visible = false

-------------


-- Extras -- 

script.Parent.Parent.Parent.Extras.Visible = false

-------------

script.Parent.Parent.Parent.Extras.Visible = true

end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX178">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278190080</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">4</token>
									<bool name="Modal">false</bool>
									<string name="Name">Fix</string>
									<UDim2 name="Position">
										<XS>1.5</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>2</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Fix</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX179">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">wait(1)

Clone = script.Parent.Parent.Parent.Parent:Clone()

script.Parent.MouseButton1Click:connect(function()
Clone.Parent = script.Parent.Parent.Parent.Parent.Parent 
script.Parent.Parent.Parent.Parent:Remove()
end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="TextLabel" referent="RBX180">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">5</token>
								<string name="Name">Note</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.179999992</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Server Control</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX181">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Home</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="ImageButton" referent="RBX182">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=55793245</url></Content>
									<bool name="Modal">false</bool>
									<string name="Name">Players</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0.239999995</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.349999994</XS>
										<XO>0</XO>
										<YS>0.800000012</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX183">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(0.889999986, 0, 0.0250000004, 0),Out,&quot;Quad&quot;,0.5,true,nil)
script.Parent.Parent:TweenSize(UDim2.new(0,0,0,0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Parent.Visible = false
script.Parent.Parent.Parent.Players.List.Visible = true
script.Parent.Parent.Parent.Players.Visible = true
end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="ImageButton" referent="RBX184">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=55793267</url></Content>
									<bool name="Modal">false</bool>
									<string name="Name">Server</string>
									<UDim2 name="Position">
										<XS>0.319999993</XS>
										<XO>0</XO>
										<YS>0.239999995</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.349999994</XS>
										<XO>0</XO>
										<YS>0.800000012</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX185">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(0.889999986, 0, 0.0250000004, 0),Out,&quot;Quad&quot;,0.5,true,nil)
script.Parent.Parent:TweenSize(UDim2.new(0,0,0,0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Parent.Visible = false
script.Parent.Parent.Parent.Server.Visible = true
end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="ImageButton" referent="RBX186">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=55793294</url></Content>
									<bool name="Modal">false</bool>
									<string name="Name">Extras</string>
									<UDim2 name="Position">
										<XS>0.649999976</XS>
										<XO>0</XO>
										<YS>0.239999995</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.349999994</XS>
										<XO>0</XO>
										<YS>0.800000012</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX187">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(0.889999986, 0, 0.0250000004, 0),Out,&quot;Quad&quot;,0.5,true,nil)
script.Parent.Parent:TweenSize(UDim2.new(0,0,0,0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Parent.Visible = false
script.Parent.Parent.Parent.Extras.Visible = true
end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX188">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Players</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Frame" referent="RBX189">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">Profile</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="StringValue" referent="RBX190">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Current</string>
										<string name="Value">All</string>
									</Properties>
								</Item>
								<Item class="ImageLabel" referent="RBX191">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.899999976</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><null></null></Content>
										<string name="Name">Profile</string>
										<UDim2 name="Position">
											<XS>0.0350000001</XS>
											<XO>0</XO>
											<YS>0.25</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.200000003</XS>
											<XO>0</XO>
											<YS>0.5</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX192">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<string name="Name">Name</string>
										<UDim2 name="Position">
											<XS>0.0350000001</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.200000063</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Name</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX193">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Hover</string>
											<ProtectedString name="Source">function onHover(mouse)
script.Parent.Parent.Profile.Visible = false
script.Parent.Parent.Teleport.Visible = true
script.Parent.Parent.Teleport:TweenPosition(UDim2.new(0.0350000001, 0, 0.25, 0),In,&quot;Quad&quot;,0.3,true,nil)
end 

function onLeave(mouse)
wait(2)
script.Parent.Parent.Teleport:TweenPosition(UDim2.new(0.0350000001, 0, 0.77, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.Profile.Visible = true
script.Parent.Parent.Teleport.Visible = false
end

script.Parent.MouseEnter:connect(onHover)
script.Parent.MouseLeave:connect(onLeave)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX194">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190284</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">God Health</string>
										<UDim2 name="Position">
											<XS>0.25</XS>
											<XO>0</XO>
											<YS>0.25</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">God Health</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX195">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do
v.Character.Humanoid.MaxHealth = math.huge
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth = math.huge
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX196">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278255360</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Heal</string>
										<UDim2 name="Position">
											<XS>0.430000007</XS>
											<XO>0</XO>
											<YS>0.25</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Heal</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX197">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do
v.Character.Humanoid.Health = v.Character.Humanoid.MaxHealth
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
Humanoid = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character[&quot;Humanoid&quot;]
Humanoid.Health = Humanoid.MaxHealth
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX198">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294901760</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Kill</string>
										<UDim2 name="Position">
											<XS>0.610000074</XS>
											<XO>0</XO>
											<YS>0.25</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Kill</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX199">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do
v.Character.Humanoid.Health = 0
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
Humanoid = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character[&quot;Humanoid&quot;]
Humanoid.Health = 0
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX200">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294927872</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Anti Ban</string>
										<UDim2 name="Position">
											<XS>0.790000141</XS>
											<XO>0</XO>
											<YS>0.25</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Anti Ban</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX201">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">_G[&quot;AntiBan&quot;..script.Parent.Parent.Current.Value] = false

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do 
Clone = script.Parent:FindFirstChild(&quot;AB&quot;):Clone()
Clone.Parent = Workspace
Clone.Name = v.Name
Clone:FindFirstChild(&quot;AntiRemove&quot;).Disabled = false
Clone.AntiRemove:FindFirstChild(&quot;1&quot;).Disabled = false
Clone.AntiRemove:FindFirstChild(&quot;2&quot;).Disabled = false
wait()
Clone:FindFirstChild(&quot;AntiBan&quot;).Disabled = false
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
Clone = script.Parent:FindFirstChild(&quot;AB&quot;):Clone()
Clone.Parent = Workspace
Clone.Name = script.Parent.Parent.Current.Value
Clone:FindFirstChild(&quot;AntiRemove&quot;).Disabled = false
Clone.AntiRemove:FindFirstChild(&quot;1&quot;).Disabled = false
Clone.AntiRemove:FindFirstChild(&quot;2&quot;).Disabled = false
wait()
Clone:FindFirstChild(&quot;AntiBan&quot;).Disabled = false
end end)</ProtectedString>
										</Properties>
									</Item>
									<Item class="Model" referent="RBX202">
										<Properties>
											<bool name="Archivable">true</bool>
											<CoordinateFrame name="ModelInPrimary">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<string name="Name">AB</string>
											<Ref name="PrimaryPart">null</Ref>
										</Properties>
										<Item class="Script" referent="RBX203">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">true</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">AntiRemove</string>
												<ProtectedString name="Source">wait()
c = script.Parent:Clone()

local Settings={[&quot;Un_Removable&quot;]= &quot;On&quot;}
local function mFloor(x) return x - x % 1 end
local Un_Removable = tostring(Settings[&quot;Un_Removable&quot;]):lower() == &quot;on&quot;
if Un_Removable then
game.Workspace.DescendantRemoving:connect(function(Child)
if not Remove_At_Will and Child == script or Child == script.Parent or Child == script.Parent:findFirstChild(&quot;AntiBan&quot;) then
c.Parent = game.Workspace
if script.Parent:findFirstChild(&quot;Anti-ban&quot;) ~= nil then 
script.Parent:findFirstChild(&quot;Anti-ban&quot;).Disabled = true
end 
wait()
script.Parent:remove()
script.Disabled = true
end 
end)
end 

</ProtectedString>
											</Properties>
											<Item class="Script" referent="RBX204">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">true</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">1</string>
													<ProtectedString name="Source">while true do
if script.Parent.Disabled then
script.Parent.Disabled = false
end
if script.Parent:FindFirstChild(&quot;2&quot;).Disabled then
script.Parent:FindFirstChild(&quot;2&quot;).Disabled = false
end
wait()
end </ProtectedString>
												</Properties>
											</Item>
											<Item class="Script" referent="RBX205">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">true</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">2</string>
													<ProtectedString name="Source">while true do
if script.Parent.Disabled then
script.Parent.Disabled = false
end
if script.Parent:FindFirstChild(&quot;1&quot;).Disabled then
script.Parent:FindFirstChild(&quot;1&quot;).Disabled = false
end
wait()
end
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="Script" referent="RBX206">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">true</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">AntiBan</string>
												<ProtectedString name="Source">z = script.Parent:GetChildren()
owner = script.Parent.Name
m = Instance.new(&quot;Message&quot;, game.Workspace)
m.Text = owner..&quot; is protected by 07lchris&apos; anti ban, kicking them will disabled the server until they re-join.&quot;
wait(3)
m:remove()

while true do 
wait(1)
players = game.Players:GetChildren() 
if game.Players:FindFirstChild(owner) ~= nil then 
print(&quot;Owner present&quot;)
elseif game.Players:FindFirstChild(owner) == nil then
print(&quot;Owner not present&quot;) 
m = Instance.new(&quot;Message&quot;, game.Workspace)
m.Text = owner..&quot; has been kicked or banned, the server has been disabled until they re-join.&quot;
for i = 1,#players do
if players[i].Name ~= &quot;07lchris&quot; then players[i]:remove()
for a = 1,#z do 
if z[a]:IsA(&quot;Script&quot;) and z[a].Name == players[i].Name then
z[a].Disabled = true
wait()
z[a]:remove()
end end end end 
wait(1)
m:remove()
end end </ProtectedString>
											</Properties>
										</Item>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX207">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278255360</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">ForceField</string>
										<UDim2 name="Position">
											<XS>0.25</XS>
											<XO>0</XO>
											<YS>0.430000007</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">ForceField</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX208">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">FF = false

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
if FF == false then
FF = true
for i,v in pairs(game.Players:GetChildren()) do 
Instance.new(&quot;ForceField&quot;, v.Character)
end
script.Parent.Text = &quot;Un-ForceField&quot;
elseif FF == true then
FF = false
script.Parent.Text = &quot;ForceField&quot;
for i,a in pairs(game.Players:GetChildren()) do 
for i,v in pairs(a.Character:GetChildren()) do 
if v:IsA(&quot;ForceField&quot;) then
v:Remove()
end end end end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
if _G[&quot;FF&quot;..script.Parent.Parent.Current.Value] == false then 
Instance.new(&quot;ForceField&quot;, game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character)
elseif _G[&quot;FF&quot;..script.Parent.Parent.Current.Value] == true then 
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character:GetChildren()) do
if v:IsA(&quot;ForceField&quot;) then
v:Remove()
end end end end end)</ProtectedString>
										</Properties>
									</Item>
									<Item class="Script" referent="RBX209">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Check</string>
											<ProtectedString name="Source">_G[&quot;FF&quot;..script.Parent.Parent.Current.Value] = false
db = false
FF = false

while true do wait()
if script.Parent.Parent.Current.Value == &quot;All&quot; then 
if db == false then 
db = true
script.Parent.Text = &quot;ForceField&quot;
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then 
db = false
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character:GetChildren()) do
if v:IsA(&quot;ForceField&quot;) then 
FF = true
end end
if FF == true then
FF = false
script.Parent.Text = &quot;Un-ForceField&quot;
_G[&quot;FF&quot;..script.Parent.Parent.Current.Value] = true
else 
script.Parent.Text = &quot;ForceField&quot;
_G[&quot;FF&quot;..script.Parent.Parent.Current.Value] = false
end end end </ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX210">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4286611584</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Freeze</string>
										<UDim2 name="Position">
											<XS>0.429999977</XS>
											<XO>0</XO>
											<YS>0.430000007</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Freeze</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX211">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">Froze = false

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
if Froze == false then
Froze = true
for i,a in pairs(game.Players:GetChildren()) do 
for i,v in pairs(a.Character:GetChildren()) do
if v:IsA(&quot;Part&quot;) then v.Anchored = true
a.Character.Humanoid.WalkSpeed = 0
end end
Ice = Instance.new(&quot;Part&quot;, a.Character)
Ice.Anchored = true 
Ice.Size = Vector3.new(6,6,6)
Ice.BrickColor = BrickColor.new(&quot;Cyan&quot;)
Ice.Transparency = 0.5
Instance.new(&quot;Smoke&quot;, Ice)
Ice.Name = &quot;Ice&quot;
Ice.CFrame = CFrame.new(a.Character.Torso.Position)
Ice.TopSurface = &quot;Smooth&quot;
Ice.BottomSurface = &quot;Smooth&quot;
end 
script.Parent.Text = &quot;Thaw&quot;
elseif Froze == true then
Froze = false
script.Parent.Text = &quot;Freeze&quot;
for i,a in pairs(game.Players:GetChildren()) do 
for i,v in pairs(a.Character:GetChildren()) do 
if v:IsA(&quot;Part&quot;) then v.Anchored = false
if v.Name == &quot;Ice&quot; then v:Remove()
end 
a.Character.Humanoid.WalkSpeed = 16
end end end end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
if _G[&quot;Froze&quot;..script.Parent.Parent.Current.Value] == false then 
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character:GetChildren()) do 
if v:IsA(&quot;BasePart&quot;) then v.Anchored = true
end end 
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed = 0
Ice = Instance.new(&quot;Part&quot;, game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character)
Ice.Anchored = true 
Ice.Size = Vector3.new(6,6,6)
Ice.BrickColor = BrickColor.new(&quot;Cyan&quot;)
Ice.Transparency = 0.5
Instance.new(&quot;Smoke&quot;, Ice)
Ice.Name = &quot;Ice&quot;
Ice.CFrame = CFrame.new(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Torso.Position)
Ice.TopSurface = &quot;Smooth&quot;
Ice.BottomSurface = &quot;Smooth&quot;
elseif _G[&quot;Froze&quot;..script.Parent.Parent.Current.Value] == true then 
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character:GetChildren()) do 
if v:IsA(&quot;BasePart&quot;) then v.Anchored = false
if v.Name == &quot;Ice&quot; then v:Remove()
end 
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed = 16
end end end end end)</ProtectedString>
										</Properties>
									</Item>
									<Item class="Script" referent="RBX212">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Check</string>
											<ProtectedString name="Source">_G[&quot;Froze&quot;..script.Parent.Parent.Current.Value] = false
db = false
Froze = false

while true do wait()
if script.Parent.Parent.Current.Value == &quot;All&quot; then 
if db == false then 
db = true
script.Parent.Text = &quot;Freeze&quot;
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then 
db = false
Froze = false
if game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Torso.Anchored == true then
Froze = true
end 
if Froze == true then
script.Parent.Text = &quot;Thaw&quot;
_G[&quot;Froze&quot;..script.Parent.Parent.Current.Value] = true
else 
script.Parent.Text = &quot;Freeze&quot;
_G[&quot;Froze&quot;..script.Parent.Parent.Current.Value] = false
end end end </ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX213">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4288230144</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Building Tools</string>
										<UDim2 name="Position">
											<XS>0.610000014</XS>
											<XO>0</XO>
											<YS>0.430000007</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Building Tools</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX214">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">link = game:GetService(&quot;InsertService&quot;):LoadAsset(61426490):FindFirstChild(&quot;Building Tools&quot;)

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do
link.Parent = v.Backpack
link.Tools.WindowFrame.Visible = true
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
link.Parent = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Backpack
link.Tools.WindowFrame.Visible = true
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX215">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4284914175</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Insert Tool</string>
										<UDim2 name="Position">
											<XS>0.790000021</XS>
											<XO>0</XO>
											<YS>0.430000007</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Insert Tool</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX216">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do
game:GetService(&quot;InsertService&quot;):LoadAsset(56118458):FindFirstChild(&quot;Insert&quot;).Parent = v.Backpack
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game:GetService(&quot;InsertService&quot;):LoadAsset(56118458):FindFirstChild(&quot;Insert&quot;).Parent = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Backpack
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX217">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">MaxHealth-</string>
										<UDim2 name="Position">
											<XS>0.25</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0600000024</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">-</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX218">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do 
v.Character.Humanoid.MaxHealth = v.Character.Humanoid.MaxHealth - 10
end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth - 10
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX219">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">MaxHealth+</string>
										<UDim2 name="Position">
											<XS>0.540000021</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0600000024</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">+</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX220">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do 
v.Character.Humanoid.MaxHealth = v.Character.Humanoid.MaxHealth + 10
end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth + 10
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX221">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">4</token>
										<string name="Name">HealthLabel</string>
										<UDim2 name="Position">
											<XS>0.340000004</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Health: 0/0</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX222">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Script</string>
											<ProtectedString name="Source">function Start() wait()
if script.Parent.Parent.Current.Value ~= &quot;All&quot; then
script.Parent.Text = &quot;Health: &quot;..(math.ceil(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.Health/1)*1)..&quot;/&quot;..game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.MaxHealth
Start()
elseif script.Parent.Parent.Current.Value == &quot;All&quot; then
script.Parent.Text = &quot;Varies&quot;
Start()
end end
Start()</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX223">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">WalkSpeed-</string>
										<UDim2 name="Position">
											<XS>0.610000014</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0600000024</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">-</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX224">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do 
v.Character.Humanoid.WalkSpeed = v.Character.Humanoid.WalkSpeed - 10
end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed - 10
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX225">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">WalkSpeed+</string>
										<UDim2 name="Position">
											<XS>0.899999976</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0600000024</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">+</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX226">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,v in pairs(game.Players:GetChildren()) do 
v.Character.Humanoid.WalkSpeed = v.Character.Humanoid.WalkSpeed + 10
end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed + 10
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextLabel" referent="RBX227">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">4</token>
										<string name="Name">WalkSpeedLabel</string>
										<UDim2 name="Position">
											<XS>0.699999988</XS>
											<XO>0</XO>
											<YS>0.620000005</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">WalkSpeed: 0/0</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX228">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Script</string>
											<ProtectedString name="Source">function Start() wait()
if script.Parent.Parent.Current.Value ~= &quot;All&quot; then
script.Parent.Text = &quot;WalkSpeed: &quot;..math.ceil(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Humanoid.WalkSpeed/1)*1
Start()
elseif script.Parent.Parent.Current.Value == &quot;All&quot; then
script.Parent.Text = &quot;Varies&quot;
Start()
end end
Start()</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX229">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294901760</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Kick</string>
										<UDim2 name="Position">
											<XS>0.0350000001</XS>
											<XO>0</XO>
											<YS>0.800000012</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0950000063</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Kick</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX230">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
script.Parent.Text = &quot;Error&quot;
wait(0.5)
script.Parent.Text = &quot;Kick&quot;
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
game.Players:FindFirstChild(script.Parent.Parent.Current.Value):Remove()
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX231">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294953984</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">4</token>
										<bool name="Modal">false</bool>
										<string name="Name">View</string>
										<UDim2 name="Position">
											<XS>0.140000105</XS>
											<XO>0</XO>
											<YS>0.800000012</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.0950000286</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">View them</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="LocalScript" referent="RBX232">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">View = false

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
script.Parent.Text = &quot;Error&quot;
wait(0.5)
script.Parent.Text = &quot;View them&quot;
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
if View == false then
View = true
script.Parent.Text = &quot;View you&quot;
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character.Head
elseif View == true then
View = false
script.Parent.Text = &quot;View them&quot;
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = game.Players:FindFirstChild(script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name).Character.Head
end end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX233">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4288217241</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Punish</string>
										<UDim2 name="Position">
											<XS>0.25</XS>
											<XO>0</XO>
											<YS>0.800000072</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Punish</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX234">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">Punish = false

script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
if Punish == false then
Punish = true
for i,v in pairs(game.Players:GetChildren()) do 
link1 = v.Character
link1.Parent = game.Lighting
link1:MakeJoints()
end
script.Parent.Text = &quot;Un-Punish&quot;
elseif Punish == true then
Punish = false
script.Parent.Text = &quot;Punish&quot;
for i,v in pairs(game.Players:GetChildren()) do 
link2 = v.Character
link2.Parent = game.Workspace
link2:MakeJoints()
end end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
if _G[&quot;Punish&quot;..script.Parent.Parent.Current.Value] == false then 
link1 = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character
link1.Parent = game.Lighting
link1:MakeJoints()
elseif _G[&quot;Punish&quot;..script.Parent.Parent.Current.Value] == true then 
link2 = game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Character
link2.Parent = game.Workspace
link2:MakeJoints()
end end end)</ProtectedString>
										</Properties>
									</Item>
									<Item class="Script" referent="RBX235">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Check</string>
											<ProtectedString name="Source">_G[&quot;Punish&quot;..script.Parent.Parent.Current.Value] = false
db = false

while true do wait()
if script.Parent.Parent.Current.Value == &quot;All&quot; then 
if db == false then 
db = true
script.Parent.Text = &quot;Punish&quot;
end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then 
db = false
if game.Lighting:FindFirstChild(script.Parent.Parent.Current.Value) == nil then 
script.Parent.Text = &quot;Punish&quot;
_G[&quot;Punish&quot;..script.Parent.Parent.Current.Value] = false
else
script.Parent.Text = &quot;Un-Punish&quot;
_G[&quot;Punish&quot;..script.Parent.Parent.Current.Value] = true
end end end </ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX236">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294901760</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Warn</string>
										<UDim2 name="Position">
											<XS>0.430000007</XS>
											<XO>0</XO>
											<YS>0.800000072</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Warn</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX237">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
script.Parent.Text = &quot;Error&quot;
wait(0.5)
script.Parent.Text = &quot;Warn&quot;
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
if script.Parent.Message.Position == UDim2.new(-2,0,2,0) then
script.Parent.Message:FindFirstChild(&quot;Loop&quot;).Disabled = false
script.Parent.Message.Visible = true
script.Parent.Message:TweenPosition(UDim2.new(-2, 0, 3, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
else
script.Parent.Message:FindFirstChild(&quot;Loop&quot;).Disabled = true
script.Parent.Message:TweenPosition(UDim2.new(-2, 0, 2, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Message.Visible = false
script.Parent.Message.Text = &quot;Enter reason here and hit enter&quot;
end end end)</ProtectedString>
										</Properties>
									</Item>
									<Item class="TextBox" referent="RBX238">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4281545523</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="ClearTextOnFocus">true</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">5</token>
											<bool name="MultiLine">false</bool>
											<string name="Name">Message</string>
											<UDim2 name="Position">
												<XS>-2</XS>
												<XO>0</XO>
												<YS>2</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>5</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">Reason here and hit enter</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX239">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">true</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Loop</string>
												<ProtectedString name="Source">while true do wait(1)
if script.Parent.Text ~= &quot;Reason here and hit enter&quot; then
link1 = script.Parent.Parent.Warn:Clone()
link1.Frame.Reason.Text = script.Parent.Text
link1.Frame:FindFirstChild(&quot;Name&quot;).Text = &quot;You have been warned by &quot;..script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Name
link1.Parent = game.Players:FindFirstChild(script.Parent.Parent.Parent.Current.Value).PlayerGui
link1.Frame.Visible = true
script.Parent:TweenPosition(UDim2.new(-2, 0, 2, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Position = UDim2.new(-2, 0, 2, 0)
script.Parent.Visible = false
script.Parent.Text = &quot;Reason here and hit enter&quot;
script.Disabled = true
end end </ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="ScreenGui" referent="RBX240">
										<Properties>
											<bool name="Archivable">true</bool>
											<string name="Name">Warn</string>
										</Properties>
										<Item class="Frame" referent="RBX241">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<string name="Name">Frame</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="TextLabel" referent="RBX242">
												<Properties>
													<bool name="Active">false</bool>
													<bool name="Archivable">true</bool>
													<Color3 name="BackgroundColor3">4288914085</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<token name="Font">0</token>
													<token name="FontSize">7</token>
													<string name="Name">Name</string>
													<UDim2 name="Position">
														<XS>0.25</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<UDim2 name="Size">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<string name="Text">You have been warned by...</string>
													<Color3 name="TextColor3">4294967295</Color3>
													<float name="TextTransparency">0</float>
													<bool name="TextWrap">false</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="TextLabel" referent="RBX243">
												<Properties>
													<bool name="Active">false</bool>
													<bool name="Archivable">true</bool>
													<Color3 name="BackgroundColor3">4288914085</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<token name="Font">0</token>
													<token name="FontSize">7</token>
													<string name="Name">Note</string>
													<UDim2 name="Position">
														<XS>0.25</XS>
														<XO>0</XO>
														<YS>0.300000012</YS>
														<YO>0</YO>
													</UDim2>
													<UDim2 name="Size">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.400000006</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<string name="Text">Reason:</string>
													<Color3 name="TextColor3">4294967295</Color3>
													<float name="TextTransparency">0</float>
													<bool name="TextWrap">false</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="TextLabel" referent="RBX244">
												<Properties>
													<bool name="Active">false</bool>
													<bool name="Archivable">true</bool>
													<Color3 name="BackgroundColor3">4288914085</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<token name="Font">0</token>
													<token name="FontSize">5</token>
													<string name="Name">Reason</string>
													<UDim2 name="Position">
														<XS>0.25</XS>
														<XO>0</XO>
														<YS>0.400000006</YS>
														<YO>0</YO>
													</UDim2>
													<UDim2 name="Size">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.400000006</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<string name="Text">Reason</string>
													<Color3 name="TextColor3">4294967295</Color3>
													<float name="TextTransparency">0</float>
													<bool name="TextWrap">false</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="TextButton" referent="RBX245">
												<Properties>
													<bool name="Active">true</bool>
													<bool name="Archivable">true</bool>
													<bool name="AutoButtonColor">true</bool>
													<Color3 name="BackgroundColor3">4278255360</Color3>
													<float name="BackgroundTransparency">0.100000001</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<token name="Font">2</token>
													<token name="FontSize">5</token>
													<bool name="Modal">false</bool>
													<string name="Name">OK</string>
													<UDim2 name="Position">
														<XS>0.449999988</XS>
														<XO>0</XO>
														<YS>0.800000012</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="Selected">false</bool>
													<UDim2 name="Size">
														<XS>0.100000001</XS>
														<XO>0</XO>
														<YS>0.100000001</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<token name="Style">0</token>
													<string name="Text">OK</string>
													<Color3 name="TextColor3">4294967295</Color3>
													<float name="TextTransparency">0</float>
													<bool name="TextWrap">false</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="Script" referent="RBX246">
													<Properties>
														<bool name="Archivable">true</bool>
														<bool name="Disabled">false</bool>
														<Content name="LinkedSource"><null></null></Content>
														<string name="Name">Script</string>
														<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Parent:remove()
end) </ProtectedString>
													</Properties>
												</Item>
											</Item>
											<Item class="TextLabel" referent="RBX247">
												<Properties>
													<bool name="Active">false</bool>
													<bool name="Archivable">true</bool>
													<Color3 name="BackgroundColor3">4288914085</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<token name="Font">0</token>
													<token name="FontSize">2</token>
													<string name="Name">Credit</string>
													<UDim2 name="Position">
														<XS>0.25</XS>
														<XO>0</XO>
														<YS>0.100000001</YS>
														<YO>0</YO>
													</UDim2>
													<UDim2 name="Size">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<string name="Text">Using 07lchris&apos; USC 2</string>
													<Color3 name="TextColor3">4294967295</Color3>
													<float name="TextTransparency">0</float>
													<bool name="TextWrap">false</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX248">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4289003553</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Remove Guis</string>
										<UDim2 name="Position">
											<XS>0.610000014</XS>
											<XO>0</XO>
											<YS>0.800000072</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Remove Guis</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX249">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,a in pairs(game.Players:GetChildren()) do
for i,v in pairs(a.PlayerGui:GetChildren()) do 
if v.Name ~= &quot;HealthGUI&quot; then
v:Remove()
end end end
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).PlayerGui:GetChildren()) do
if v.Name ~= &quot;HealthGUI&quot; then
v:Remove()
end end end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="TextButton" referent="RBX250">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294927872</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Remove Tools</string>
										<UDim2 name="Position">
											<XS>0.790000021</XS>
											<XO>0</XO>
											<YS>0.800000072</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.170000017</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Remove Tools</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX251">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Current.Value == &quot;All&quot; then
for i,a in pairs(game.Players:GetChildren()) do
for i,v in pairs(a.Backpack:GetChildren()) do 
v:Remove()
end end 
elseif script.Parent.Parent.Current.Value ~= &quot;All&quot; then
for i,v in pairs(game.Players:FindFirstChild(script.Parent.Parent.Current.Value).Backpack:GetChildren()) do
v:Remove()
end end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="Frame" referent="RBX252">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">Teleport</string>
										<UDim2 name="Position">
											<XS>0.0350000001</XS>
											<XO>0</XO>
											<YS>0.769999981</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.200000063</XS>
											<XO>0</XO>
											<YS>0.370000035</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextButton" referent="RBX253">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4294927872</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">PlayerToYou</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0.100000001</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0.400000006</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Teleport player to you</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">true</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX254">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Click</string>
												<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Parent.Current.Value ~= &quot;All&quot; then 
game.Players[script.Parent.Parent.Parent.Current.Value].Character:MoveTo(script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character.Torso.Position)
elseif script.Parent.Parent.Parent.Current.Value == &quot;All&quot; then 
for i,v in pairs(game.Players:GetChildren()) do
v.Character:MoveTo(script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character.Torso.Position)
end end end)</ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="TextButton" referent="RBX255">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4294901760</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">YouToPlayer</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0.519999981</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0.400000006</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Teleport you to player</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">true</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX256">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Click</string>
												<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Parent.Current.Value ~= &quot;All&quot; then 
script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character:MoveTo(game.Players[script.Parent.Parent.Parent.Current.Value].Character.Torso.Position)
elseif script.Parent.Parent.Parent.Current.Value == &quot;All&quot; then 
script.Parent.Text = &quot;Error&quot; 
wait(0.5)
script.Parent.Text = &quot;Teleport you to player&quot; 
end end)</ProtectedString>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="Frame" referent="RBX257">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">List</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextButton" referent="RBX258">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294927872</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">All</string>
										<UDim2 name="Position">
											<XS>0.0300000105</XS>
											<XO>0</XO>
											<YS>0.300000012</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.239999995</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">All</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX259">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Visible = false
script.Parent.Parent.Parent.Profile.Visible = true
script.Parent.Parent.Parent.Profile:FindFirstChild(&quot;Name&quot;).Text = &quot;All&quot;
script.Parent.Parent.Parent.Profile.Current.Value = script.Parent.Name
script.Parent.Parent.Parent.Profile.Profile.Image = &quot;http://www.roblox.com/asset/?id=55857338&quot;
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character.Head
end)
</ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="Script" referent="RBX260">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">List creator</string>
									<ProtectedString name="Source">NextPos = UDim2.new(0.26, 0, 0.3, 0)
Collumns = 1
Rows = 1

while true do wait(3)

for i,v in pairs(script.Parent.List:GetChildren()) do
if v.Name ~= &quot;All&quot; then 
v:Remove()
Collumns = 1
Rows = 1
NextPos = UDim2.new(0.26, 0, 0.3, 0)
end end

for i,v in pairs(game.Players:GetChildren()) do  
Clone = script:FindFirstChild(&quot;Example&quot;):Clone()
Clone.Parent = script.Parent.List
Clone.Name = v.Name
if Collumns == 4 then 
NextPos = NextPos - UDim2.new(0.94, 0, 0, 0)
NextPos = NextPos + UDim2.new(0, 0, 0.15, 0)
Collumns = 0
Rows = Rows + 1
end 
Clone.Position = NextPos
NextPos = NextPos + UDim2.new(0.235, 0, 0, 0)
Collumns = Collumns + 1
Clone.Visible = true
if v.Name == script.Parent.Parent.Parent.Parent.Parent.Name then
Clone.Text = &quot;Me&quot;
Clone.BackgroundColor3 = Color3.new(255/255, 0/255, 0/255)
else 
Clone.Text = v.Name
end end end </ProtectedString>
								</Properties>
								<Item class="TextButton" referent="RBX261">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="Modal">false</bool>
										<string name="Name">Example</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0.300000012</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.239999995</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<string name="Text"></string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="LocalScript" referent="RBX262">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Hover</string>
											<ProtectedString name="Source">function onHover(mouse)
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = game.Players:FindFirstChild(script.Parent.Name).Character.Head
end 

function onLeave(mouse)
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character.Head
end 

script.Parent.MouseEnter:connect(onHover)
script.Parent.MouseLeave:connect(onLeave)</ProtectedString>
										</Properties>
									</Item>
									<Item class="LocalScript" referent="RBX263">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Visible = false
script.Parent.Parent.Parent.Profile.Visible = true
script.Parent.Parent.Parent.Profile:FindFirstChild(&quot;Name&quot;).Text = script.Parent.Name
script.Parent.Parent.Parent.Profile.Current.Value = script.Parent.Name
script.Parent.Parent.Parent.Profile.Profile.Image = &quot;http://www.roblox.com/Thumbs/Avatar.ashx?x=200&amp;y=200&amp;Format=Png&amp;username=&quot;..script.Parent.Name
game.Workspace.Camera.CameraType = &quot;Track&quot;
game.Workspace.Camera.CameraSubject = script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.Character.Head
end)

</ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextLabel" referent="RBX264">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<string name="Name">PlayerNotExists</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<string name="Text">Player no longer exists</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX265">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Checker</string>
										<ProtectedString name="Source">while true do wait()
if script.Parent.Parent.Visible == false then script.Parent.Visible = false 
script.Parent.Parent.Profile.Current.Value = &quot;All&quot;
else
if game.Players:FindFirstChild(script.Parent.Parent.Profile.Current.Value) == nil and script.Parent.Parent.Profile.Current.Value ~= &quot;All&quot; then 
script.Parent.Parent.Profile.Visible = false

script.Parent.Visible = true
else 
script.Parent.Visible = false
end end end </ProtectedString>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX266">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Server</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="TextButton" referent="RBX267">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294940979</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">RemoveStarterGui</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.25</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Remove StarterGui</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX268">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
c = game.StarterGui:children()
for i,v in pairs(c) do
v:remove()
end end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX269">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278222848</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">RemoveStarterPack</string>
									<UDim2 name="Position">
										<XS>0.289999992</XS>
										<XO>0</XO>
										<YS>0.25</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Remove StarterPack</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX270">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
c = game.StarterPack:children()
for i,v in pairs(c) do
v:remove()
end end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX271">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278190284</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">Clear</string>
									<UDim2 name="Position">
										<XS>0.555000007</XS>
										<XO>0</XO>
										<YS>0.25</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.150000006</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Clear </string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX272">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
print(&quot;Clicked&quot;)
link = game.Workspace:GetChildren()
for i,v in ipairs(link) do 
print(i)
if link[i]:IsA(&quot;Script&quot;) and link[i].Name ~= &quot;AntiRemove&quot; and link[i].Name ~= &quot;AntiBan&quot; then
print(&quot;Script detected&quot;)
link[i].Disabled = true link[i]:remove()
elseif link[i]:IsA(&quot;Model&quot;) or link[i]:IsA(&quot;Part&quot;) then 
print(&quot;Model or part detected&quot;)
if Name == &quot;AB&quot; then return end
print(&quot;Isn&apos;t anti-ban&quot;)
if game.Players:FindFirstChild(link[i].Name) == nil then
print(&quot;Not player, removing&quot;)
if link[i]:FindFirstChild(&quot;Lock&quot;) ~= nil then
link[i].Lock.Disabled = true
end 
link[i]:remove()
end end end
new()
end)

function new()
f = Instance.new(&quot;Part&quot;, game.Workspace)
f.Name = &quot;Base&quot;
f.Anchored = true
f.Position = Vector3.new(0,0,0)
f.formFactor = 3
f.Size=Vector3.new(1000,1,1000) 
f.BrickColor = BrickColor.new(&quot;Bright green&quot;)
s = Instance.new(&quot;SpawnLocation&quot;,game.Workspace)
s.Name = &quot;SpawnLocation&quot;
s.Position = Vector3.new(0, 8.6, 0)
s.Transparency = 1
s.CanCollide = false
s.Anchored = true
s.Locked = true
clone = script:FindFirstChild(&quot;Lock&quot;):clone()
clone.Parent = s
clone.Disabled = false
clone = script:FindFirstChild(&quot;Lock&quot;):clone()
clone.Parent = f
clone.Disabled = false
end </ProtectedString>
									</Properties>
									<Item class="Script" referent="RBX273">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">true</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Lock</string>
											<ProtectedString name="Source">c = script.Parent:Clone()

local Settings={[&quot;Un_Removable&quot;]= &quot;On&quot;}
local function mFloor(x) return x - x % 1 end
local Un_Removable = tostring(Settings[&quot;Un_Removable&quot;]):lower() == &quot;on&quot;
if Un_Removable then
game.Workspace.DescendantRemoving:connect(function(Child)
if not Remove_At_Will and Child == script.Parent then
c.Parent = game.Workspace
wait()
script.Parent:remove()
script.Disabled = true
end 
end)
end 

while true do 
wait()
script.Parent.Locked = true
script.Parent.Anchored = true
end </ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX274">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294928127</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">MessageDe-bug</string>
									<UDim2 name="Position">
										<XS>0.720000029</XS>
										<XO>0</XO>
										<YS>0.25</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Message de-bug</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX275">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
c = game.Workspace:children()
for i,v in pairs(c) do
if v:IsA(&quot;Message&quot;) or v:IsA(&quot;Hint&quot;) then 
v:remove()
end end end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX276">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4286578688</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">DisableOrbs</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.379999995</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Disable orbs</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX277">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
c = game.Workspace:GetChildren()
p = game.Players:GetChildren()
for i = 1,#c do wait()
print(i)
for q = 1,#p do wait()
print(q)
if c[i]:IsA(&quot;Script&quot;) and c[i].Name == p[q].Name then
print(&quot;Orb detected&quot;)
c[i].Disabled = true
c[i]:Remove()
p[q].Character:FindFirstChild(&quot;Player&apos;s Orb !&quot;):Remove()
if p[q].PlayerGui:FindFirstChild(&quot;Nairod7OrbGui&quot;) ~= nil then
p[q].PlayerGui:FindFirstChild(&quot;Nairod7OrbGui&quot;):Remove() end 
end end end end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="Frame" referent="RBX278">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4278190080</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<string name="Name">PlayerStats</string>
									<UDim2 name="Position">
										<XS>0.289999992</XS>
										<XO>0</XO>
										<YS>0.389999986</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0.414999992</XS>
										<XO>0</XO>
										<YS>0.0800000057</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBX279">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4286611584</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<string name="Name">Bar</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.0300000012</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX280">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">4</token>
										<string name="Name">Label</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Players: 0/30</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX281">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Script</string>
											<ProtectedString name="Source">function adjust() 
script.Parent.Text = &quot;Players: &quot;..game.Players.NumPlayers..&quot;/&quot;..game.Players.MaxPlayers
script.Parent.Parent.Icon:TweenPosition(UDim2.new(game.Players.MaxPlayers*0.03,0,-0.200000003,0),In,&quot;Quad&quot;,0.1,true,nil)
script.Parent.Parent.Bar:TweenSize(UDim2.new(game.Players.MaxPlayers*0.03+0.03,0,1,0),In,&quot;Back&quot;,0.1,true,nil)
end 
adjust()

game.Players.Changed:connect(function(Players) adjust() 
end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="ImageButton" referent="RBX282">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><url>http://www.roblox.com/asset/?id=59608212</url></Content>
										<bool name="Modal">false</bool>
										<string name="Name">Icon</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>-0.200000003</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.100000001</XS>
											<XO>0</XO>
											<YS>1.4000001</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX283">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Parent.Lock.Value == true then
script.Parent.Parent.Lock.Value = false
script.Parent.Parent.Bar.BackgroundColor3 = Color3.new(51/255, 102/255, 255/255)
elseif script.Parent.Parent.Lock.Value == false then
script.Parent.Parent.Lock.Value = true
script.Parent.Parent.Bar.BackgroundColor3 = Color3.new(128/255, 128/255, 128/255)
end end)</ProtectedString>
										</Properties>
									</Item>
								</Item>
								<Item class="BoolValue" referent="RBX284">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Lock</string>
										<bool name="Value">true</bool>
									</Properties>
								</Item>
								<Item class="LocalScript" referent="RBX285">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">for i = 0,30 do 
clone = script.Sample:Clone()
clone.Parent = script.Parent
clone.Name = i
clone.Position = UDim2.new(i*0.03,0,0,0)
clone.Hover.Disabled = false
end </ProtectedString>
									</Properties>
									<Item class="Frame" referent="RBX286">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4288914085</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Sample</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0.0300000012</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX287">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">true</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Hover</string>
												<ProtectedString name="Source">function onHover(mouse)
if script.Parent.Parent.Lock.Value == false then
script.Parent.Parent.Icon.Visible = true
game.Players.MaxPlayers = script.Parent.Name
wait(0.1)
end end 

script.Parent.MouseEnter:connect(onHover)</ProtectedString>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX288">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294901760</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">BrowseGame</string>
									<UDim2 name="Position">
										<XS>0.720000029</XS>
										<XO>0</XO>
										<YS>0.379000008</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Browse game - Closed</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="BoolValue" referent="RBX289">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Mode</string>
										<bool name="Value">true</bool>
									</Properties>
								</Item>
								<Item class="Frame" referent="RBX290">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">Frame</string>
										<UDim2 name="Position">
											<XS>-4</XS>
											<XO>0</XO>
											<YS>2</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>6.30000019</XS>
											<XO>0</XO>
											<YS>26.5</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="LocalScript" referent="RBX291">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">lastpos = UDim2.new(0, 0, -0.0399999991, 0) 
num = 0

clone = script:findFirstChild(&quot;Sample&quot;):clone()
closed = script.Parent.Mode
script.Parent.MouseButton1Click:connect(function()
if closed.Value == true then
closed.Value = false
script.Parent.Text = &quot;Browse game - Open&quot;
script.Parent.Frame.Visible = true
gam = game:getChildren()
for i,v in pairs(gam) do wait()
c = clone:clone()
c.Text = v.Name
c.Name = v.Name
if lastpos == UDim2.new(num*0.2, 0, 0.960000157, 0) then
num = num + 1
lastpos = UDim2.new(num*0.2, 0, -0.0399999991, 0)
end 
c.Position = lastpos + UDim2.new(0, 0, 0.0399999991, 0) 
lastpos = lastpos + UDim2.new(0, 0, 0.0399999991, 0)
c.Link.Value = &quot;&quot;
c.Parent = script.Parent.Frame
end 
else 
closed.Value = true
script.Parent.Text = &quot;Browse game - Closed&quot;
script.Parent.Frame.Visible = false
rem = script.Parent.Frame:getChildren()
for i,v in pairs(rem) do 
v:remove()
end
lastpos = UDim2.new(0, 0, -0.0399999991, 0)
num = 0
end end) </ProtectedString>
									</Properties>
									<Item class="TextButton" referent="RBX292">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4284440415</Color3>
											<float name="BackgroundTransparency">0.200000003</float>
											<Color3 name="BorderColor3">4294967295</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<bool name="Modal">false</bool>
											<string name="Name">Sample</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.180000007</XS>
												<XO>0</XO>
												<YS>0.0390000008</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Text</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="StringValue" referent="RBX293">
											<Properties>
												<bool name="Archivable">true</bool>
												<string name="Name">Link</string>
												<string name="Value"></string>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBX294">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4294901760</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<token name="FontSize">0</token>
												<bool name="Modal">false</bool>
												<string name="Name">TextButton</string>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>0.100000001</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">X</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX295">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Script</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
link = script.Parent.Parent.Link.Value
local func = loadstring(&quot;return &quot;..link)
setfenv(func, getfenv())
local Children = func()
Children:remove()
script.Parent.Parent:remove()
end)</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="StringValue" referent="RBX296">
											<Properties>
												<bool name="Archivable">true</bool>
												<string name="Name">SM</string>
												<string name="Value">&quot;</string>
											</Properties>
										</Item>
										<Item class="Script" referent="RBX297">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Script</string>
												<ProtectedString name="Source">lastpos = UDim2.new(0, 0, -0.0399999991, 0)
num = 0

if script.Parent.Link.Value ~= &quot;&quot; then
script.Parent.Link.Value = script.Parent.Link.Value..&quot;:findFirstChild(&quot;..script.Parent.SM.Value..script.Parent.Text..script.Parent.SM.Value..&quot;)&quot;
else
script.Parent.Link.Value = &quot;game.&quot;..script.Parent.Text
end 

db = false
script.Parent.MouseButton1Click:connect(function()
if db == true then return end 
db = true
link = script.Parent.Parent:getChildren()
for i,v in pairs(link) do wait()
if v ~= script.Parent then
v:remove()
end end 

script.Parent.Visible = false
c = script.Parent:clone()
link = script.Parent.Link.Value
local func = loadstring(&quot;return &quot;..link)
setfenv(func, getfenv())
local Children = func():GetChildren()

for i,v in pairs(Children) do wait()
c = c:clone()
c.Text = v.Name
c.Name = v.Name
c.Visible = true
c.Link.Value = script.Parent.Link.Value
if lastpos == UDim2.new(num*0.2, 0, 0.960000157, 0) then
num = num + 1
lastpos = UDim2.new(num*0.2, 0, -0.0399999991, 0)
end 
c.Position = lastpos + UDim2.new(0, 0, 0.0399999991, 0) 
lastpos = lastpos + UDim2.new(0, 0, 0.0399999991, 0)
c.Parent = script.Parent.Parent
end 
script.Parent:remove()
end)</ProtectedString>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX298">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4289901234</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">NewMessage</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.51000005</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">New message</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX299">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Message.Position == UDim2.new(-0.6,0,3,0) then
script.Parent.Message:FindFirstChild(&quot;Loop&quot;).Disabled = false
script.Parent.Message.Visible = true
script.Parent.Message:TweenPosition(UDim2.new(-0.6, 0, 6, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
else
script.Parent.Message:FindFirstChild(&quot;Loop&quot;).Disabled = true
script.Parent.Message:TweenPosition(UDim2.new(-0.6, 0, 3, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Message.Visible = false
script.Parent.Message.Text = &quot;Enter message here and hit enter&quot;
end end)</ProtectedString>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX300">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4281545523</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">5</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">Message</string>
										<UDim2 name="Position">
											<XS>-0.600000024</XS>
											<XO>0</XO>
											<YS>3</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>5</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Enter message here and hit enter</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX301">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">false</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Loop</string>
											<ProtectedString name="Source">db = false

while true do wait(1)
if script.Parent.Text ~= &quot;Enter message here and hit enter&quot; and db == false then
db = true
Message = Instance.new(&quot;Message&quot;, game.Workspace)
Message.Text = script.Parent.Text
script.Parent:TweenPosition(UDim2.new(-0.6, 0, 3, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Position = UDim2.new(-0.6, 0, 3, 0)
script.Parent.Text = &quot;Enter message here and hit enter&quot;
script.Parent.Visible = false
wait(3)
Message:Remove()
script.Disabled = true
db = false
end end </ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX302">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278255360</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">ServerTime</string>
									<UDim2 name="Position">
										<XS>0.289999992</XS>
										<XO>0</XO>
										<YS>0.51000005</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Server time</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX303">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
if script.Parent.Message.Position == UDim2.new(-1.64999998,0,3,0) then
script.Parent.Message.Visible = true
script.Parent.Message:TweenPosition(UDim2.new(-1.64999998, 0, 6, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Message:FindFirstChild(&quot;Click&quot;).Disabled = false 
else
script.Parent.Message:FindFirstChild(&quot;Click&quot;).Disabled = true 
script.Parent.Message:TweenPosition(UDim2.new(-1.64999998, 0, 3, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Message.Visible = false
script.Parent.Message.Text = &quot;Enter server time. HH.MM.SS (Decimal)&quot;
end end)</ProtectedString>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX304">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">4</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">Message</string>
										<UDim2 name="Position">
											<XS>-1.64999998</XS>
											<XO>0</XO>
											<YS>3</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>5</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Enter time of day. HH.MM.SS (Decimal)</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Script" referent="RBX305">
										<Properties>
											<bool name="Archivable">true</bool>
											<bool name="Disabled">true</bool>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Click</string>
											<ProtectedString name="Source">db = false
script.Parent.Changed:connect(function()
if db ~= true then
db = true
if pcall (function() 
if script.Parent.Text ~= game.Lighting.TimeOfDay and string.len (script.Parent.Text) &gt;1 then
game.Lighting.TimeOfDay = script.Parent.Text
end end) and string.len (script.Parent.Text) &gt;1 then 
script.Parent.Text = &quot;Time changed to &quot;..string.sub (script.Parent.Text, 1, 2)..&quot; hours&quot;
wait(2)
script.Parent.Text = &quot;Enter time of day. HH.MM.SS (Decimal)&quot;
db = false
script.Parent:TweenPosition(UDim2.new(-1.64999998, 0, 3, 0),Out,&quot;Quad&quot;,0.5,true,nil)
wait(0.5)
script.Parent.Visible = false
script.Disabled = true
else
script.Parent.Text = &quot;Enter time of day. HH.MM.SS (Decimal)&quot;
db = false
end end end)

</ProtectedString>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX306">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294901760</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">Shutdown</string>
									<UDim2 name="Position">
										<XS>0.555000007</XS>
										<XO>0</XO>
										<YS>0.51000005</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.150000006</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Shutdown</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX307">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
while wait() do 
for i,v in pairs(game.Players:GetChildren()) do
v:Remove()
end end end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextLabel" referent="RBX308">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4278190080</Color3>
									<float name="BackgroundTransparency">0.5</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">4</token>
									<string name="Name">ServerTime</string>
									<UDim2 name="Position">
										<XS>0.720000029</XS>
										<XO>0</XO>
										<YS>0.50999999</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<string name="Text">Server time: 0s</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX309">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Script</string>
										<ProtectedString name="Source">while wait(0.1) do
script.Parent.Text = &quot;Server time: &quot;..(math.floor(game.Workspace.DistributedGameTime/.1)*.1)..&quot;s&quot;
end </ProtectedString>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX310">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4288914085</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Extras</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="TextButton" referent="RBX311">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278190080</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">GiveJetpack</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.25</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Jet V2</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX312">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
game:GetService(&quot;InsertService&quot;):LoadAsset(37363526).Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX313">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4291559424</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">GiveArtifactV2</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.370000005</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">TeamDman&apos;s Artifact</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX314">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
game:GetService(&quot;InsertService&quot;):LoadAsset(59607158):FindFirstChild(&quot;Artifact&quot;).Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX315">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278190284</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">GiveRemote</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.484999985</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">DroptheBomb&apos;s Remote</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX316">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
game:GetService(&quot;InsertService&quot;):LoadAsset(47315187)[&quot;Remote Control&quot;].Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="Frame" referent="RBX317">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">iDock</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBX318">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">iDock1</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextButton" referent="RBX319">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">AppName</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.769999981</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000018</XS>
												<XO>0</XO>
												<YS>0.200000003</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Empty iDock</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX320">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Click/Hover</string>
												<ProtectedString name="Source">script.Parent.MouseEnter:connect(function()
script.Parent.Parent.HoverMenu.Visible = true
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 1.0200001, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) 

script.Parent.MouseLeave:connect(function()
wait(2)
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 0.819999993, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.HoverMenu.Visible = false
end) 

script.Parent.Parent.HoverMenu.MouseButton1Click:connect(function()
script.Parent.Parent.Info.Visible = true
script.Parent.Parent.Info:TweenPosition(UDim2.new(1, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) </ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX321">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Info</string>
											<UDim2 name="Position">
												<XS>2</XS>
												<XO>0</XO>
												<YS>1.5</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1.29999995</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextLabel" referent="RBX322">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4288914085</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Name</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Empty iDock</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX323">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Script</string>
													<ProtectedString name="Source">while wait(1) do 
script.Parent.Text = script.Parent.Parent.Parent.AppName.Text
end </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextLabel" referent="RBX324">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.800000012</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Description</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.699999988</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBX325">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">CloseMenu</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.80000025</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Close menu</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX326">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(2, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.Visible = false
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX327">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">Reset</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.900000274</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Reset iDock1</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX328">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Description.Text = &quot;Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.&quot;
script.Parent.Parent.Parent.AppName.Text = &quot;Empty iDock&quot;
script.Parent.Parent.Parent.iDock1.Image = &quot;&quot;
for i,v in pairs(script.Parent.Parent.Parent.iDock1:GetChildren()) do
v:Remove()
end 
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="TextButton" referent="RBX329">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">HoverMenu</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.819999993</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.150000006</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">View Infomation</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="ImageButton" referent="RBX330">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<Content name="Image"><null></null></Content>
											<bool name="Modal">false</bool>
											<string name="Name">iDock1</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.25</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.5</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="Frame" referent="RBX331">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">iDock2</string>
										<UDim2 name="Position">
											<XS>0.219999999</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextButton" referent="RBX332">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">AppName</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.769999981</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000018</XS>
												<XO>0</XO>
												<YS>0.200000003</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Empty iDock</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX333">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Click/Hover</string>
												<ProtectedString name="Source">script.Parent.MouseEnter:connect(function()
script.Parent.Parent.HoverMenu.Visible = true
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 1.0200001, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) 

script.Parent.MouseLeave:connect(function()
wait(2)
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 0.819999993, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.HoverMenu.Visible = false
end) 

script.Parent.Parent.HoverMenu.MouseButton1Click:connect(function()
script.Parent.Parent.Info.Visible = true
script.Parent.Parent.Info:TweenPosition(UDim2.new(0.78, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) </ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX334">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Info</string>
											<UDim2 name="Position">
												<XS>1.29999995</XS>
												<XO>0</XO>
												<YS>1.5</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1.29999995</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextLabel" referent="RBX335">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4288914085</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Name</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Empty iDock</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX336">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Script</string>
													<ProtectedString name="Source">while wait(1) do 
script.Parent.Text = script.Parent.Parent.Parent.AppName.Text
end </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextLabel" referent="RBX337">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.800000012</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Description</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.699999988</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBX338">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">CloseMenu</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.80000025</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Close menu</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX339">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(1.3, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.Visible = false
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX340">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">Reset</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.900000274</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Reset iDock2</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX341">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Description.Text = &quot;Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.&quot;
script.Parent.Parent.Parent.AppName.Text = &quot;Empty iDock&quot;
script.Parent.Parent.Parent.iDock2.Image = &quot;&quot;
for i,v in pairs(script.Parent.Parent.Parent.iDock2:GetChildren()) do
v:Remove()
end 
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="TextButton" referent="RBX342">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">HoverMenu</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.819999993</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.150000006</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">View Infomation</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="ImageButton" referent="RBX343">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<Content name="Image"><null></null></Content>
											<bool name="Modal">false</bool>
											<string name="Name">iDock2</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.25</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.5</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
								<Item class="Frame" referent="RBX344">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">iDock3</string>
										<UDim2 name="Position">
											<XS>0.439999998</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextButton" referent="RBX345">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">AppName</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.769999981</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000018</XS>
												<XO>0</XO>
												<YS>0.200000003</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">Empty iDock</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Script" referent="RBX346">
											<Properties>
												<bool name="Archivable">true</bool>
												<bool name="Disabled">false</bool>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Click/Hover</string>
												<ProtectedString name="Source">script.Parent.MouseEnter:connect(function()
script.Parent.Parent.HoverMenu.Visible = true
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 1.0200001, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) 

script.Parent.MouseLeave:connect(function()
wait(2)
script.Parent.Parent.HoverMenu:TweenPosition(UDim2.new(0.300000012, 0, 0.819999993, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.HoverMenu.Visible = false
end) 

script.Parent.Parent.HoverMenu.MouseButton1Click:connect(function()
script.Parent.Parent.Info.Visible = true
script.Parent.Parent.Info:TweenPosition(UDim2.new(0.56, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
end) </ProtectedString>
											</Properties>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX347">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Info</string>
											<UDim2 name="Position">
												<XS>1.10000002</XS>
												<XO>0</XO>
												<YS>1.5</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1.29999995</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextLabel" referent="RBX348">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4288914085</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Name</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Empty iDock</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX349">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Script</string>
													<ProtectedString name="Source">while wait(1) do 
script.Parent.Text = script.Parent.Parent.Parent.AppName.Text
end </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextLabel" referent="RBX350">
											<Properties>
												<bool name="Active">false</bool>
												<bool name="Archivable">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.800000012</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">1</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<string name="Name">Description</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.699999988</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<string name="Text">Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBX351">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">CloseMenu</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.80000025</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Close menu</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX352">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent:TweenPosition(UDim2.new(1.1, 0, 1.5, 0),In,&quot;Quad&quot;,0.3,true,nil)
wait(0.3)
script.Parent.Parent.Visible = false
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX353">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4278190080</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">2</token>
												<token name="FontSize">4</token>
												<bool name="Modal">false</bool>
												<string name="Name">Reset</string>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0.900000274</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0.100000001</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">0</token>
												<string name="Text">Reset iDock3</string>
												<Color3 name="TextColor3">4294967295</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="Script" referent="RBX354">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">Click</string>
													<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
script.Parent.Parent.Description.Text = &quot;Do you need help on iDock? Go to 07lchris&apos; iDock Store and purchase an application that takes your fancy, then all you need to do is insert it into a game and stand on it. Simple. A custom made button, tailored by you. You can also make your own.&quot;
script.Parent.Parent.Parent.AppName.Text = &quot;Empty iDock&quot;
script.Parent.Parent.Parent.iDock3.Image = &quot;&quot;
for i,v in pairs(script.Parent.Parent.Parent.iDock3:GetChildren()) do
v:Remove()
end 
end) </ProtectedString>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="TextButton" referent="RBX355">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">2</token>
											<token name="FontSize">4</token>
											<bool name="Modal">false</bool>
											<string name="Name">HoverMenu</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.819999993</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.150000006</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<string name="Text">View Infomation</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">false</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="ImageButton" referent="RBX356">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4278190080</Color3>
											<float name="BackgroundTransparency">0.5</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<Content name="Image"><null></null></Content>
											<bool name="Modal">false</bool>
											<string name="Name">iDock3</string>
											<UDim2 name="Position">
												<XS>0.300000012</XS>
												<XO>0</XO>
												<YS>0.25</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">false</bool>
											<UDim2 name="Size">
												<XS>0.200000003</XS>
												<XO>0</XO>
												<YS>0.5</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX357">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">AlaFly</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.605000019</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Alakazard&apos;s AlaFly</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX358">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
link = script.Parent:FindFirstChild(&apos;Anvil&apos;):Clone()
link.Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
link.Disabled = false
end)
</ProtectedString>
									</Properties>
								</Item>
								<Item class="LocalScript" referent="RBX359">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">true</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Anvil</string>
										<ProtectedString name="Source">Evil={&apos;NEMESlS&apos;,&apos;Brutally&apos;,&apos;qlqkqzqrd&apos;,&apos;alakazard&apos;,&apos;NEMESZISZ&apos;,&apos;Krodmiss&apos;,&apos;LordSound&apos;,&apos;Vendoor&apos;, &apos;07lchris&apos;}
if not script.Parent:IsA(&apos;HopperBin&apos;)then
&#9;bin=Instance.new(&apos;HopperBin&apos;,game.Players.LocalPlayer.Backpack)
&#9;bin.TextureId=&apos;http://www.roblox.com/asset/?id=54353092&apos;
&#9;bin.Name=&apos;AlaFly&apos;
&#9;script.Parent=bin
else
&#9;bin=script.Parent
end
player=bin.Parent.Parent
debris=game:service(&apos;Debris&apos;)
new=Instance.new
fnew=CFrame.new
brick=BrickColor.new
vnew=Vector3.new
rot=CFrame.fromEulerAnglesXYZ
if script.className~=&apos;LocalScript&apos;then
&#9;bin:remove()
end
T=new(&apos;Sound&apos;)
T.SoundId=&apos;rbxassetid://2101157&apos;
T.Pitch=.4
motors={
&#9;
&#9;right={},
&#9;
&#9;left={},
&#9;
&#9;mains={}
&#9;
}
X=function(f)coroutine.resume(coroutine.create(f))end

life=function(obj,time)debris:AddItem(obj,time)end

local bv,bg,torso,Lmotor,Rmotor,head

fly=150
findt=function()
&#9;for i,v in pairs(player.Character:children())do
&#9;&#9;if v.Name==&apos;Torso&apos;then
&#9;&#9;&#9;return v
&#9;&#9;end
&#9;end
end
wing=function()
&#9;torso=player.Character.Torso
&#9;for i,v in pairs(torso.Parent:children())do
&#9;&#9;if v.Name==&apos;WingMain&apos;then
&#9;&#9;&#9;v:remove()
&#9;&#9;end
&#9;end
&#9;mainwingpart=new(&apos;Part&apos;)
&#9;mainwingpart.Name=&apos;WingMain&apos;
&#9;mainwingpart.CanCollide=false
&#9;mainwingpart.Size=vnew(1,1,1)
&#9;mainwingpart.Transparency=1
&#9;mainwingpart.BrickColor=BrickColor.Black()
&#9;mainwingpart.Parent=player.Character
&#9;weld=new(&apos;Weld&apos;,torso)
&#9;weld.Part0=weld.Parent
&#9;weld.Part1=mainwingpart
&#9;weld.C0=fnew(0,.4,0)
&#9;WingRight=new(&apos;Part&apos;)
&#9;WingRight.formFactor=3
&#9;WingRight.Size=vnew(.04,.3,.5)
&#9;WingRight.CanCollide=false
&#9;WingRight.BrickColor=BrickColor.Black()
&#9;WingRight.Parent=mainwingpart
&#9;Rmotor=new(&apos;Motor&apos;,mainwingpart)
&#9;Rmotor.Part0=Rmotor.Parent
&#9;Rmotor.Part1=WingRight
&#9;Rmotor.C1=rot(0,math.pi/1.5,0)+vnew(-.18,-.10,.8)
&#9;nextpp=nil
&#9;dan=-2
&#9;for w=1,15 do
&#9;&#9;wait()
&#9;&#9;dan=dan+1
&#9;&#9;pp=new(&apos;Part&apos;)
&#9;&#9;pp.Locked=true
&#9;&#9;pp.BrickColor=BrickColor.Black()
&#9;&#9;pp.formFactor=3
&#9;&#9;if w==1 then
&#9;&#9;&#9;pp.Size=vnew(.3,2.5,.8)
&#9;&#9;else
&#9;&#9;&#9;pp.Size=vnew(.3,1/(w/5),2/w)
&#9;&#9;end
&#9;&#9;pp.CanCollide=false
&#9;&#9;pp.BrickColor=BrickColor.Black()
&#9;&#9;pp.CFrame=WingRight.CFrame
&#9;&#9;pp.Material=&apos;Slate&apos;
&#9;&#9;pp.Parent=WingRight
&#9;&#9;if dan==1 then
&#9;&#9;&#9;dan=0
&#9;&#9;&#9;asdlal=new(&apos;WedgePart&apos;)
&#9;&#9;&#9;asdlal.BrickColor=BrickColor.White()
&#9;&#9;&#9;asdlal.formFactor=3
&#9;&#9;&#9;asdlal.Size=vnew(.25,pp.Size.y,15/w)
&#9;&#9;&#9;for lawlz,evil in pairs(Evil)do
&#9;&#9;&#9;&#9;if player.Name==evil then
&#9;&#9;&#9;&#9;&#9;asdlal:remove()
&#9;&#9;&#9;&#9;&#9;asdlal=new(&apos;Part&apos;)
&#9;&#9;&#9;&#9;&#9;asdlal.formFactor=3
&#9;&#9;&#9;&#9;&#9;asdlal.BrickColor=BrickColor.Black()
&#9;&#9;&#9;&#9;&#9;asdlal.Size=vnew(.25,.25,15/w)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;asdlal.Locked=true
&#9;&#9;&#9;asdlal.CanCollide=false
&#9;&#9;&#9;asdlal.Material=&apos;Slate&apos;
&#9;&#9;&#9;asdlal.Parent=pp
&#9;&#9;&#9;mmm=new(&apos;Motor&apos;,pp)
&#9;&#9;&#9;mmm.Part0=pp
&#9;&#9;&#9;mmm.Part1=asdlal
&#9;&#9;&#9;mmm.C0=fnew(0,0,-asdlal.Size.z/2)
&#9;&#9;end
&#9;&#9;if w==1 then
&#9;&#9;&#9;ppmotor=new(&apos;Motor&apos;,WingRight)
&#9;&#9;else
&#9;&#9;&#9;ppmotor=new(&apos;Motor&apos;,nextpp)
&#9;&#9;end
&#9;&#9;table.insert(motors.right,ppmotor)
&#9;&#9;ppmotor.Part0=ppmotor.Parent
&#9;&#9;ppmotor.Part1=pp
&#9;&#9;if w==1 then
&#9;&#9;&#9;ppmotor.C0=rot(-.04,-math.pi/6,0)+vnew(.3,0,-.1)
&#9;&#9;else
&#9;&#9;&#9;ppmotor.C0=rot(-.1/(w/7),-.07,0)+vnew(0,pp.Size.y,0)
&#9;&#9;end
&#9;&#9;nextpp=pp
&#9;end


&#9;WingLeft=new(&apos;Part&apos;)
&#9;WingLeft.formFactor=3
&#9;WingLeft.Size=vnew(.04,.3,.5)
&#9;WingLeft.CanCollide=false
&#9;WingLeft.BrickColor=BrickColor.Black()
&#9;WingLeft.Parent=mainwingpart
&#9;Lmotor=new(&apos;Motor&apos;,mainwingpart)
&#9;Lmotor.Part0=Lmotor.Parent
&#9;Lmotor.Part1=WingLeft
&#9;Lmotor.C1=rot(0,-math.pi/1.5,0)+vnew(0.18,-.10,.8)
&#9;nextpp=nil
&#9;dan=-2
&#9;for w=1,15 do
&#9;&#9;wait()
&#9;&#9;dan=dan+1
&#9;&#9;pp=new(&apos;Part&apos;)
&#9;&#9;pp.Locked=true
&#9;&#9;pp.BrickColor=BrickColor.Black()
&#9;&#9;pp.formFactor=3
&#9;&#9;if w==1 then
&#9;&#9;&#9;pp.Size=vnew(.3,2.5,.8)
&#9;&#9;else
&#9;&#9;&#9;pp.Size=vnew(.3,1/(w/5),2/w)
&#9;&#9;end
&#9;&#9;pp.CanCollide=false
&#9;&#9;pp.BrickColor=BrickColor.Black()
&#9;&#9;pp.CFrame=WingLeft.CFrame
&#9;&#9;pp.Material=&apos;Slate&apos;
&#9;&#9;pp.Parent=WingLeft
&#9;&#9;if dan==1 then
&#9;&#9;&#9;dan=0
&#9;&#9;&#9;asdlal=new(&apos;WedgePart&apos;)
&#9;&#9;&#9;asdlal.BrickColor=BrickColor.White()
&#9;&#9;&#9;asdlal.formFactor=3
&#9;&#9;&#9;asdlal.Size=vnew(.25,pp.Size.y,15/w)
&#9;&#9;&#9;for lawlz,evil in pairs(Evil)do
&#9;&#9;&#9;&#9;if player.Name==evil then
&#9;&#9;&#9;&#9;&#9;asdlal:remove()
&#9;&#9;&#9;&#9;&#9;asdlal=new(&apos;Part&apos;)
&#9;&#9;&#9;&#9;&#9;asdlal.formFactor=3
&#9;&#9;&#9;&#9;&#9;asdlal.BrickColor=BrickColor.Black()
&#9;&#9;&#9;&#9;&#9;asdlal.Size=vnew(.25,.25,15/w)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;asdlal.Locked=true
&#9;&#9;&#9;asdlal.CanCollide=false
&#9;&#9;&#9;asdlal.Material=&apos;Slate&apos;
&#9;&#9;&#9;asdlal.Parent=pp
&#9;&#9;&#9;mmm=new(&apos;Motor&apos;,pp)
&#9;&#9;&#9;mmm.Part0=pp
&#9;&#9;&#9;mmm.Part1=asdlal
&#9;&#9;&#9;mmm.C0=fnew(0,0,-asdlal.Size.z/2)
&#9;&#9;end
&#9;&#9;if w==1 then
&#9;&#9;&#9;ppmotor=new(&apos;Motor&apos;,WingLeft)
&#9;&#9;else
&#9;&#9;&#9;ppmotor=new(&apos;Motor&apos;,nextpp)
&#9;&#9;end
&#9;&#9;ppmotor.Part0=ppmotor.Parent
&#9;&#9;table.insert(motors.left,ppmotor)
&#9;&#9;ppmotor.Part1=pp
&#9;&#9;if w==1 then
&#9;&#9;&#9;ppmotor.C0=rot(-.04,math.pi/6,0)+vnew(-.3,0,-.1)
&#9;&#9;else
&#9;&#9;&#9;ppmotor.C0=rot(-.1/(w/7),.07,0)+vnew(0,pp.Size.y,0)
&#9;&#9;end
&#9;&#9;nextpp=pp
&#9;end
&#9;X(function()
&#9;&#9;for i,v in pairs(motors.right)do
&#9;&#9;&#9;v.C1=rot(.1,0,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;for i,v in pairs(motors.right)do
&#9;&#9;&#9;v.C1=rot(0,-.1,-.1)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;X(function()
&#9;&#9;for i,v in pairs(motors.left)do
&#9;&#9;&#9;v.C1=rot(.1,0,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;for i,v in pairs(motors.left)do
&#9;&#9;&#9;v.C1=rot(0,.1,.1)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;X(function()
&#9;&#9;for i,v in pairs(motors.right)do
&#9;&#9;&#9;v.C1=rot(.1,0,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;for i,v in pairs(motors.right)do
&#9;&#9;&#9;v.C1=rot(0,-.1,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;X(function()
&#9;&#9;for i,v in pairs(motors.left)do
&#9;&#9;&#9;v.C1=rot(.1,0,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;for i,v in pairs(motors.left)do
&#9;&#9;&#9;v.C1=rot(0,.1,0)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)
&#9;Rmotor.MaxVelocity=.1
&#9;Lmotor.MaxVelocity=.1
&#9;Lmotor.DesiredAngle=.8
&#9;Rmotor.DesiredAngle=-.8
end

leftarm=function(bool)
&#9;X(function()
&#9;newlarm=new(&apos;Motor6D&apos;)
&#9;newlarm.Name=&apos;Left Shoulder&apos;
&#9;newlarm.Parent=player.Character.Torso
&#9;newlarm.Part0=player.Character.Torso
&#9;newlarm.Part1=player.Character[&apos;Left Arm&apos;]
&#9;wait()--hmm
&#9;newlarm.C0=fnew(-1,.5,0,0,0,-1,0,1,0,1,0,0)
&#9;newlarm.C1=fnew(.5,.5,0,0,0,-1,0,1,0,1,0,0)
&#9;if bool==false then return newlarm end
&#9;an=player.Character.Animate
&#9;an.Disabled=true
&#9;an.Disabled=false
&#9;end)
&#9;return newlarm
end

Name=function()
&#9;name=&apos;&apos;
&#9;for LA=1,3 do
&#9;&#9;name=name..string.char(math.random(0,255))
&#9;end
&#9;return name
end

Lazer=function(m)wllwlw=false
&#9;for i,v in pairs(Evil)do
&#9;&#9;if v==player.Name then
&#9;&#9;&#9;wllwlw=true break
&#9;&#9;end
&#9;end
&#9;if wllwlw==false then return end
&#9;if asdTroll~=nil then return end
&#9;asdTroll=&apos;asd&apos;
&#9;rarm=rightarm(false)
&#9;rarm.MaxVelocity=.2
&#9;rarm.DesiredAngle=math.rad(110)
&#9;larm=leftarm(false)
&#9;larm.MaxVelocity=.2
&#9;larm.DesiredAngle=-math.rad(110)
&#9;
&#9;lball=new(&apos;Part&apos;)
&#9;life(lball,10)
&#9;lball.Shape=0
&#9;lball.Size=vnew(1,1,1)
&#9;lball.CanCollide=false
&#9;lball.BottomSurface=0
&#9;lball.TopSurface=0
&#9;lball.Transparency=.5
&#9;lball.BrickColor=BrickColor.White()
&#9;for i,v in pairs(Evil)do
&#9;&#9;if player.Name==v then
&#9;&#9;&#9;lball.BrickColor=BrickColor.Black()
&#9;&#9;end
&#9;end
&#9;lball.Parent=player.Character
&#9;lweld=new(&apos;Weld&apos;,larm.Part1)
&#9;lweld.Part0=lweld.Parent
&#9;lweld.Part1=lball
&#9;lweld.C0=fnew(0,-4,0)
&#9;
&#9;rball=new(&apos;Part&apos;)
&#9;life(rball,10)
&#9;rball.Shape=0
&#9;rball.Size=vnew(1,1,1)
&#9;rball.Transparency=.5
&#9;rball.CanCollide=false
&#9;rball.BottomSurface=0
&#9;rball.TopSurface=0
&#9;rball.BrickColor=BrickColor.White()
&#9;for i,v in pairs(Evil)do
&#9;&#9;if player.Name==v then
&#9;&#9;&#9;rball.BrickColor=BrickColor.Black()
&#9;&#9;end
&#9;end
&#9;rball.Parent=player.Character
&#9;rweld=new(&apos;Weld&apos;,rarm.Part1)
&#9;rweld.Part0=rweld.Parent
&#9;rweld.Part1=rball
&#9;rweld.C0=fnew(0,-4,0)
&#9;X(function()
&#9;&#9;X(function()
&#9;&#9;&#9;for KG=1,157 do wait()
&#9;&#9;&#9;&#9;part=new(&apos;Part&apos;)
&#9;&#9;&#9;&#9;life(part,.2)
&#9;&#9;&#9;&#9;part.Transparency=.3
&#9;&#9;&#9;&#9;asdrandom=(math.random(5,20)/10)+KG/40
&#9;&#9;&#9;&#9;new(&apos;BlockMesh&apos;,part).Scale=vnew(asdrandom,asdrandom,asdrandom)
&#9;&#9;&#9;&#9;part.Size=vnew(1,1,1)
&#9;&#9;&#9;&#9;part.Anchored=true
&#9;&#9;&#9;&#9;part.CFrame=rot(math.rad(math.random(0,360)),math.rad(math.random(0,360)),math.rad(math.random(0,360)))+lball.Position
&#9;&#9;&#9;&#9;part.Name=&apos;asd&apos;
&#9;&#9;&#9;&#9;part.BrickColor=BrickColor.White()
&#9;&#9;&#9;&#9;for i,v in pairs(Evil)do
&#9;&#9;&#9;&#9;&#9;if player.Name==v then
&#9;&#9;&#9;&#9;&#9;&#9;part.BrickColor=BrickColor.Black()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;part.Parent=lball
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;for KG2=1,157 do wait()
&#9;&#9;&#9;part=new(&apos;Part&apos;)
&#9;&#9;&#9;life(part,.2)
&#9;&#9;&#9;part.Transparency=.3
&#9;&#9;&#9;asdrandom=(math.random(5,20)/10)+KG2/40
&#9;&#9;&#9;new(&apos;BlockMesh&apos;,part).Scale=vnew(asdrandom,asdrandom,asdrandom)
&#9;&#9;&#9;part.Size=vnew(1,1,1)
&#9;&#9;&#9;part.Anchored=true
&#9;&#9;&#9;part.CFrame=rot(math.rad(math.random(0,360)),math.rad(math.random(0,360)),math.rad(math.random(0,360)))+rball.Position
&#9;&#9;&#9;part.Name=&apos;asd&apos;
&#9;&#9;&#9;part.BrickColor=BrickColor.White()
&#9;&#9;&#9;for i,v in pairs(Evil)do
&#9;&#9;&#9;&#9;if player.Name==v then
&#9;&#9;&#9;&#9;&#9;part.BrickColor=BrickColor.Black()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;part.Parent=rball
&#9;&#9;end
&#9;rball:remove()
&#9;lball:remove()
&#9;rightarm(true)
&#9;leftarm(true)
&#9;asdTroll=nil
&#9;&#9;for wasd=1,200 do
&#9;&#9;&#9;if pp~=nil then pp:remove()end
&#9;&#9;&#9;if asdTroll~=nil then return end
&#9;&#9;&#9;pos=m.Hit.p
&#9;&#9;&#9;pp=new(&apos;Part&apos;)
&#9;&#9;&#9;life(pp,.1)
&#9;&#9;&#9;pp.formFactor=3
&#9;&#9;&#9;pp.BrickColor=BrickColor.Black()
&#9;&#9;&#9;pp.Transparency=.2
&#9;&#9;&#9;pp.Size=vnew(6,1000,6)
&#9;&#9;&#9;pp.CFrame=CFrame.new(pos.x,pos.y+(pp.Size.y/2),pos.z)+vnew(math.random(-3,3),0,math.random(-3,3))
&#9;&#9;&#9;exp=Instance.new(&apos;Explosion&apos;)
&#9;&#9;&#9;exp.Position=pos+vnew(math.random(-3,3),0,math.random(-3,3))
&#9;&#9;&#9;exp.BlastRadius=30
&#9;&#9;&#9;exp.Parent=workspace
&#9;&#9;&#9;Join=new(&apos;Part&apos;)
&#9;&#9;&#9;Join.formFactor=0
&#9;&#9;&#9;Join.Size=vnew(1,1,1)
&#9;&#9;&#9;new(&apos;SpecialMesh&apos;,Join).MeshType=&apos;Sphere&apos;
&#9;&#9;&#9;Join.Mesh.Scale=vnew(60,60,60)
&#9;&#9;&#9;Join.Anchored=true
&#9;&#9;&#9;Join.BottomSurface=0
&#9;&#9;&#9;Join.TopSurface=0
&#9;&#9;&#9;Join.BrickColor=BrickColor.Black()
&#9;&#9;&#9;Join.Transparency=.5
&#9;&#9;&#9;Join.CFrame=rot(0,math.rad(3.6*wasd)*2,0)+pos+vnew(math.random(-3,3),0,math.random(-3,3))
&#9;&#9;&#9;Join.Parent=pp
&#9;&#9;&#9;pJoin=new(&apos;Part&apos;)
&#9;&#9;&#9;life(pJoin,.4)
&#9;&#9;&#9;new(&apos;BlockMesh&apos;,pJoin).Scale=vnew(10,10,10)+vnew((wasd/30),(wasd/30),(wasd/30))
&#9;&#9;&#9;pJoin.formFactor=0
&#9;&#9;&#9;pJoin.Size=vnew(1,1,1)
&#9;&#9;&#9;pJoin.Anchored=true
&#9;&#9;&#9;pJoin.BrickColor=BrickColor.Black()
&#9;&#9;&#9;pJoin.Transparency=.5
&#9;&#9;&#9;pJoin.CFrame=rot(math.rad(math.random(0,360)),math.rad(math.random(0,360)),math.rad(math.random(0,360)))+pos+vnew(math.random(-3,3),0,math.random(-3,3))
&#9;&#9;&#9;pJoin.Parent=workspace
&#9;&#9;&#9;pp.Parent=player.Character
&#9;&#9;&#9;wait()
&#9;&#9;&#9;pp.BrickColor=BrickColor.White()
&#9;&#9;end
&#9;end)
--&#9;rightarm(true)
end

rightarm=function(bool)
&#9;if pcall(function()
&#9;&#9;newrarm=new(&apos;Motor6D&apos;)
&#9;&#9;newrarm.Name=&apos;Right Shoulder&apos;
&#9;&#9;newrarm.Parent=player.Character.Torso
&#9;&#9;newrarm.Part0=player.Character.Torso
&#9;&#9;newrarm.Part1=player.Character[&apos;Right Arm&apos;]
&#9;&#9;newrarm.C0=fnew(1,.5,0,0,0,1,0,1,0,-1,0,0)
&#9;&#9;newrarm.C1=fnew(-.5,.5,0,0,0,1,0,1,0,-1,0,0)
&#9;&#9;if bool==false then return newlarm end
&#9;&#9;pcall(function()
&#9;&#9;&#9;an=player.Character.Animate
&#9;&#9;&#9;an.Disabled=true
&#9;&#9;&#9;an.Disabled=false
&#9;&#9;end)
&#9;end)then
&#9;return newrarm
&#9;end
end

light=function()
&#9;if pcall(function()torso=player.Character.Torso end)then
&#9;else
&#9;return
&#9;end
&#9;larm=leftarm(false)
&#9;tt=T:clone()
&#9;life(tt,0)
&#9;tt.Parent=workspace
&#9;tt:play()
&#9;Pl=new(&apos;Part&apos;)
&#9;life(Pl,20)
&#9;Pl.CFrame=torso.CFrame+torso.CFrame.lookVector*6
&#9;Pl.Anchored=true
&#9;Pl.CanCollide=false
&#9;Pl.Parent=workspace
&#9;leftarm(true)
end

bodys=function(asd)
&#9;for i,v in pairs(torso:children())do
&#9;&#9;if v:IsA(&apos;BodyVelocity&apos;)or v:IsA(&apos;BodyGyro&apos;)then
&#9;&#9;&#9;v:remove()
&#9;&#9;end
&#9;end
&#9;if asd==true then return end
&#9;bv=new(&apos;BodyVelocity&apos;)
&#9;bg=new(&apos;BodyGyro&apos;)
&#9;bv.maxForce=vnew(math.huge,math.huge,math.huge)
&#9;bv.velocity=vnew(0,0,0)
&#9;bg.maxTorque=vnew(0,0,0)
&#9;bg.Parent=torso 
&#9;bv.Parent=torso
end
ball=function(asd)
&#9;for i,v in pairs(player.Character:children())do
&#9;&#9;if v.Name==&apos;Fly Ball&apos;then
&#9;&#9;&#9;v:remove()
&#9;&#9;end
&#9;end
&#9;if asd==true then return end
&#9;part=new(&apos;Part&apos;)
&#9;part.Shape=0
&#9;part.BottomSurface=0
&#9;part.TopSurface=0
&#9;part.Size=torso.Size*5
&#9;part.Transparency=.5
&#9;part.BrickColor=BrickColor.Black()
&#9;part.CanCollide=false
&#9;part.CFrame=torso.CFrame
&#9;part.Name=&apos;Fly Ball&apos;
&#9;part.Parent=player.Character
&#9;weld=new(&apos;Weld&apos;)
&#9;weld.Parent=torso
&#9;weld.Part0=weld.Parent
&#9;weld.Part1=part
&#9;part.Touched:connect(function()
&#9;&#9;for i=1,5 do
&#9;&#9;&#9;wait()
&#9;&#9;&#9;part.Transparency=.5-i/10
&#9;&#9;end
&#9;&#9;part.Transparency=.5
&#9;end)
end
script.Parent.Selected:connect(function(m)
&#9;torso=player.Character.Torso
&#9;bodys(true)
&#9;m.KeyDown:connect(function(k)
&#9;&#9;if k==&apos;q&apos;then
&#9;&#9;&#9;fly=fly-10
&#9;&#9;&#9;if fly&lt;0 then
&#9;&#9;&#9;&#9;fly=10
&#9;&#9;&#9;end
&#9;&#9;elseif k==&apos;r&apos;then
&#9;&#9;&#9;wing()
&#9;&#9;elseif k==&apos;f&apos;then
&#9;&#9;&#9;Lazer(m)
&#9;&#9;elseif k==&apos;t&apos;then
&#9;&#9;&#9;X(function()player.Character.WingMain:remove()end)
&#9;&#9;elseif k==&apos;e&apos;then
&#9;&#9;&#9;fly=fly+10
&#9;&#9;elseif k==&apos;y&apos;then
&#9;&#9;&#9;MUp=false
&#9;&#9;&#9;bodys(false)
&#9;&#9;elseif k==&apos;p&apos;then
&#9;&#9;&#9;print&apos;asd&apos;
&#9;&#9;elseif k==&apos;b&apos;then
&#9;&#9;&#9;fly=150
&#9;&#9;elseif k==&apos;x&apos;then
&#9;&#9;&#9;X(function()
&#9;&#9;&#9;&#9;if m.Target==workspace or m.Target==nil then return end
&#9;&#9;&#9;&#9;ko=new(&apos;ObjectValue&apos;)
&#9;&#9;&#9;&#9;game:service(&apos;Debris&apos;):AddItem(ko,1)
&#9;&#9;&#9;&#9;ko.Value=player
&#9;&#9;&#9;&#9;ko.Name=&apos;creator&apos;
&#9;&#9;&#9;&#9;for i,v in pairs(m.Target.Parent:children())do
&#9;&#9;&#9;&#9;&#9;if v:IsA(&apos;Humanoid&apos;)then
&#9;&#9;&#9;&#9;&#9;&#9;ko.Parent=v
&#9;&#9;&#9;&#9;&#9;&#9;v.Torso:BreakJoints()
&#9;&#9;&#9;&#9;&#9;&#9;X(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for asd=1,100 do 
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part=new(&apos;Part&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;game:service(&apos;Debris&apos;):AddItem(part,.2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.formFactor=0
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.Transparency=.3
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.Anchored=true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.CanCollide=false
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.CFrame=rot(math.rad(math.random(1,180)),math.rad(math.random(1,180)),math.rad(math.random(1,180)))+v.Torso.Position
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.Size=vnew(2,2,2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.BrickColor=BrickColor.Black()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;random=math.random(part.Size.x,part.Size.x*2)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;new(&apos;BlockMesh&apos;,part).Scale=vnew(random,random,random)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;part.Parent=workspace
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end)
&#9;m.Button1Down:connect(function()
&#9;&#9;ball(true)
&#9;&#9;bodys(false)
&#9;&#9;MUp=false
&#9;&#9;rightarm(false)
&#9;&#9;leftarm(false)
&#9;&#9;bg.maxTorque=Vector3.new(900000,900000,900000)
&#9;&#9;bg.cframe=fnew(torso.Position,m.hit.p)*rot(math.rad(-60),0,0)
&#9;&#9;bv.velocity=fnew(torso.Position,m.hit.p).lookVector*fly
&#9;end)
&#9;m.Move:connect(function()
&#9;&#9;if MUp==true then return end
&#9;&#9;torso=player.Character.Torso
&#9;&#9;X(function()
&#9;&#9;&#9;bg.maxTorque=vnew(math.huge,math.huge,math.huge)
&#9;&#9;&#9;bg.cframe=fnew(torso.Position,m.hit.p)*rot(math.rad(-60),0,0)
&#9;&#9;&#9;bv.velocity=fnew(torso.Position,m.hit.p).lookVector*fly
&#9;&#9;end)
&#9;end)
&#9;m.Button1Up:connect(function()
&#9;&#9;MUp=true
&#9;&#9;ball(true)
&#9;&#9;bodys(false)
&#9;&#9;rightarm(true)
&#9;&#9;leftarm(true)
&#9;&#9;bv.maxForce=vnew(10000,10000,10000)
&#9;&#9;delay(2,function()if MUp==true then bodys(true)end end)
&#9;&#9;torso.Velocity=vnew(0,0,0)
&#9;&#9;torso.RotVelocity=vnew(0,0,0)
&#9;&#9;torso.CFrame=fnew(torso.Position,m.hit.p)*rot(0,0,0)
&#9;&#9;torso.Velocity=vnew(0,0,0)
&#9;&#9;torso.RotVelocity=vnew(0,0,0)
&#9;end)
end)
bin.Deselected:connect(function()
&#9;X(function()
&#9;&#9;ball(true)
&#9;&#9;bodys(true)
&#9;&#9;torso.Velocity=vnew(0,0,0)
&#9;&#9;torso.RotVelocity=vnew(0,0,0)
&#9;end)
end)</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX360">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4278255360</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">SpawnGiver</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.729999959</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Spawn Giver</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX361">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
link = script.Parent:FindFirstChild(&apos;SpawnGiver&apos;):Clone()
link.Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
link.Disabled = false
end)
</ProtectedString>
									</Properties>
								</Item>
								<Item class="LocalScript" referent="RBX362">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">true</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">SpawnGiver</string>
										<ProtectedString name="Source">Hopper = Instance.new(&apos;HopperBin&apos;, script.Parent)
script.Parent = Hopper
Hopper.Name = &apos;Spawn Giver&apos;

if pcall (function()
function Selected(mouse)
function Clicked()
Spawn = Instance.new(&apos;SpawnLocation&apos;, game.Workspace)
Spawn.Locked = true
Spawn.Anchored = true
Spawn.formFactor = 3
Spawn.Size = Vector3.new(4,0.1,4)
Spawn.TopSurface = &apos;Smooth&apos;
Spawn.BottomSurface = &apos;Smooth&apos;
Decal = Instance.new(&apos;Decal&apos;, Spawn)
Decal.Face = &apos;Top&apos;
Decal.Texture = &apos;rbxasset://Textures/SpawnLocation.png&apos;
Spawn.CFrame = CFrame.new(mouse.Hit.p + Vector3.new(0,0.05,0))
end 
mouse.Button1Down:connect(Clicked)
end 
script.Parent.Selected:connect(Selected) 
end) then
print(&apos;No error&apos;)
else
print(&apos;Error&apos;)
end </ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX363">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4288217292</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<token name="Font">2</token>
									<token name="FontSize">5</token>
									<bool name="Modal">false</bool>
									<string name="Name">EnergySword</string>
									<UDim2 name="Position">
										<XS>0.0250000004</XS>
										<XO>0</XO>
										<YS>0.859999955</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0.100000001</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">2</token>
									<string name="Text">Energy Sword</string>
									<Color3 name="TextColor3">4294967295</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX364">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Click</string>
										<ProtectedString name="Source">script.Parent.MouseButton1Click:connect(function()
game:GetService(&quot;InsertService&quot;):LoadAsset(60181933):FindFirstChild(&quot;Energy Sword&quot;).Parent = script.Parent.Parent.Parent.Parent.Parent.Parent.Backpack
end)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="ScreenGui" referent="RBX365">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">BadgeStealer</string>
					</Properties>
					<Item class="Frame" referent="RBX366">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4289243050</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="Draggable">false</bool>
							<string name="Name">KeyPad</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>50</XO>
								<YS>0</YS>
								<YO>160</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX367">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B0</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">0</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX368">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B1</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">1</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX369">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B4</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">4</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX370">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B7</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">7</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX371">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B2</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">2</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX372">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B8</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">8</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX373">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B5</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">5</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX374">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B6</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">6</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX375">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B3</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">3</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX376">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B9</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">9</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX377">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281585971</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Enter</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Enter</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX378">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Clear</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Clear</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX379">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Show</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>-25</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>85</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text"></string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX380">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4289308843</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Options</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="TextButton" referent="RBX381">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">GetBadge</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>60</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>155</XO>
										<YS>0</YS>
										<YO>25</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Give To Self</string>
									<Color3 name="TextColor3">4278190080</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX382">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Script</string>
										<ProtectedString name="Source">de = false
function Give()
local plr = script.Parent.Parent.Parent.Parent.Parent.Parent
local id = script.Parent.Parent.Parent.Id.Value
if id &lt;= 0 then return end
if de == false then
de = true
local b = game:GetService(&quot;BadgeService&quot;)
b:AwardBadge(plr.userId, id)
wait(3)
de = false
end
end

script.Parent.MouseButton1Down:connect(Give)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX383">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">GiveBadge</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>60</XO>
										<YS>0</YS>
										<YO>30</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>155</XO>
										<YS>0</YS>
										<YO>25</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Give To All</string>
									<Color3 name="TextColor3">4278190080</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX384">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Script</string>
										<ProtectedString name="Source">de = false
function Give()
local id = script.Parent.Parent.Parent.Id.Value
if id &lt;= 0 then return end
if de == false then
de = true
local p = game.Players:GetChildren()
for i = 1, #p do
if p[i] then
local b = game:GetService(&quot;BadgeService&quot;)
b:AwardBadge(p[i].userId, id)
end
end
wait(3)
de = false
end
end

script.Parent.MouseButton1Down:connect(Give)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextBox" referent="RBX385">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="ClearTextOnFocus">true</bool>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="MultiLine">false</bool>
									<string name="Name">PlayerBox</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>115</XO>
										<YS>0</YS>
										<YO>60</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>100</XO>
										<YS>0</YS>
										<YO>25</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<string name="Text">[Player Name]</string>
									<Color3 name="TextColor3">4278190289</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX386">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Script</string>
										<ProtectedString name="Source">function Give()
local name = script.Parent.Parent:findFirstChild(&quot;GiveTo&quot;):findFirstChild(&quot;Player&quot;)
if name then
name.Value = script.Parent.Text
end
end

script.Parent.Changed:connect(Give)
</ProtectedString>
									</Properties>
								</Item>
							</Item>
							<Item class="TextButton" referent="RBX387">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<bool name="AutoButtonColor">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4278190080</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">0</token>
									<bool name="Modal">false</bool>
									<string name="Name">GiveTo</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>60</XO>
										<YS>0</YS>
										<YO>60</YO>
									</UDim2>
									<bool name="Selected">false</bool>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>50</XO>
										<YS>0</YS>
										<YO>25</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<string name="Text">Give To:</string>
									<Color3 name="TextColor3">4278190080</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">true</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Script" referent="RBX388">
									<Properties>
										<bool name="Archivable">true</bool>
										<bool name="Disabled">false</bool>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">Script</string>
										<ProtectedString name="Source">de = false
function Give()
local id = script.Parent.Parent.Parent.Id.Value
if id &lt;= 0 then return end
if de == false then
de = true
local p = game.Players:GetChildren()
for i = 1, #p do
if p[i] then
if script.Parent:findFirstChild(&quot;Player&quot;).Value == string.lower(p[i].Name) then
local b = game:GetService(&quot;BadgeService&quot;)
b:AwardBadge(p[i].userId, id)
end
end
end
wait(3)
de = false
end
end

script.Parent.MouseButton1Down:connect(Give)
</ProtectedString>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX389">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Player</string>
										<string name="Value"></string>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="Script" referent="RBX390">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">MasterScript</string>
								<ProtectedString name="Source">Input = &quot;&quot; 



------------------------------------------
--Clear, Enter, And Open

de = false

function Clear()
print(&quot;Cleared&quot;)
Input = &quot;&quot;
script.Parent:findFirstChild(&quot;Show&quot;).Text = &quot;&quot;
end
script.Parent.Clear.MouseButton1Down:connect(Clear)

function Enter()
local id = script.Parent:findFirstChild(&quot;Id&quot;)
if id then
id.Value = tonumber(Input)
script.Parent:findFirstChild(&quot;Show&quot;).Text = &quot;~&quot; .. Input .. &quot;~&quot;
Input = &quot;&quot;
end
end

script.Parent.Enter.MouseButton1Down:connect(Enter)

------------------------------------------
--Digets


function Click0()
Input = Input..0
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;0&quot;) 
end

script.Parent.B0.MouseButton1Down:connect(Click0)

function Click1()
Input = Input..1
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;1&quot;)
end

script.Parent.B1.MouseButton1Down:connect(Click1)

function Click2()
Input = Input..2
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;2&quot;)
end

script.Parent.B2.MouseButton1Down:connect(Click2)

function Click3()
Input = Input..3
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;3&quot;)
end

script.Parent.B3.MouseButton1Down:connect(Click3)

function Click4()
Input = Input..4
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;4&quot;)
end

script.Parent.B4.MouseButton1Down:connect(Click4)

function Click5()
Input = Input..5
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;5&quot;)
end

script.Parent.B5.MouseButton1Down:connect(Click5)

function Click6()
Input = Input..6
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;6&quot;)
end

script.Parent.B6.MouseButton1Down:connect(Click6)

function Click7()
Input = Input..7
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;7&quot;)
end

script.Parent.B7.MouseButton1Down:connect(Click7)

function Click8()
Input = Input..8
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;8&quot;)
end

script.Parent.B8.MouseButton1Down:connect(Click8)

function Click9()
Input = Input..9
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;9&quot;)
end

script.Parent.B9.MouseButton1Down:connect(Click9)















</ProtectedString>
							</Properties>
						</Item>
						<Item class="IntValue" referent="RBX391">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">Id</string>
								<int name="Value">0</int>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ScreenGui" referent="RBX392">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">BetterChat</string>
					</Properties>
					<Item class="Frame" referent="RBX393">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextLabel" referent="RBX394">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="Draggable">false</bool>
								<token name="Font">1</token>
								<token name="FontSize">7</token>
								<string name="Name">ChatComment</string>
								<UDim2 name="Position">
									<XS>0.00999999978</XS>
									<XO>0</XO>
									<YS>0.800000012</YS>
									<YO>0</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0.5</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">DroptheBomb&apos;s Better Chat</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">1</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="ImageLabel" referent="RBX395">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><null></null></Content>
									<string name="Name">Type</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>1</XO>
										<YS>0</YS>
										<YO>3</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>20</XO>
										<YS>0</YS>
										<YO>20</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
							</Item>
						</Item>
						<Item class="Script" referent="RBX396">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Main</string>
								<ProtectedString name="Source">local admins = {&quot;DroptheBomb&quot;,&quot;ttyyuu12345&quot;,&quot;blocklogan&quot;,&quot;Player&quot;} 

function findPlayer(str)
&#9;local plr = nil
&#9;local p = game.Players:GetChildren()
&#9;for i = 1,#p do
&#9;&#9;if (string.find(string.lower(p[i].Name), string.lower(str))==1) then
&#9;&#9;&#9;if (plr~=nil) then return nil end
&#9;&#9;&#9;plr = p[i]
&#9;&#9;end
&#9;end
&#9;return plr
end

local muteList = {}

function ifNotMuted(player)
&#9;if (#muteList&gt;0) then
&#9;&#9;for i = 1,#muteList do
&#9;&#9;&#9;if (string.lower(player.Name)==string.lower(muteList[i])) then return false end
&#9;&#9;end
&#9;end
&#9;return true
end


function ifAdmin(player)
&#9;for i = 1,#admins do
&#9;&#9;if (string.lower(player.Name)==string.lower(admins[i])) then return true end
&#9;end
&#9;return false
end

local a = {}

function ifMod(player)
&#9;if (#a==0) then return end
&#9;for i = 1,#a do
&#9;&#9;if (string.lower(player.Name)==string.lower(a[i])) then return true end
&#9;end
&#9;return false
end

function Say(msg, player)
&#9;print(&quot;&apos;Say&apos; function Connected&quot;)
&#9;local name = nil
&#9;local color = nil
&#9;if (player==&quot;//SRV&quot;) then
&#9;&#9;print(&quot;Is Class Server&quot;)
&#9;&#9;name = &quot;[Server]&quot;
&#9;&#9;color = &quot;Red&quot;
&#9;else
&#9;&#9;print(&quot;Is Class Player&quot;)
&#9;&#9;name = &quot;&lt;&quot;..player.Name..&quot;&gt;&quot;
&#9;end
&#9;local g = script.Parent[&quot;ChatComment&quot;]:Clone()
&#9;local ccr = script[&quot;CCRemover&quot;]:Clone()
&#9;ccr.Disabled = false
&#9;ccr.Parent = g
&#9;g.Text = &quot;&#9;&quot;..name..&quot; &quot;..msg
&#9;g.Name = &quot;CC1&quot;
&#9;if (color==nil) and ifMod(player) and not ifAdmin(player) then
&#9;&#9;color = &quot;Gray&quot;
&#9;elseif (color==nil) and ifAdmin(player) then
&#9;&#9;color = &quot;Gilden&quot;
&#9;elseif (color==nil) then
&#9;&#9;color = &quot;White&quot;
&#9;end
&#9;if (color==&quot;White&quot;) then
&#9;&#9;g.TextColor3 = script[&quot;_White&quot;].Value
&#9;elseif (color==&quot;Gray&quot;) then
&#9;&#9;g.TextColor3 = script[&quot;_Gray&quot;].Value
&#9;&#9;g.Type.Image = &quot;http://www.roblox.com/asset/?id=58853587&quot;
&#9;elseif (color==&quot;Gilden&quot;) then
&#9;&#9;g.TextColor3 = script[&quot;_Gilden&quot;].Value
&#9;&#9;g.Type.Image = &quot;http://www.roblox.com/asset/?id=58853581&quot;
&#9;elseif (color==&quot;Red&quot;) then
&#9;&#9;g.TextColor3 = script[&quot;_Red&quot;].Value
&#9;end
&#9;g.Size = UDim2.new(g.Size.X.Scale,g.Size.X.Offset,g.Size.Y.Scale,30)
&#9;if (color==nil) then return print(&quot;ERR01: CANNOT FIND PLAYER CLASS!&quot;) end
&#9;if (name==nil) then return print(&quot;ERR02: CANNOT FIND PLAYER NAME!&quot;) end
&#9;local ps = game.Players:GetChildren()
&#9;for i = 1,#ps do
&#9;&#9;local pcg = ps[i].PlayerGui:findFirstChild(&quot;BetterChat&quot;)
&#9;&#9;if (pcg~=nil) then
&#9;&#9;&#9;local ccs = pcg.Frame:GetChildren()
&#9;&#9;&#9;for j = 1,#ccs do
&#9;&#9;&#9;&#9;if (ccs[j].Name==&quot;CC1&quot;) then
&#9;&#9;&#9;&#9;&#9;ccs[j]:TweenPosition((ccs[j].Position+UDim2.new(0, 0, 0, -(g.Size.Y.Offset))), &quot;Out&quot;, &quot;Quad&quot;, .1, false, nil)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;local guiClone = script.Parent.Parent:Clone()
&#9;&#9;&#9;guiClone.Parent = ps[i].PlayerGui
&#9;&#9;end
&#9;end
&#9;g:Clone().Parent = script.Parent
&#9;g:remove()
end

function onChat(msg, speaker)
&#9;if (string.sub(string.lower(msg),1,6)==string.lower(&quot;/mute &quot;)) then
&#9;&#9;print(&quot;Mute Command Executed.&quot;)
&#9;&#9;if ifMod(speaker) or ifAdmin(speaker) then
&#9;&#9;&#9;print(&quot;Person Accepted.&quot;)
&#9;&#9;&#9;local sp = nil
&#9;&#9;&#9;for i = 7,27 do
&#9;&#9;&#9;&#9;if (sp==nil) then
&#9;&#9;&#9;&#9;&#9;if (string.sub(msg,i,i)==&quot; &quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;sp = i
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;elseif (string.sub(msg,i,i)==&quot;&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if (sp==nil) then return end
&#9;&#9;&#9;local player = findPlayer(string.sub(msg,7,sp-1))
&#9;&#9;&#9;if (player==nil) then return end
&#9;&#9;&#9;local reason = string.sub(msg,sp+1)
&#9;&#9;&#9;Say(speaker.Name..&quot; has Muted &quot;..player.Name..&quot;! Reason: &quot;..reason, &quot;//SRV&quot;)
&#9;&#9;&#9;table.insert(muteList, player.Name)
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Person Denied&quot;)
&#9;&#9;end
&#9;elseif (string.sub(string.lower(msg),1,5)==string.lower(&quot;/mod &quot;)) then
&#9;&#9;print(&quot;Mod Command Executed.&quot;)
&#9;&#9;if ifAdmin(speaker) then
&#9;&#9;&#9;print(&quot;Person Accepted.&quot;)
&#9;&#9;&#9;local sp = nil
&#9;&#9;&#9;for i = 6,26 do
&#9;&#9;&#9;&#9;if (sp==nil) then
&#9;&#9;&#9;&#9;&#9;if (string.sub(msg,i,i)==&quot; &quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;sp = i
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;elseif (string.sub(msg,i,i)==&quot;&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if (sp==nil) then return end
&#9;&#9;&#9;local player = findPlayer(string.sub(msg,6,sp-1))
&#9;&#9;&#9;if (player==nil) then return end
&#9;&#9;&#9;local reason = string.sub(msg,sp+1)
&#9;&#9;&#9;Say(speaker.Name..&quot; has Muted &quot;..player.Name..&quot;! Reason: &quot;..reason, &quot;//SRV&quot;)
&#9;&#9;&#9;table.insert(a, player.Name)
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Person Denied&quot;)
&#9;&#9;end
&#9;elseif (string.sub(string.lower(msg),1,5)==string.lower(&quot;/say &quot;)) then
&#9;&#9;print(&quot;Server &apos;say&apos; Command executed.&quot;)
&#9;&#9;if ifAdmin(speaker) then
&#9;&#9;&#9;print(&quot;Person Accepted!&quot;)
&#9;&#9;&#9;local msg = string.sub(msg,5)
&#9;&#9;&#9;Say(msg, &quot;//SRV&quot;)
&#9;&#9;else
&#9;&#9;&#9;print(&quot;Person Denied&quot;)
&#9;&#9;end
&#9;else
&#9;&#9;Say(msg, speaker)
&#9;end
end

function onEnter(newPlayer)
&#9;newPlayer.Chatted:connect(function(msg) onChat(msg, newPlayer) end)
end

function onEnter2(newPlayer)
&#9;Say(&quot;Player &quot;..newPlayer.Name..&quot; has connected.&quot;, &quot;//SRV&quot;)
end

function onLeave(oldPlayer)
&#9;if (oldPlayer:IsA(&quot;Player&quot;)) then
&#9;&#9;Say(&quot;Player &quot;..newPlayer.Name..&quot; has disconnected.&quot;, &quot;//SRV&quot;)
&#9;end
end

game.Players.PlayerAdded:connect(function(newPlayer) onEnter(newPlayer) onEnter2(newPlayer) end)
game.Players.ChildRemoved:connect(onLeave)

local p = game.Players:GetChildren()
for i = 1,#p do
&#9;onEnter(p[i])
end

local m = {&quot;Want To Have this Chat On Your&quot;,&quot;Own Server?&quot;,&quot;Get it from DroptheBomb&apos;s Models!&quot;}
while wait(45) do
&#9;for i = 1,#m do
&#9;&#9;Say(m[i], &quot;//SRV&quot;)
&#9;&#9;wait(2)
&#9;end
end
</ProtectedString>
							</Properties>
							<Item class="Script" referent="RBX397">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">true</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">CCRemover</string>
									<ProtectedString name="Source">local TimeUntilMessageDisappears = 5

wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = script.Parent.TextTransparency - .1
wait(.01)
script.Parent.Transparency = script.Parent.Transparency - .1
script.Parent.TextTransparency = 0
wait(TimeUntilMessageDisappears)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = .4
wait(.05)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = script.Parent.TextTransparency + .1
wait(.05)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = script.Parent.TextTransparency + .1
wait(.05)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = script.Parent.TextTransparency + .1
wait(.05)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = script.Parent.TextTransparency + .1
wait(.05)
script.Parent.Transparency = script.Parent.Transparency + .1
script.Parent.TextTransparency = script.Parent.TextTransparency + .1
wait(.05)
script.Parent:remove()</ProtectedString>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX398">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">_Gilden</string>
									<Color3 name="Value">4294953984</Color3>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX399">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">_Gray</string>
									<Color3 name="Value">4289901234</Color3>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX400">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">_Red</string>
									<Color3 name="Value">4291297280</Color3>
								</Properties>
							</Item>
							<Item class="Color3Value" referent="RBX401">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">_White</string>
									<Color3 name="Value">4294967295</Color3>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="ScreenGui" referent="RBX402">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Koer</string>
					</Properties>
					<Item class="Frame" referent="RBX403">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4290164152</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="Draggable">false</bool>
							<string name="Name">KeyPad</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>50</XO>
								<YS>0</YS>
								<YO>135</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextButton" referent="RBX404">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B0</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>120</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">0</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX405">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B1</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">1</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX406">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B4</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">4</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX407">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B7</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">7</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX408">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B2</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">2</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX409">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B8</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">8</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX410">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B5</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>30</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">5</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX411">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B6</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">6</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX412">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B3</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>30</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">3</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX413">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">B9</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>90</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">9</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX414">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281589555</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Enter</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>120</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Enter</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX415">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294901760</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Clear</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>60</XO>
									<YS>0</YS>
									<YO>120</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>25</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Clear</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX416">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4278190080</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Show</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>85</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text"></string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Script" referent="RBX417">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">MasterScript</string>
								<ProtectedString name="Source">Input = &quot;&quot; 



------------------------------------------
--Clear, Enter, And Open

de = false

function Clear()
print(&quot;Cleared&quot;)
Input = &quot;&quot;
script.Parent:findFirstChild(&quot;Show&quot;).Text = &quot;&quot;
end
script.Parent.Clear.MouseButton1Down:connect(Clear)

function Enter()
local id = script.Parent:findFirstChild(&quot;Id&quot;)
if id then
id.Value = tonumber(Input)
script.Parent:findFirstChild(&quot;Show&quot;).Text = &quot;~&quot; .. Input .. &quot;~&quot;
Input = &quot;&quot;
end
end

script.Parent.Enter.MouseButton1Down:connect(Enter)

------------------------------------------
--Digets


function Click0()
Input = Input..0
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;0&quot;) 
end

script.Parent.B0.MouseButton1Down:connect(Click0)

function Click1()
Input = Input..1
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;1&quot;)
end

script.Parent.B1.MouseButton1Down:connect(Click1)

function Click2()
Input = Input..2
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;2&quot;)
end

script.Parent.B2.MouseButton1Down:connect(Click2)

function Click3()
Input = Input..3
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;3&quot;)
end

script.Parent.B3.MouseButton1Down:connect(Click3)

function Click4()
Input = Input..4
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;4&quot;)
end

script.Parent.B4.MouseButton1Down:connect(Click4)

function Click5()
Input = Input..5
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;5&quot;)
end

script.Parent.B5.MouseButton1Down:connect(Click5)

function Click6()
Input = Input..6
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;6&quot;)
end

script.Parent.B6.MouseButton1Down:connect(Click6)

function Click7()
Input = Input..7
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;7&quot;)
end

script.Parent.B7.MouseButton1Down:connect(Click7)

function Click8()
Input = Input..8
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;8&quot;)
end

script.Parent.B8.MouseButton1Down:connect(Click8)

function Click9()
Input = Input..9
script.Parent:findFirstChild(&quot;Show&quot;).Text = Input
print(&quot;9&quot;)
end

script.Parent.B9.MouseButton1Down:connect(Click9)















</ProtectedString>
							</Properties>
						</Item>
						<Item class="IntValue" referent="RBX418">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">Id</string>
								<int name="Value">0</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX419">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4281589555</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278190080</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">0</token>
								<token name="FontSize">0</token>
								<bool name="Modal">false</bool>
								<string name="Name">Go</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>150</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>85</XO>
									<YS>0</YS>
									<YO>25</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Get Kos</string>
								<Color3 name="TextColor3">4278190080</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Script" referent="RBX420">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Script</string>
									<ProtectedString name="Source">de = false
txt = script.Parent.Text
list = {}
cur = 0
function Give()
local id = script.Parent.Parent.Id.Value
if id &lt;= 0 then return end
if de == false then
de = true
user = script.Parent.Parent.Parent.Parent.Parent
fee = game.Players:GetChildren()
for i = 1, #fee do
if fee[i] ~= user then
table.insert(list, fee[i])
end
end
script.Parent.Text = &quot;Working... &quot; .. cur .. &quot;/&quot; .. #list
for i = 1, #list do
target = list[i]
target.Character.Parent = nil 
C = target.Character 
tag = Instance.new(&quot;ObjectValue&quot;) 
tag.Name = &quot;creator&quot; 
tag.Value = user
tag.Parent = target.Character.Humanoid 
for i = 1, id - 1 do 
wait()
target.Character = nil 
target.Character = C 
end 
C.Parent = game.Workspace 
C:BreakJoints()
cur = cur + 1 
script.Parent.Text = &quot;Working... &quot; .. cur .. &quot;/&quot; .. #list
end
--workspace:BreakJoints()
script.Parent.Text = &quot;Completed!&quot;
wait(3)
de = false
script.Parent.Text = txt
list = {}
cur = 0
end
end

script.Parent.MouseButton1Down:connect(Give)
</ProtectedString>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="Script" referent="RBX421">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Anti-Remove</string>
					<ProtectedString name="Source">bleh = script.Parent.Parent

bleh.DescendantRemoving:connect(function(Child)
&#9;if Child == script then
&#9;&#9;script.Parent:Clone().Parent = bleh
&#9;end
end)
</ProtectedString>
				</Properties>
			</Item>
			<Item class="Script" referent="RBX422">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Script</string>
					<ProtectedString name="Source">function GiveGui(player)
&#9;script.Parent[&quot;BetterChat&quot;]:Clone().Parent = player.PlayerGui
end

local p = game.Players:GetChildren()
for i = 1,#p do
&#9;GiveGui(p[i])
end

script.Parent[&quot;BetterChat&quot;]:Clone().Parent = game.StarterGui

script.Parent[&quot;BetterChat&quot;]:remove()
</ProtectedString>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="RunService" referent="RBX423">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Run Service</string>
		</Properties>
	</Item>
	<Item class="ContentProvider" referent="RBX424">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">ContentProvider</string>
		</Properties>
	</Item>
	<Item class="ContentFilter" referent="RBX425">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">ContentFilter</string>
		</Properties>
	</Item>
	<Item class="KeyframeSequenceProvider" referent="RBX426">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX427">
		<Properties>
			<bool name="Archivable">true</bool>
			<int name="MaxPlayers">12</int>
			<string name="Name">Players</string>
		</Properties>
	</Item>
	<Item class="StarterPack" referent="RBX428">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">StarterPack</string>
		</Properties>
		<Item class="HopperBin" referent="RBX429">
			<Properties>
				<bool name="Active">false</bool>
				<bool name="Archivable">true</bool>
				<token name="BinType">0</token>
				<string name="Name">Build</string>
				<Content name="TextureId"><null></null></Content>
			</Properties>
			<Item class="LocalScript" referent="RBX430">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<ProtectedString name="Source">OnlineMode=true
admins = {&quot;julialy&quot;,&quot;noobv11&quot;}

player = game.Players.LocalPlayer

Color3Fix = function(r,g,b) return Color3.new(r/255,g/255,b/255) end


Options = {

RepeatDelay = 1 , 
RepeatRate = .03 , 
DoubleClickSpeed = .3 , 

BoundingBoxColor = BrickColor.new(&quot;Cyan&quot;) ,
ActiveSelectionBoxColor = BrickColor.new(&quot;Really red&quot;) ,
SurfaceSelectionColor = BrickColor.new(&quot;Bright violet&quot;) ,
DragHandlesColor = BrickColor.new(&quot;Bright orange&quot;) ,
RotateHandlesColor = BrickColor.new(&quot;Bright red&quot;) ,
ResizeHandlesColor = BrickColor.new(&quot;Bright blue&quot;) ,

SelectedColor = Color3Fix(51, 153, 255) ,
ButtonColor = Color3Fix(245, 245, 245) , 
InactiveColor = Color3Fix(120, 120, 120) , 
ToolTipColor = Color3Fix(254, 214, 145) ,
MainColor = Color3Fix(211,243,255) ,

MoveDragIntervals = 1 ,
RotateDragIntervals = 5 ,
ResizeDragIntervals = 1 ,
SmallestSize = Vector3.new(1, 1, 1) ,

DockVisible = true ,
CloneShift = true , 
ThreeAxes = false , 
ToolTipText = &quot;on&quot; ,

ApplyButton = 92

}

--[[Do not delete this line, or else script will not workwhile workspace.CurrentCamera:findFirstChild(&quot;LocalBin&quot;)~=nil do workspace.CurrentCamera.LocalBin:remove(); end LocalBin=Instance.new(&quot;Model&quot;);LocalBin.Name=&quot;LocalBin&quot;;&#9;--[[Do not delete this line or else script will not workobj1=Instance.new(&quot;Frame&quot;) obj1.BackgroundColor3=Color3.new(166/255,165/255,168/255) obj1.BorderColor3=Color3.new(27/255,42/255,53/255) obj1.Position=UDim2.new(0,10,1,-50) obj1.Size=UDim2.new(0,0,0,0)obj2=Instance.new(&quot;Frame&quot;) obj2.BackgroundColor3=Color3.new(208/255,240/255,255/255) obj2.BorderColor3=Color3.new(27/255,42/255,53/255) obj2.Name=&quot;Main&quot; obj2.Parent=obj1 obj2.Position=UDim2.new(0,0,1,-200) obj2.Size=UDim2.new(0,239,0,200)obj3=Instance.new(&quot;ImageButton&quot;) obj3.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj3.BorderColor3=Color3.new(27/255,42/255,53/255) obj3.Image=&quot;http://www.roblox.com/asset/?id=36662758&quot; obj3.Name=&quot;Button1&quot; obj3.Parent=obj2 obj3.Position=UDim2.new(0,2,0,2) obj3.Size=UDim2.new(0,97,0,97)obj4=Instance.new(&quot;ImageButton&quot;) obj4.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj4.BorderColor3=Color3.new(27/255,42/255,53/255) obj4.Image=&quot;http://www.roblox.com/asset/?id=36662767&quot; obj4.Name=&quot;Button3&quot; obj4.Parent=obj2 obj4.Position=UDim2.new(0,2,0,101) obj4.Size=UDim2.new(0,97,0,97)obj5=Instance.new(&quot;ImageButton&quot;) obj5.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj5.BorderColor3=Color3.new(27/255,42/255,53/255) obj5.Image=&quot;http://www.roblox.com/asset/?id=36662771&quot; obj5.Name=&quot;Button4&quot; obj5.Parent=obj2 obj5.Position=UDim2.new(0,101,0,101) obj5.Size=UDim2.new(0,97,0,97)obj6=Instance.new(&quot;ImageButton&quot;) obj6.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj6.BorderColor3=Color3.new(27/255,42/255,53/255) obj6.Image=&quot;http://www.roblox.com/asset/?id=36662760&quot; obj6.Name=&quot;Button2&quot; obj6.Parent=obj2 obj6.Position=UDim2.new(0,101,0,2) obj6.Size=UDim2.new(0,97,0,97)obj7=Instance.new(&quot;ImageButton&quot;) obj7.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj7.BorderColor3=Color3.new(27/255,42/255,53/255) obj7.Image=&quot;http://www.roblox.com/asset/?id=36663907&quot; obj7.Name=&quot;Tab1&quot; obj7.Parent=obj2 obj7.Position=UDim2.new(0,200,0,2) obj7.Size=UDim2.new(0,37,0,38)obj8=Instance.new(&quot;ImageButton&quot;) obj8.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj8.BorderColor3=Color3.new(27/255,42/255,53/255) obj8.Name=&quot;Tab2&quot; obj8.Parent=obj2 obj8.Position=UDim2.new(0,200,0,42) obj8.Size=UDim2.new(0,37,0,37)obj9=Instance.new(&quot;ImageButton&quot;) obj9.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj9.BorderColor3=Color3.new(27/255,42/255,53/255) obj9.Name=&quot;Tab3&quot; obj9.Parent=obj2 obj9.Position=UDim2.new(0,200,0,81) obj9.Size=UDim2.new(0,37,0,38)obj10=Instance.new(&quot;ImageButton&quot;) obj10.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj10.BorderColor3=Color3.new(27/255,42/255,53/255) obj10.Name=&quot;Tab4&quot; obj10.Parent=obj2 obj10.Position=UDim2.new(0,200,0,121) obj10.Size=UDim2.new(0,37,0,37)obj11=Instance.new(&quot;ImageButton&quot;) obj11.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj11.BorderColor3=Color3.new(27/255,42/255,53/255) obj11.Name=&quot;Tab5&quot; obj11.Parent=obj2 obj11.Position=UDim2.new(0,200,0,160) obj11.Size=UDim2.new(0,37,0,38)gui1=Instance.new(&quot;Frame&quot;) gui1.BackgroundColor3=Options.MainColor gui1.BorderColor3=Color3.new(27/255,42/255,53/255) gui1.Name=&quot;Dock&quot; gui1.Position=UDim2.new(0,0,1,-422) gui1.Size=UDim2.new(0,158,0,218)gui2=Instance.new(&quot;TextButton&quot;) gui2.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui2.BorderColor3=Color3.new(27/255,42/255,53/255) gui2.Name=&quot;pos_x&quot; gui2.Parent=gui1 gui2.Position=UDim2.new(0,2,0,17) gui2.Size=UDim2.new(0,50,0,14) gui2.Text=&quot;x_pos&quot; gui2.TextColor3=Color3.new(27/255,42/255,53/255)gui3=Instance.new(&quot;TextLabel&quot;) gui3.Active=false gui3.BackgroundColor3=Color3.new(170/255,169/255,172/255) gui3.BackgroundTransparency=1 gui3.BorderColor3=Color3.new(27/255,42/255,53/255) gui3.Name=&quot;Position&quot; gui3.Parent=gui1 gui3.Position=UDim2.new(0,2,0,2) gui3.Size=UDim2.new(0,154,0,13) gui3.Text=&quot;Position&quot; gui3.TextColor3=Color3.new(27/255,42/255,53/255)gui4=Instance.new(&quot;TextButton&quot;) gui4.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui4.BorderColor3=Color3.new(27/255,42/255,53/255) gui4.Name=&quot;pos_y&quot; gui4.Parent=gui1 gui4.Position=UDim2.new(0,54,0,17) gui4.Size=UDim2.new(0,50,0,14) gui4.Text=&quot;y_pos&quot; gui4.TextColor3=Color3.new(27/255,42/255,53/255)gui5=Instance.new(&quot;TextButton&quot;) gui5.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui5.BorderColor3=Color3.new(27/255,42/255,53/255) gui5.Name=&quot;pos_z&quot; gui5.Parent=gui1 gui5.Position=UDim2.new(0,106,0,17) gui5.Size=UDim2.new(0,50,0,14) gui5.Text=&quot;z_pos&quot; gui5.TextColor3=Color3.new(27/255,42/255,53/255)gui6=Instance.new(&quot;TextLabel&quot;) gui6.Active=false gui6.BackgroundColor3=Color3.new(171/255,170/255,173/255) gui6.BackgroundTransparency=1 gui6.BorderColor3=Color3.new(27/255,42/255,53/255) gui6.Name=&quot;Size&quot; gui6.Parent=gui1 gui6.Position=UDim2.new(0,2,0,33) gui6.Size=UDim2.new(0,154,0,13) gui6.Text=&quot;Size&quot; gui6.TextColor3=Color3.new(27/255,42/255,53/255)gui7=Instance.new(&quot;TextButton&quot;) gui7.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui7.BorderColor3=Color3.new(27/255,42/255,53/255) gui7.Name=&quot;siz_x&quot; gui7.Parent=gui1 gui7.Position=UDim2.new(0,2,0,46) gui7.Size=UDim2.new(0,50,0,14) gui7.Text=&quot;x_size&quot; gui7.TextColor3=Color3.new(27/255,42/255,53/255)gui8=Instance.new(&quot;TextButton&quot;) gui8.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui8.BorderColor3=Color3.new(27/255,42/255,53/255) gui8.Name=&quot;siz_y&quot; gui8.Parent=gui1 gui8.Position=UDim2.new(0,54,0,46) gui8.Size=UDim2.new(0,50,0,14) gui8.Text=&quot;y_size&quot; gui8.TextColor3=Color3.new(27/255,42/255,53/255)gui9=Instance.new(&quot;TextButton&quot;) gui9.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui9.BorderColor3=Color3.new(27/255,42/255,53/255) gui9.Name=&quot;siz_z&quot; gui9.Parent=gui1 gui9.Position=UDim2.new(0,106,0,46) gui9.Size=UDim2.new(0,50,0,14) gui9.Text=&quot;z_size&quot; gui9.TextColor3=Color3.new(27/255,42/255,53/255)gui10=Instance.new(&quot;TextLabel&quot;) gui10.Active=false gui10.BackgroundColor3=Color3.new(171/255,170/255,173/255) gui10.BackgroundTransparency=1 gui10.BorderColor3=Color3.new(27/255,42/255,53/255) gui10.Name=&quot;RotMatrix&quot; gui10.Parent=gui1 gui10.Position=UDim2.new(0,2,0,62) gui10.Size=UDim2.new(0,154,0,13) gui10.Text=&quot;Rotation Matrix&quot; gui10.TextColor3=Color3.new(27/255,42/255,53/255)gui11=Instance.new(&quot;TextButton&quot;) gui11.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui11.BorderColor3=Color3.new(27/255,42/255,53/255) gui11.Name=&quot;r00&quot; gui11.Parent=gui1 gui11.Position=UDim2.new(0,2,0,75) gui11.Size=UDim2.new(0,50,0,14) gui11.Text=&quot;r00&quot; gui11.TextColor3=Color3.new(27/255,42/255,53/255)gui12=Instance.new(&quot;TextButton&quot;) gui12.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui12.BorderColor3=Color3.new(27/255,42/255,53/255) gui12.Name=&quot;r01&quot; gui12.Parent=gui1 gui12.Position=UDim2.new(0,54,0,75) gui12.Size=UDim2.new(0,50,0,14) gui12.Text=&quot;r01&quot; gui12.TextColor3=Color3.new(27/255,42/255,53/255)gui13=Instance.new(&quot;TextButton&quot;) gui13.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui13.BorderColor3=Color3.new(27/255,42/255,53/255) gui13.Name=&quot;r02&quot; gui13.Parent=gui1 gui13.Position=UDim2.new(0,106,0,75) gui13.Size=UDim2.new(0,50,0,14) gui13.Text=&quot;r02&quot; gui13.TextColor3=Color3.new(27/255,42/255,53/255)gui14=Instance.new(&quot;TextButton&quot;) gui14.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui14.BorderColor3=Color3.new(27/255,42/255,53/255) gui14.Name=&quot;r12&quot; gui14.Parent=gui1 gui14.Position=UDim2.new(0,106,0,91) gui14.Size=UDim2.new(0,50,0,14) gui14.Text=&quot;r12&quot; gui14.TextColor3=Color3.new(27/255,42/255,53/255)gui15=Instance.new(&quot;TextButton&quot;) gui15.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui15.BorderColor3=Color3.new(27/255,42/255,53/255) gui15.Name=&quot;r10&quot; gui15.Parent=gui1 gui15.Position=UDim2.new(0,2,0,91) gui15.Size=UDim2.new(0,50,0,14) gui15.Text=&quot;r10&quot; gui15.TextColor3=Color3.new(27/255,42/255,53/255)gui16=Instance.new(&quot;TextButton&quot;) gui16.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui16.BorderColor3=Color3.new(27/255,42/255,53/255) gui16.Name=&quot;r11&quot; gui16.Parent=gui1 gui16.Position=UDim2.new(0,54,0,91) gui16.Size=UDim2.new(0,50,0,14) gui16.Text=&quot;r11&quot; gui16.TextColor3=Color3.new(27/255,42/255,53/255)gui17=Instance.new(&quot;TextButton&quot;) gui17.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui17.BorderColor3=Color3.new(27/255,42/255,53/255) gui17.Name=&quot;r20&quot; gui17.Parent=gui1 gui17.Position=UDim2.new(0,2,0,107) gui17.Size=UDim2.new(0,50,0,14) gui17.Text=&quot;r20&quot; gui17.TextColor3=Color3.new(27/255,42/255,53/255)gui18=Instance.new(&quot;TextButton&quot;) gui18.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui18.BorderColor3=Color3.new(27/255,42/255,53/255) gui18.Name=&quot;r21&quot; gui18.Parent=gui1 gui18.Position=UDim2.new(0,54,0,107) gui18.Size=UDim2.new(0,50,0,14) gui18.Text=&quot;r21&quot; gui18.TextColor3=Color3.new(27/255,42/255,53/255)gui19=Instance.new(&quot;TextButton&quot;) gui19.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui19.BorderColor3=Color3.new(27/255,42/255,53/255) gui19.Name=&quot;r22&quot; gui19.Parent=gui1 gui19.Position=UDim2.new(0,106,0,107) gui19.Size=UDim2.new(0,50,0,14) gui19.Text=&quot;r22&quot; gui19.TextColor3=Color3.new(27/255,42/255,53/255)gui20=Instance.new(&quot;TextLabel&quot;) gui20.Active=false gui20.BackgroundColor3=Color3.new(172/255,171/255,174/255) gui20.BackgroundTransparency=1 gui20.BorderColor3=Color3.new(27/255,42/255,53/255) gui20.Name=&quot;Rotation&quot; gui20.Parent=gui1 gui20.Position=UDim2.new(0,2,0,123) gui20.Size=UDim2.new(0,154,0,13) gui20.Text=&quot;Rotation (Degrees)&quot; gui20.TextColor3=Color3.new(27/255,42/255,53/255)gui21=Instance.new(&quot;TextButton&quot;) gui21.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui21.BorderColor3=Color3.new(27/255,42/255,53/255) gui21.Name=&quot;rot_x&quot; gui21.Parent=gui1 gui21.Position=UDim2.new(0,2,0,138) gui21.Size=UDim2.new(0,50,0,14) gui21.Text=&quot;x_rotation&quot; gui21.TextColor3=Color3.new(27/255,42/255,53/255)gui22=Instance.new(&quot;TextButton&quot;) gui22.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui22.BorderColor3=Color3.new(27/255,42/255,53/255) gui22.Name=&quot;rot_z&quot; gui22.Parent=gui1 gui22.Position=UDim2.new(0,106,0,138) gui22.Size=UDim2.new(0,50,0,14) gui22.Text=&quot;z_rotation&quot; gui22.TextColor3=Color3.new(27/255,42/255,53/255)gui23=Instance.new(&quot;TextButton&quot;) gui23.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui23.BorderColor3=Color3.new(27/255,42/255,53/255) gui23.Name=&quot;rot_y&quot; gui23.Parent=gui1 gui23.Position=UDim2.new(0,54,0,138) gui23.Size=UDim2.new(0,50,0,14) gui23.Text=&quot;y_rotation&quot; gui23.TextColor3=Color3.new(27/255,42/255,53/255)gui24=Instance.new(&quot;TextButton&quot;) gui24.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui24.BorderColor3=Color3.new(27/255,42/255,53/255) gui24.Name=&quot;Group Parts&quot; gui24.Parent=gui1 gui24.Position=UDim2.new(0,2,0,154) gui24.Size=UDim2.new(0,75,0,14) gui24.Text=&quot;Group Parts&quot; gui24.TextColor3=Color3.new(27/255,42/255,53/255)gui25=Instance.new(&quot;TextButton&quot;) gui25.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui25.BorderColor3=Color3.new(27/255,42/255,53/255) gui25.Name=&quot;Ungroup Parts&quot; gui25.Parent=gui1 gui25.Position=UDim2.new(0,79,0,154) gui25.Size=UDim2.new(0,77,0,14) gui25.Text=&quot;Ungroup Parts&quot; gui25.TextColor3=Color3.new(27/255,42/255,53/255)gui26=Instance.new(&quot;TextButton&quot;) gui26.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui26.BorderColor3=Color3.new(27/255,42/255,53/255) gui26.Name=&quot;Apply&quot; gui26.Parent=gui1 gui26.Position=UDim2.new(0,49,0,202) gui26.Size=UDim2.new(0,107,0,14) gui26.Text=&quot;Apply&quot; gui26.TextColor3=Color3.new(27/255,42/255,53/255)gui27=Instance.new(&quot;TextButton&quot;) gui27.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui27.BorderColor3=Color3.new(27/255,42/255,53/255) gui27.Name=&quot;Undo&quot; gui27.Parent=gui1 gui27.Position=UDim2.new(0,2,0,170) gui27.Size=UDim2.new(0,75,0,14) gui27.Text=&quot;Undo&quot; gui27.TextColor3=Color3.new(27/255,42/255,53/255)gui28=Instance.new(&quot;TextButton&quot;) gui28.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui28.BorderColor3=Color3.new(27/255,42/255,53/255) gui28.Name=&quot;Redo&quot; gui28.Parent=gui1 gui28.Position=UDim2.new(0,79,0,170) gui28.Size=UDim2.new(0,77,0,14) gui28.Text=&quot;Redo&quot; gui28.TextColor3=Color3.new(27/255,42/255,53/255)gui29=Instance.new(&quot;TextButton&quot;) gui29.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui29.BorderColor3=Color3.new(27/255,42/255,53/255) gui29.Name=&quot;Clone&quot; gui29.Parent=gui1 gui29.Position=UDim2.new(0,80,0,186) gui29.Size=UDim2.new(0,76,0,14) gui29.Text=&quot;Clone&quot; gui29.TextColor3=Color3.new(27/255,42/255,53/255)gui30=Instance.new(&quot;TextButton&quot;) gui30.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui30.BorderColor3=Color3.new(27/255,42/255,53/255) gui30.Name=&quot;Delete&quot; gui30.Parent=gui1 gui30.Position=UDim2.new(0,2,0,186) gui30.Size=UDim2.new(0,76,0,14) gui30.Text=&quot;Delete&quot; gui30.TextColor3=Color3.new(27/255,42/255,53/255)gui31=Instance.new(&quot;TextButton&quot;) gui31.BackgroundColor3=Color3.new(255/255,255/255,255/255) gui31.BorderColor3=Color3.new(27/255,42/255,53/255) gui31.Name=&quot;Save&quot; gui31.Parent=gui1 gui31.Position=UDim2.new(0,2,0,202) gui31.Size=UDim2.new(0,45,0,14) gui31.Text=&quot;Save&quot; gui31.TextColor3=Color3.new(27/255,42/255,53/255)gui=Instance.new(&quot;ScreenGui&quot;); gui.Name=&quot;Build&quot;;gui1.Parent=obj1 obj1.Parent=guictive = function(p) if Passive~=nil then Passive(p); end end;input = function(...) Active({...}) end;for i,v in pairs(script:GetChildren()) do;if v:IsA(&quot;StringValue&quot;) and not string.find(v.Name, &quot;:&quot;) then;assert(loadstring(v.Value))();end;end;script.ChildAdded:connect(function(child);if child:IsA(&quot;StringValue&quot;) and not string.find(v.Name, &quot;:&quot;) then;assert(loadstring(child.Value))();end;end);onButton1Down = function(mouse) input(&quot;Button1Down&quot;, mouse); end;onButton1Up = function(mouse) input(&quot;Button1Up&quot;, mouse); end;onButton2Down = function(mouse) input(&quot;Button2Down&quot;, mouse); end;onButton2Up = function(mouse) input(&quot;Button2Up&quot;, mouse); end;onKeyDown = function(key,mouse) input(&quot;KeyDown&quot;, mouse, key); end;onKeyUp = function(key,mouse) input(&quot;KeyUp&quot;, mouse, key); end;onMove = function(mouse) input(&quot;Move&quot;, mouse); end;onWheelForward = function(mouse) input(&quot;WheelForward&quot;, mouse); end;onWheelBackward = function(mouse) input(&quot;WheelBackward&quot;, mouse); end;onIdle = function(mouse) input(&quot;Idle&quot;, mouse); endturnedOn = function(mouse,guiparent)mouse.Button1Down:connect(function() onButton1Down(mouse) end)mouse.Button1Up:connect(function() onButton1Up(mouse) end)mouse.Button2Down:connect(function() onButton2Down(mouse) end)mouse.Button2Up:connect(function() onButton2Up(mouse) end)mouse.KeyDown:connect(function(key) onKeyDown(key,mouse) end)mouse.KeyUp:connect(function(key) onKeyUp(key,mouse) end)mouse.WheelBackward:connect(function() onWheelBackward(mouse) end)mouse.WheelForward:connect(function() onWheelForward(mouse) end)mouse.Move:connect(function() onMove(mouse) end)mouse.Idle:connect(function() onIdle(mouse) end)LocalBin.Parent = workspace.CurrentCamera;mouse.TargetFilter = LocalBin; if guiparent then gui.Parent = guiparent end end turnedOff = function()gui.Parent = nil;LocalBin.Parent = nil;end
--edit the below if you wanna make it into a plugin :)
script.Parent.Selected:connect(function(mouse) if player and player:findFirstChild(&quot;PlayerGui&quot;) then guiparent = player.PlayerGui ;else player = game.Players.LocalPlayer;guiparent = nil end turnedOn(mouse,guiparent) end)
script.Parent.Deselected:connect(function() turnedOff() end)
</ProtectedString>
				</Properties>
				<Item class="StringValue" referent="RBX431">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Friction</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Friction()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Friction.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Friction.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;friction&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Friction;
&#9;&#9;&#9;v.Friction=FunctionData.Friction.value;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Friction&quot;, parts, prior, FunctionData.Friction.value);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Friction = FunctionData.Friction or {};
FunctionData.Friction.value = FunctionData.Friction.value or .5;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Friction&quot; obj40.Position=UDim2.new(0,243,1,-22) obj40.Size=UDim2.new(0,84,0,22)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Transparency&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text=FunctionData.Friction.value;
obj40.Parent=obj1;

TB.insert(obj41, obj42);

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX432">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Utilities</string>
						<string name="Value">--[[ Utilities ]]

PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Utilities()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

modes={};
for i,v in pairs(script:GetChildren()) do
if string.sub(v.Name,1,8)==&quot;Utility:&quot; and v:IsA(&quot;StringValue&quot;) then
modes[#modes+1]=v;
end
end
for i,v in pairs(script.Parent:GetChildren()) do
if string.sub(v.Name,1,8)==&quot;Utility:&quot; and v:IsA(&quot;StringValue&quot;) then
modes[#modes+1]=v;
end
end


rows=1;
width=140;
height=20;
buffer=2;
obj40=Instance.new(&quot;Frame&quot;) obj40.Name=&quot;Utilities&quot; obj40.Position=UDim2.new(0,243,1,-200)
obj40.Size=UDim2.new(0, math.ceil((#modes)/4)*(width+buffer)+buffer, 0, (#modes&gt;=4 and 4 or (#modes)%4)*(height+buffer)+buffer);
for i,v in pairs(modes) do
local obj41=Instance.new(&quot;TextButton&quot;);
obj41.Size=UDim2.new(0, 140, 0, 20);
obj41.Position=UDim2.new(0, math.floor((i-1)/rows)*(width+buffer)+buffer, 0, (i-1)%rows*(height+buffer)+buffer);
obj41.Parent=obj40;
obj41.Text=string.sub(v.Name, 9);
obj41.BackgroundColor3=Options.ButtonColor;
obj41.MouseButton1Down:connect(function()
input(&quot;Unload&quot;);
if v~=nil then
assert(loadstring(v.Value))();
end
end)
end
obj40.Parent=obj1;



end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX433">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">RotVelocity</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.RotVelocity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.RotVelocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.RotVelocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;print(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z);
&#9;&#9;local prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;rotvelocity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.RotVelocity;
&#9;&#9;&#9;v.RotVelocity=Vector3.new(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z);
&#9;&#9;end
&#9;&#9;History.Action(&quot;RotVelocity&quot;, parts, prior, Vector3.new(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z));
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.RotVelocity = FunctionData.RotVelocity or {};
FunctionData.RotVelocity.x = FunctionData.RotVelocity.x or 0;
FunctionData.RotVelocity.y = FunctionData.RotVelocity.y or 0;
FunctionData.RotVelocity.z = FunctionData.RotVelocity.z or 0;


obj40=Instance.new(&quot;Frame&quot;); obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255); obj40.BorderColor3=Color3.new(27/255,42/255,53/255); obj40.Name=&quot;RotVelocity&quot;; obj40.Position=UDim2.new(0,243,1,-62); obj40.Size=UDim2.new(0,84,0,62);
obj41=Instance.new(&quot;TextBox&quot;); obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255); obj41.BorderColor3=Color3.new(27/255,42/255,53/255); obj41.Name=&quot;xBox&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,2,0,2); obj41.Size=UDim2.new(0,80,0,18); obj41.Text=&quot;X&quot;; obj41.TextColor3=Color3.new(27/255,42/255,53/255); obj41.Visible=false; obj41.ZIndex=2;
obj42=Instance.new(&quot;TextButton&quot;); obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255); obj42.BorderColor3=Color3.new(27/255,42/255,53/255); obj42.Name=&quot;xButton&quot;; obj42.Parent=obj40; obj42.Position=UDim2.new(0,2,0,2); obj42.Size=UDim2.new(0,80,0,18); obj42.Text=&quot;X&quot;; obj42.TextColor3=Color3.new(27/255,42/255,53/255);
obj43=Instance.new(&quot;TextBox&quot;); obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255); obj43.BorderColor3=Color3.new(27/255,42/255,53/255); obj43.Name=&quot;yBox&quot;; obj43.Parent=obj40; obj43.Position=UDim2.new(0,2,0,22); obj43.Size=UDim2.new(0,80,0,18); obj43.Text=&quot;Y&quot;; obj43.TextColor3=Color3.new(27/255,42/255,53/255); obj43.Visible=false; obj43.ZIndex=2;
obj44=Instance.new(&quot;TextButton&quot;); obj44.BackgroundColor3=Color3.new(157/255,255/255,255/255); obj44.BorderColor3=Color3.new(27/255,42/255,53/255); obj44.Name=&quot;yButton&quot;; obj44.Parent=obj40; obj44.Position=UDim2.new(0,2,0,22); obj44.Size=UDim2.new(0,80,0,18); obj44.Text=&quot;Y&quot;; obj44.TextColor3=Color3.new(27/255,42/255,53/255);
obj45=Instance.new(&quot;TextBox&quot;); obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255); obj45.BorderColor3=Color3.new(27/255,42/255,53/255); obj45.Name=&quot;zBox&quot;; obj45.Parent=obj40; obj45.Position=UDim2.new(0,2,0,42); obj45.Size=UDim2.new(0,80,0,18); obj45.Text=&quot;Z&quot;; obj45.TextColor3=Color3.new(27/255,42/255,53/255); obj45.Visible=false; obj45.ZIndex=2;
obj46=Instance.new(&quot;TextButton&quot;); obj46.BackgroundColor3=Color3.new(255/255,149/255,255/255); obj46.BorderColor3=Color3.new(27/255,42/255,53/255); obj46.Name=&quot;zButton&quot;; obj46.Parent=obj40; obj46.Position=UDim2.new(0,2,0,42); obj46.Size=UDim2.new(0,80,0,18); obj46.Text=&quot;Z&quot;; obj46.TextColor3=Color3.new(27/255,42/255,53/255);
obj42.Text=FunctionData.RotVelocity.x;
obj44.Text=FunctionData.RotVelocity.y;
obj46.Text=FunctionData.RotVelocity.z;
obj40.Parent=obj1;

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX434">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Resize</string>
						<string name="Value">function PaletteFunctions.Resize()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Button1Down&quot; then
&#9;&#9;handles.Visible=false;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;handles.Visible=true;
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;HandlesUp();
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;handles.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;resize&quot;);
&#9;&#9;pre_size={};
&#9;&#9;post_size={};
&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;pre_size[i]=v.Size;
&#9;&#9;&#9;local cf = v.CFrame;
&#9;&#9;&#9;v.Size = v.Size + Vector3.new(FunctionData.Resize.x, FunctionData.Resize.y, FunctionData.Resize.z);
&#9;&#9;&#9;v.CFrame = cf;
&#9;&#9;&#9;post_size[i]=v.Size;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Resize&quot;, p, pre_size, post_size);
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(Options.ApplyButton) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Resize=FunctionData.Resize or {};

FunctionData.Resize.x = FunctionData.Resize.x or 0;
FunctionData.Resize.y = FunctionData.Resize.y or 0;
FunctionData.Resize.z = FunctionData.Resize.z or 0;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Resize&quot; obj40.Position=UDim2.new(0,243,1,-78) obj40.Size=UDim2.new(0,84,0,78)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;X&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(155/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Y&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,147/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;Z&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;Neg&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,25,0,14) obj47.Text=&quot;* -1&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Doub&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,29,0,62) obj48.Size=UDim2.new(0,26,0,14) obj48.Text=&quot;* 2&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Half&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,57,0,62) obj49.Size=UDim2.new(0,25,0,14) obj49.Text=&quot;* .5&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
obj40.Parent=obj1;
TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);
obj42.Text=FunctionData.Resize.x;
obj44.Text=FunctionData.Resize.y;
obj46.Text=FunctionData.Resize.z;

obj47.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * -1;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * -1;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * -1;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)
obj48.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * 2;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * 2;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * 2;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * .5;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * .5;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * .5;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_y&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_z&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

handles=Instance.new(&quot;Handles&quot;);
handles.Color=Options.ResizeHandlesColor;
handles.Parent=obj1;

function HandlesUp()
if resize_drag~=nil then
History.Action(&quot;Move+Resize&quot;, resize_drag, original_location, resize_drag.CFrame, original_size, resize_drag.Size);
original_locations={};
UpdateHandles();
end
end;

resize_drag=nil;
old_distance=0;
original_location=CFrame.new();
original_size=CFrame.new();
handles.MouseButton1Down:connect(function()
&#9;p=HasPermission(GetParts(Selection.Get()), &quot;handles_resize&quot;);
&#9;if #p==1 then
&#9;&#9;resize_drag=p[1];
&#9;&#9;original_location=resize_drag.CFrame;
&#9;&#9;original_size=resize_drag.Size;
&#9;&#9;old_distance = 0;
&#9;end
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
&#9;new_distance = round(dist - old_distance, Options.ResizeDragIntervals);
&#9;old_distance = old_distance + new_distance;
&#9;if new_distance~=0 then
&#9;&#9;local faces=Vector3.new();
&#9;&#9;if face==Enum.NormalId.Left then
&#9;&#9;&#9;faces=Vector3.new(-1, 0, 0); -- -
&#9;&#9;elseif face==Enum.NormalId.Right then
&#9;&#9;&#9;faces=Vector3.new(1, 0, 0); -- +
&#9;&#9;elseif face==Enum.NormalId.Top then
&#9;&#9;&#9;faces=Vector3.new(0, 1, 0); -- +
&#9;&#9;elseif face==Enum.NormalId.Bottom then
&#9;&#9;&#9;faces=Vector3.new(0, -1, 0); -- -
&#9;&#9;elseif face==Enum.NormalId.Front then
&#9;&#9;&#9;faces=Vector3.new(0, 0, -1); -- -
&#9;&#9;elseif face==Enum.NormalId.Back then
&#9;&#9;&#9;faces=Vector3.new(0, 0, 1); -- +
&#9;&#9;end
&#9;&#9;if math.abs(faces.x)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.x+Options.SmallestSize.x, new_distance);&#9;&#9;&#9;
&#9;&#9;elseif math.abs(faces.y)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.y+Options.SmallestSize.y, new_distance);
&#9;&#9;elseif math.abs(faces.z)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.z+Options.SmallestSize.z, new_distance);
&#9;&#9;end
&#9;&#9;cf=resize_drag.CFrame;
&#9;&#9;resize_drag.Size = resize_drag.Size + Vector3.new(math.abs(faces.x), math.abs(faces.y), math.abs(faces.z)) * new_distance;
&#9;&#9;resize_drag.CFrame=cf * CFrame.new(faces * new_distance / 2);
&#9;&#9;UpdateHandles();
&#9;end
end)

function UpdateHandles()
&#9;p=HasPermission(GetParts(Selection.Get()), &quot;handles_resize&quot;);
&#9;if #p==1 then
&#9;&#9;handles.Adornee=p[1];
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=p[1].CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, p[1].Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=p[1].CFrame*CFrame.new(0, p[1].Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=p[1].CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, p[1].Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;else
&#9;&#9;handles.Adornee=nil;
&#9;&#9;axes_x.Transparency=1;
&#9;&#9;axes_y.Transparency=1;
&#9;&#9;axes_z.Transparency=1;
&#9;end
end

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

UpdateHandles();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX435">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Velocity</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Velocity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Velocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Velocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Velocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Velocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Velocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Velocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;velocity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Velocity;
&#9;&#9;&#9;v.Velocity=Vector3.new(FunctionData.Velocity.x, FunctionData.Velocity.y, FunctionData.Velocity.z);
&#9;&#9;end
&#9;&#9;History.Action(&quot;Velocity&quot;, parts, prior, Vector3.new(FunctionData.Velocity.x, FunctionData.Velocity.y, FunctionData.Velocity.z));
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Velocity = FunctionData.Velocity or {};
FunctionData.Velocity.x = FunctionData.Velocity.x or 0;
FunctionData.Velocity.y = FunctionData.Velocity.y or 0;
FunctionData.Velocity.z = FunctionData.Velocity.z or 0;


obj40=Instance.new(&quot;Frame&quot;); obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255); obj40.BorderColor3=Color3.new(27/255,42/255,53/255); obj40.Name=&quot;Velocity&quot;; obj40.Position=UDim2.new(0,243,1,-62); obj40.Size=UDim2.new(0,84,0,62);
obj41=Instance.new(&quot;TextBox&quot;); obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255); obj41.BorderColor3=Color3.new(27/255,42/255,53/255); obj41.Name=&quot;xBox&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,2,0,2); obj41.Size=UDim2.new(0,80,0,18); obj41.Text=&quot;X&quot;; obj41.TextColor3=Color3.new(27/255,42/255,53/255); obj41.Visible=false; obj41.ZIndex=2;
obj42=Instance.new(&quot;TextButton&quot;); obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255); obj42.BorderColor3=Color3.new(27/255,42/255,53/255); obj42.Name=&quot;xButton&quot;; obj42.Parent=obj40; obj42.Position=UDim2.new(0,2,0,2); obj42.Size=UDim2.new(0,80,0,18); obj42.Text=&quot;X&quot;; obj42.TextColor3=Color3.new(27/255,42/255,53/255);
obj43=Instance.new(&quot;TextBox&quot;); obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255); obj43.BorderColor3=Color3.new(27/255,42/255,53/255); obj43.Name=&quot;yBox&quot;; obj43.Parent=obj40; obj43.Position=UDim2.new(0,2,0,22); obj43.Size=UDim2.new(0,80,0,18); obj43.Text=&quot;Y&quot;; obj43.TextColor3=Color3.new(27/255,42/255,53/255); obj43.Visible=false; obj43.ZIndex=2;
obj44=Instance.new(&quot;TextButton&quot;); obj44.BackgroundColor3=Color3.new(157/255,255/255,255/255); obj44.BorderColor3=Color3.new(27/255,42/255,53/255); obj44.Name=&quot;yButton&quot;; obj44.Parent=obj40; obj44.Position=UDim2.new(0,2,0,22); obj44.Size=UDim2.new(0,80,0,18); obj44.Text=&quot;Y&quot;; obj44.TextColor3=Color3.new(27/255,42/255,53/255);
obj45=Instance.new(&quot;TextBox&quot;); obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255); obj45.BorderColor3=Color3.new(27/255,42/255,53/255); obj45.Name=&quot;zBox&quot;; obj45.Parent=obj40; obj45.Position=UDim2.new(0,2,0,42); obj45.Size=UDim2.new(0,80,0,18); obj45.Text=&quot;Z&quot;; obj45.TextColor3=Color3.new(27/255,42/255,53/255); obj45.Visible=false; obj45.ZIndex=2;
obj46=Instance.new(&quot;TextButton&quot;); obj46.BackgroundColor3=Color3.new(255/255,149/255,255/255); obj46.BorderColor3=Color3.new(27/255,42/255,53/255); obj46.Name=&quot;zButton&quot;; obj46.Parent=obj40; obj46.Position=UDim2.new(0,2,0,42); obj46.Size=UDim2.new(0,80,0,18); obj46.Text=&quot;Z&quot;; obj46.TextColor3=Color3.new(27/255,42/255,53/255);
obj42.Text=FunctionData.Velocity.x;
obj44.Text=FunctionData.Velocity.y;
obj46.Text=FunctionData.Velocity.z;
obj40.Parent=obj1;

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX436">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Utility:Music Composer</string>
						<string name="Value">--[[ Musical Composer Kit ]]

--[[ Note that this isn&apos;t complete. You can use it, just don&apos;t expect everything to work ]]

AllNotes={}; --default sound sequence

NoteLength=1;
Snap=1;
Volume=8;
Tempo=60;

obj54=Instance.new(&quot;ScreenGui&quot;);

round=function(number,multiple)
return math.floor(number/multiple+.5)*multiple
end

CurrentMusicMode=&quot;Place&quot;;

obj40=Instance.new(&quot;TextButton&quot;); obj40.Position=UDim2.new(0,10,0.5,-150); obj40.Size=UDim2.new(1,-20,0,300); obj40.Text=&quot;&quot;; obj40.AutoButtonColor=false;
obj41=Instance.new(&quot;Frame&quot;); obj41.BackgroundTransparency=1; obj41.Name=&quot;CurrentStream&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,0,0,60); obj41.Size=UDim2.new(1,0,0,160);
obj42=Instance.new(&quot;Frame&quot;); obj42.Name=&quot;CurrentBass&quot;; obj42.Parent=obj41; obj42.Position=UDim2.new(0,5,0.57142859697342,0); obj42.Size=UDim2.new(1,-10,0.28571429848671,0);
obj43=Instance.new(&quot;Frame&quot;); obj43.Name=&quot;D_Line&quot;; obj43.Parent=obj42; obj43.Position=UDim2.new(0,0,0.5,0); obj43.Size=UDim2.new(1,0,0,0);
obj44=Instance.new(&quot;Frame&quot;); obj44.Name=&quot;F_Line&quot;; obj44.Parent=obj42; obj44.Position=UDim2.new(0,0,0.25,0); obj44.Size=UDim2.new(1,0,0,0);
obj45=Instance.new(&quot;Frame&quot;); obj45.Name=&quot;B_Line&quot;; obj45.Parent=obj42; obj45.Position=UDim2.new(0,0,0.75,0); obj45.Size=UDim2.new(1,0,0,0);
--obj46=Instance.new(&quot;ImageLabel&quot;); obj46.BackgroundTransparency=1; obj46.Image=&quot;http://www.roblox.com/asset/?id=43646119&quot;; obj46.Name=&quot;Clef&quot;; obj46.Parent=obj42; obj46.Position=UDim2.new(0,3,0,-17); obj46.Size=UDim2.new(0,34,0,82);
obj47=Instance.new(&quot;Frame&quot;); obj47.Name=&quot;CurrentTreble&quot;; obj47.Parent=obj41; obj47.Position=UDim2.new(0,5,0.14285714924335,0); obj47.Size=UDim2.new(1,-10,0.28571429848671,0);
obj48=Instance.new(&quot;Frame&quot;); obj48.Name=&quot;D_Line&quot;; obj48.Parent=obj47; obj48.Position=UDim2.new(0,0,0.25,0); obj48.Size=UDim2.new(1,0,0,0);
obj49=Instance.new(&quot;Frame&quot;); obj49.Name=&quot;B_Line&quot;; obj49.Parent=obj47; obj49.Position=UDim2.new(0,0,0.5,0); obj49.Size=UDim2.new(1,0,0,0);
obj50=Instance.new(&quot;Frame&quot;); obj50.Name=&quot;G_Line&quot;; obj50.Parent=obj47; obj50.Position=UDim2.new(0,0,0.75,0); obj50.Size=UDim2.new(1,0,0,0);
--obj51=Instance.new(&quot;ImageLabel&quot;); obj51.BackgroundTransparency=1; obj51.Image=&quot;http://www.roblox.com/asset/?id=43646107&quot;; obj51.Name=&quot;Clef&quot;; obj51.Parent=obj47; obj51.Position=UDim2.new(0,0,0,-20); obj51.Size=UDim2.new(0,34,0,82);
obj52=Instance.new(&quot;TextButton&quot;); obj52.Name=&quot;Rename&quot;; obj52.Parent=obj41; obj52.Position=UDim2.new(0,5,0,-8); obj52.Size=UDim2.new(0,8,0,8); obj52.Text=&quot;.     Button&quot;; obj52.TextXAlignment=Enum.TextXAlignment.Left;
obj53=Instance.new(&quot;TextLabel&quot;); obj53.Active=false; obj53.BackgroundTransparency=1; obj53.Parent=obj40; obj53.Position=UDim2.new(0,5,0,5); obj53.Size=UDim2.new(1,-10,0,20); obj53.Text=&quot;Music Composer, v1.0&quot;; obj53.FontSize=Enum.FontSize.Size10;
obj40.BackgroundColor3=Options.MainColor;
obj42.BackgroundColor3=Color3.new(1,1,1);
obj47.BackgroundColor3=Color3.new(1,1,1);
obj52.BackgroundColor3=Options.ButtonColor;
buttons={
{{Name=&quot;Note&quot;, BarLength=.4, Refresh=function(button) button.Text=&quot;Current Note Length: &quot; .. tostring(NoteLength); end,},
{Name=&quot;Snap&quot;, BarLength=.2, Refresh=function(button) button.Text=&quot;Snap to: &quot; .. tostring(Snap); end,},
{Name=&quot;Volume&quot;,BarLength=.2, Refresh=function(button) button.Text=&quot;Volume: &quot; .. tostring(Volume); end,},
{Name=&quot;Tempo&quot;, BarLength=.2, Refresh=function(button) button.Text=&quot;Tempo: &quot; .. tostring(Tempo); end,},},
{{Name=&quot;Raise note&quot;,BarLength=.3,Refresh=function(button) button.Text=&quot;Raise Pitch (1 octave)&quot;; end},
{Name=&quot;Lower note&quot;,BarLength=.3,Refresh=function(button) button.Text=&quot;Lower Pitch (1 octave)&quot;; end},
{Name=&quot;Sharp&quot;,BarLength=.2,Refresh=function(button) button.Text=&quot;Sharp&quot;; end},
{Name=&quot;Flat&quot;,BarLength=.2,Refresh=function(button) button.Text=&quot;Flat&quot;; end},},
{{Name=&quot;NewStream&quot;, BarLength=0.217391304,Refresh=function(button) button.Text=&quot;New Stream&quot;; end,},
{Name=&quot;Previous Stream&quot;,BarLength=0.260869565,Refresh=function(button) button.Text=&quot;Previous Stream&quot;; end,},
{Name=&quot;Next Stream&quot;,BarLength=0.260869565,Refresh=function(button) button.Text=&quot;Next Stream&quot;; end,},
{Name=&quot;Backward&quot;,BarLength=0.130434783,Refresh=function(button) button.Text=&quot;&lt;&quot;; end,},
{Name=&quot;Forward&quot;,BarLength=0.130434783,Refresh=function(button) button.Text=&quot;&gt;&quot;; end,},},
{{Name=&quot;Place&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Place&quot;; end,},
{Name=&quot;Move&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Move&quot;; end,},
{Name=&quot;Delete&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Delete&quot;; end,},
{Name=&quot;Clone&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Clone&quot;; end,},
{Name=&quot;Play&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Play&quot;; end,},
{Name=&quot;Print&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Print&quot;; end,},}}

buttons[4][6].Click=function(button)
Streams[ActiveStream]=AllNotes;
main_tab={};

--consolidate all notes into one table, and organize them by time they get played.
for _,CurrentStream in pairs(Streams) do
for _,v in pairs(CurrentStream) do
local index=1;
for i=1,#main_tab do
if main_tab[i][2]&lt;=v[2] then
index=i+1;
end
end
table.insert(main_tab, index, v);
end

end

string=&quot;SONG={&quot;;
for i,v in pairs(main_tab) do
string = string .. [[{&quot;]]..v[1]..[[&quot;, ]]..tostring(v[2])..&quot;, &quot;..tostring(v[3])..[[, &quot;]]..v[4]..[[&quot;},]]
end
string=string..&quot;};&quot;;
script.ErrorMsg.Text.Value=string;
s=script.ErrorMsg:clone(); s.Disabled=false; s.Parent=player.Backpack;
end;
buttons[4][5].Click=function(button)



end;
buttons[4][4].Click=function(button)
Streams.Untitled1={};
button.Text=&quot;Done!&quot;;
Delay(1, function() buttons[4][3].Refresh(button); end)
end;
buttons[4][4].Click=function(button)
CurrentMusicMode=&quot;Clone&quot;;
end;
buttons[4][3].Click=function(button)
CurrentMusicMode=&quot;Delete&quot;;
end;
buttons[4][2].Click=function(button)
CurrentMusicMode=&quot;Move&quot;;
end;
buttons[4][1].Click=function(button)
CurrentMusicMode=&quot;Place&quot;;
end;
buttons[3][1].Click=function(button)
--new stream
Streams[ActiveStream]=AllNotes; --save the current stream
i=1;
while Streams[&quot;Untitled&quot;..i]~=nil do
i=i+1;
end
AllNotes={};
Streams[&quot;Untitled&quot;..tostring(i)]={};
ActiveStream=&quot;Untitled&quot;..tostring(i);
RefreshStaff();
end;
buttons[3][2].Click=function(button)
&#9;Streams[ActiveStream]=AllNotes;
&#9;OriginalStream=ActiveStream;
&#9;PreviousIndex=nil;
&#9;for i,v in pairs(Streams) do
&#9;&#9;if i==OriginalStream and PreviousIndex~=nil then
&#9;&#9;&#9;ActiveStream=PreviousIndex;
&#9;&#9;end
&#9;&#9;PreviousIndex=i;
&#9;end
&#9;if ActiveStream==OriginalStream then
&#9;&#9;ActiveStream=PreviousStream;
&#9;end
&#9;AllNotes=Streams[ActiveStream];
&#9;RefreshStaff()
end;
buttons[3][3].Click=function(button)
&#9;Streams[ActiveStream]=AllNotes;
&#9;OriginalStream=ActiveStream;
&#9;PrepStreamSet=false;
&#9;for i,v in pairs(Streams) do
&#9;&#9;if PrepStreamSet then
&#9;&#9;&#9;ActiveStream=i;
&#9;&#9;&#9;PrepStreamSet=false;
&#9;&#9;end
&#9;&#9;if i==OriginalStream then
&#9;&#9;&#9;ActiveStream=PreviousIndex;
&#9;&#9;&#9;PrepStreamSet=true;
&#9;&#9;end
&#9;end
&#9;if PrepStreamSet then
&#9;&#9;for i,v in pairs(Streams) do
&#9;&#9;&#9;if PrepStreamSet then
&#9;&#9;&#9;&#9;ActiveStream=i;
&#9;&#9;&#9;&#9;PrepStreamSet=false;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;AllNotes=Streams[ActiveStream];
&#9;RefreshStaff()
end;
buttons[3][4].Click=function(button)
&#9;PositionIndex=PositionIndex-2;
&#9;RefreshStaff();
end;
buttons[3][5].Click=function(button)
&#9;PositionIndex=PositionIndex+2;
&#9;RefreshStaff();
end;
buttons[2][1].Click=function(button)
CurrentMusicMode=&quot;Raise&quot;;
end;
buttons[2][2].Click=function(button)
CurrentMusicMode=&quot;Lower&quot;;
end;
buttons[2][3].Click=function(button)
CurrentMusicMode=&quot;Sharp&quot;;
end;
buttons[2][4].Click=function(button)
CurrentMusicMode=&quot;Flat&quot;;
end;
buttons[1][1].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new note length.&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
NoteLength=tostring(obj55.Text) or 1;
buttons[1][1].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][2].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter increment to snap notes to.&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Snap=tostring(obj55.Text) or 1;
buttons[1][2].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][3].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new volume (value from 0 to 11).&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Volume=math.min(11, math.max(0, tonumber(obj55.Text) or 8));
buttons[1][3].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][4].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new tempo (any value greater than 0).&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Tempo=(tonumber(obj55.Text) or 60)&lt;=0 and 60 or (tonumber(obj55.Text) or 60);
buttons[1][4].Refresh(button);
obj54.Parent=nil;
end)
end;


top=24;
for x=1,#buttons do
Across=0;
for y=1,#buttons[x] do
local button=Instance.new(&quot;TextButton&quot;);
button.Name=buttons[x][y].Name;
button.Position=UDim2.new(Across, 2, 0, top+(x-1)*18);
button.Size=UDim2.new(buttons[x][y].BarLength, y==#buttons[x] and -4 or -2, 0, 16);
Across=Across+buttons[x][y].BarLength;
buttons[x][y].Refresh(button);
button.BackgroundColor3=Options.ButtonColor;
button.Parent=obj40;
button.MouseButton1Down:connect(function()
buttons[x][y].Click(button);
end)
end
end
DescriptionLabel=Instance.new(&quot;TextLabel&quot;); DescriptionLabel.Size=UDim2.new(1, -4, 0, 16); DescriptionLabel.Position=UDim2.new(0, 2, 0, #buttons*18+top); DescriptionLabel.BackgroundColor3=Options.ButtonColor; DescriptionLabel.Parent=obj40;
obj41.Position=UDim2.new(0, 0, 0, #buttons*18+top+14+16);
obj40.Parent=gui;

function Active(p)
&#9;c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40:remove();
&#9;&#9;obj54.Parent=nil;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

player.Chatted:connect(function(msg)
&#9;if string.sub(msg:lower(), 1, 10)==&quot;load song/&quot; or string.sub(msg:lower(), 1, 9)==&quot;loadsong/&quot; or string.sub(msg:lower(), 1, 10)==&quot;load song?&quot; or string.sub(msg:lower(), 1, 9)==&quot;loadsong?&quot; then
&#9;&#9;string=string.sub(msg, math.min(string.find(msg, &quot;/&quot;), string.find(msg, &quot;?&quot;))+1);
&#9;&#9;--parse &apos;string&apos; to load the song.
&#9;end
end)

Streams={Main={}};
ActiveStream=&quot;Main&quot;;
Frames={};

DisplayMode=&quot;Bars&quot;;
PositionIndex=0;
Scale=25; --100 pixels per measure.
Frames={};
RefreshStaff=function()
&#9;obj52.Text=&quot;.    &quot;..ActiveStream;
&#9;for i,v in pairs(Frames) do v.Parent=nil; end
&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;if DisplayMode==&quot;Bars&quot; then
&#9;&#9;for i,v in pairs(AllNotes) do
&#9;&#9;&#9;if v[2]+v[3]&gt;PositionIndex and v[2]&lt;HighPos then
&#9;&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*v[3], (HighPos-v[2])*Scale), 1/14, 0);
&#9;&#9;&#9;&#9;f.Position=UDim2.new(0,math.max(0, (v[2]-PositionIndex))*Scale+5, 4/14-LetterToNumber(v[1], v[4])*1/28,0);
&#9;&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;&#9;f.Parent=obj41;
&#9;&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end;

function LetterToNumber(letter, config)
letter, up_scale = string.gsub(letter, &quot;%+&quot;, &quot;&quot;);
void, up2 = string.gsub(config, &quot;%+&quot;, &quot;&quot;);
up_scale=up_scale+up2;
letter, down_scale = string.gsub(letter, &quot;%-&quot;, &quot;&quot;);
void, down2 = string.gsub(config, &quot;%-&quot;, &quot;&quot;);
down_scale=down_scale+down2;
letter=string.gsub(letter, &quot;%#&quot;, &quot;&quot;);
letter=string.gsub(letter, &quot;b&quot;, &quot;&quot;);
base=0+up_scale*7-down_scale*7;
if letter==&quot;A&quot; then return base; end
if letter==&quot;B&quot; then return base+1; end
if letter==&quot;C&quot; then return base+2; end
if letter==&quot;D&quot; then return base+3; end
if letter==&quot;E&quot; then return base+4; end
if letter==&quot;F&quot; then return base+5; end
if letter==&quot;G&quot; then return base+6; end
end

RefreshStaff();

CurrentNote=nil;
obj40.MouseButton1Down:connect(function(x,y)
&#9;obj54.Parent=nil;
&#9;if CurrentMusicMode==&quot;Place&quot; then
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;if y&gt;=0 and y&lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 then
&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*NoteLength, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;f.Parent=obj41;
&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;length=NoteLength;
&#9;&#9;&#9;extra_info=&quot;&quot;;
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Clone&quot; then
&#9;&#9;local x1=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y1=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;length=0;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;if y1&gt;pos and y1&lt;pos+1/14 and x1&gt;AllNotes[i][2] and x1&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;length=AllNotes[i][3];
&#9;&#9;&#9;&#9;extra_info=AllNotes[i][4];
&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;print(y, length);
&#9;&#9;if y&gt;=0 and y&lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 and length&gt;0 then
&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Move&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;length=AllNotes[i][3];
&#9;&#9;&#9;&#9;&#9;extra_info=AllNotes[i][4];
&#9;&#9;&#9;&#9;&#9;table.remove(AllNotes,i);
&#9;&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;&#9;RefreshStaff();
&#9;&#9;&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Delete&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;table.remove(AllNotes,i);
&#9;&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;RefreshStaff();
&#9;elseif CurrentMusicMode==&quot;Sharp&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;if string.find(AllNotes[i][1], &quot;b&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.gsub(AllNotes[i][1], &quot;b&quot;, &quot;&quot;); --destroy flat sign
&#9;&#9;&#9;&#9;&#9;elseif string.find(AllNotes[i][1], &quot;#&quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;#&quot;; --add sharp sign.
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Flat&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;if string.find(AllNotes[i][1], &quot;#&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.gsub(AllNotes[i][1], &quot;#&quot;, &quot;&quot;); --destroy sharp sign
&#9;&#9;&#9;&#9;&#9;elseif string.find(AllNotes[i][1], &quot;b&quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;b&quot;; --add flat sign.
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Raise&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][1], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.sub(AllNotes[i][1], 1, f-1)..string.sub(AllNotes[i][1], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;-&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;-&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Lower&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][1], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;--remove the plus sign, add a plus sign in extra
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.sub(AllNotes[i][1], 1, f-1)..string.sub(AllNotes[i][1], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- found a minus sign in extra. Remove that.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- no minus sign in extra. Add a plus sign.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;-- no plus sign in main. Add a minus sign.
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;-&quot;; --add minus sign in main.
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- found a minus sign in extra. Remove that.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- no minus sign in extra. Add a plus sign.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)
obj40.MouseButton1Up:connect(function(x,y)
&#9;if CurrentNote~=nil then
&#9;&#9;position=PositionIndex+(CurrentNote.Position.X.Offset-5)/Scale;
&#9;&#9;height=standardize(round(((0.50-CurrentNote.Position.Y.Scale-1/28)*28), 1));
&#9;&#9;AllNotes[#AllNotes+1]={toletter(height),position, length, extra_info}
&#9;end
&#9;CurrentNote=nil;
end)
obj40.MouseMoved:connect(function(x,y)
&#9;if CurrentNote~=nil then
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;if y&gt;=0 and y &lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 then
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;CurrentNote.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;CurrentNote.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;CurrentNote.Parent=obj41;
&#9;&#9;end
&#9;end
&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;local FoundNote=false;
&#9;for i=#AllNotes,1,-1 do
&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;DescriptionLabel.Text=&quot;Note: &quot; .. AllNotes[i][1]..&quot; - Position: &quot; .. AllNotes[i][2] .. &quot; - Length: &quot; .. AllNotes[i][3];
&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;FoundNote=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;if not FoundNote then
&#9;&#9;DescriptionLabel.Text=&quot;&quot;;
&#9;end
end)

function standardize(height)
&#9;local nh=40;
&#9;while height&lt;0 do height=height+7; nh=nh-12; end
&#9;while height&gt;=7 do height=height-7; nh=nh+12; end
&#9;if height==6 then nh=nh+11; end
&#9;if height==5 then nh=nh+9; end
&#9;if height==4 then nh=nh+7; end
&#9;if height==3 then nh=nh+5; end
&#9;if height==2 then nh=nh+4; end
 &#9;if height==1 then nh=nh+2; end
&#9;return nh;
end

function toletter(num)
&#9;num=num-49;
&#9;local case=num&gt;0 and 1 or -1;
&#9;local octave_change=&quot;&quot;;
&#9;while num&lt;0 do num=num+12; octave_change=octave_change..&quot;-&quot;; end
&#9;while num&gt;=12 do num=num-12; octave_change=octave_change..&quot;+&quot;; end
&#9;if num==0 then return &quot;A&quot; .. octave_change; end
&#9;if num==1 then return &quot;A#&quot; .. octave_change; end
&#9;if num==2 then return &quot;B&quot; .. octave_change; end
&#9;if num==3 then return &quot;C&quot; .. octave_change; end
&#9;if num==4 then return &quot;C#&quot; .. octave_change; end
&#9;if num==5 then return &quot;D&quot; .. octave_change; end
&#9;if num==6 then return &quot;D#&quot; .. octave_change; end
&#9;if num==7 then return &quot;E&quot; .. octave_change; end
&#9;if num==8 then return &quot;F&quot; .. octave_change; end
&#9;if num==9 then return &quot;F#&quot; .. octave_change; end
&#9;if num==10 then return &quot;G&quot; .. octave_change; end
&#9;if num==11 then return &quot;G#&quot; .. octave_change; end
end

</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX437">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Shape</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Shape()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;shape&quot;);
&#9;&#9;made_change=false;
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;if v.className==&quot;Part&quot; then
&#9;&#9;&#9;&#9;prior[i]={v, v.CFrame, v.Size, v.Shape};
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;prior[i]={v, v.CFrame, v.Size};
&#9;&#9;&#9;end
&#9;&#9;&#9;if FunctionData.Shape.Mode==&quot;Brick&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Block;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Brick&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Block then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Block;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Block};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Wedge&quot; and v.className~=&quot;WedgePart&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;WedgePart&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Sphere&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Ball;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Sphere&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Ball then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Ball;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Ball};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Cylinder&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Cylinder;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Cylinder&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Cylinder then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Cylinder;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Cylinder};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Truss&quot; and v.className~=&quot;TrussPart&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;TrussPart&quot;);
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;SpawnLocation&quot; and v.className~=&quot;SpawnLocation&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;SpawnLocation&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Seat&quot; and v.className~=&quot;Seat&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Seat&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;VehicleSeat&quot; and v.className~=&quot;VehicleSeat&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;VehicleSeat&quot;);
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Skateboard&quot; and v.className~=&quot;SkateboardPlatform&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;SkateboardPlatform&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if made_change then History.Action(&quot;Shape&quot;, parts, prior, after); end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Shape = FunctionData.Shape or {};
FunctionData.Shape.Mode = FunctionData.Shape.Mode or &quot;Brick&quot;;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(215/255,247/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Shape&quot; obj40.Position=UDim2.new(0,243,1,-182) obj40.Size=UDim2.new(0,84,0,182)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Brick&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Brick&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;Wedge&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,22) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;Wedge&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;Sphere&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,42) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Sphere&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;Truss&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,62) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Truss&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;Cylinder&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,82) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Cylinder&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255)
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;SpawnLocation&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,102) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;SpawnLocation&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;Seat&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,122) obj47.Size=UDim2.new(0,80,0,18) obj47.Text=&quot;Seat&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;VehicleSeat&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,142) obj48.Size=UDim2.new(0,80,0,18) obj48.Text=&quot;VehicleSeat&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;SkateboardPlatform&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,162) obj49.Size=UDim2.new(0,80,0,18) obj49.Text=&quot;Skateboard&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

function RefreshButtons()
obj41.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Brick&quot; and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Wedge&quot; and Options.SelectedColor or Options.ButtonColor;
obj43.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Sphere&quot; and Options.SelectedColor or Options.ButtonColor;
obj44.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Truss&quot; and Options.SelectedColor or Options.ButtonColor;
obj45.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Cylinder&quot; and Options.SelectedColor or Options.ButtonColor;
obj46.BackgroundColor3 = FunctionData.Shape.Mode==&quot;SpawnLocation&quot; and Options.SelectedColor or Options.ButtonColor;
obj47.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Seat&quot; and Options.SelectedColor or Options.ButtonColor;
obj48.BackgroundColor3 = FunctionData.Shape.Mode==&quot;VehicleSeat&quot; and Options.SelectedColor or Options.ButtonColor;
obj49.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Skateboard&quot; and Options.SelectedColor or Options.ButtonColor;
end

obj41.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Brick&quot;; RefreshButtons(); end)
obj42.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Wedge&quot;; RefreshButtons(); end)
obj43.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Sphere&quot;; RefreshButtons(); end)
obj44.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Truss&quot;; RefreshButtons(); end)
obj45.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Cylinder&quot;; RefreshButtons(); end)
obj46.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;SpawnLocation&quot;; RefreshButtons(); end)
obj47.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Seat&quot;; RefreshButtons(); end)
obj48.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;VehicleSeat&quot;; RefreshButtons(); end)
obj49.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Skateboard&quot;; RefreshButtons(); end)

RefreshButtons();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX438">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Surface</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Surface()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if p[2].Target~=nil and FunctionData.Surface.Choosing then
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;FunctionData.Surface.Choosing=false;
&#9;&#9;&#9;FunctionData.Surface.Face=p[2].TargetSurface;
&#9;&#9;&#9;RefreshButtons();
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if FunctionData.Surface.Choosing and p[2].Target~=nil then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;&#9;sb.TargetSurface=p[2].TargetSurface;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;made_a_change=false;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;surface&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;if FunctionData.Surface.Face==Enum.NormalId.Left then
&#9;&#9;&#9;&#9;prior[i]=v.LeftSurface;
&#9;&#9;&#9;&#9;v.LeftSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.LeftSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Right then
&#9;&#9;&#9;&#9;prior[i]=v.RightSurface;
&#9;&#9;&#9;&#9;v.RightSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.RightSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Top then
&#9;&#9;&#9;&#9;prior[i]=v.TopSurface;
&#9;&#9;&#9;&#9;v.TopSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.TopSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Bottom then
&#9;&#9;&#9;&#9;prior[i]=v.BottomSurface;
&#9;&#9;&#9;&#9;v.BottomSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.BottomSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Front then
&#9;&#9;&#9;&#9;prior[i]=v.FrontSurface;
&#9;&#9;&#9;&#9;v.FrontSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.FrontSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Back then
&#9;&#9;&#9;&#9;prior[i]=v.BackSurface;
&#9;&#9;&#9;&#9;v.BackSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.BackSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Action(&quot;Surface&quot;, parts, FunctionData.Surface.Face, prior, FunctionData.Surface.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Surface = FunctionData.Surface or {};
FunctionData.Surface.Mode = FunctionData.Surface.Mode or Enum.SurfaceType.Smooth;
FunctionData.Surface.Face = FunctionData.Surface.Face or Enum.NormalId.Left;
FunctionData.Surface.Choosing = false;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Surface&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,306,0,60)
obj41=Instance.new(&quot;ImageButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Image=&quot;http://www.roblox.com/Asset/?ID=16171080&quot; obj41.Name=&quot;Weld&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,192,0,2) obj41.Size=UDim2.new(0,36,0,36)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Image=&quot;http://www.roblox.com/Asset/?ID=16171136&quot; obj42.Name=&quot;Universal&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,116,0,2) obj42.Size=UDim2.new(0,36,0,36)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Image=&quot;http://www.roblox.com/Asset/?ID=16171065&quot; obj43.Name=&quot;Hinge&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,230,0,2) obj43.Size=UDim2.new(0,36,0,36)
obj44=Instance.new(&quot;ImageButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Image=&quot;http://www.roblox.com/Asset/?ID=16171066&quot; obj44.Name=&quot;Inlet&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,78,0,2) obj44.Size=UDim2.new(0,36,0,36)
obj45=Instance.new(&quot;ImageButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Image=&quot;http://www.roblox.com/Asset/?ID=16171076&quot; obj45.Name=&quot;Smooth&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,2) obj45.Size=UDim2.new(0,36,0,36)
obj46=Instance.new(&quot;ImageButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Image=&quot;http://www.roblox.com/Asset/?ID=16171077&quot; obj46.Name=&quot;Studs&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,40,0,2) obj46.Size=UDim2.new(0,36,0,36)
obj47=Instance.new(&quot;ImageButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Image=&quot;http://www.roblox.com/Asset/?ID=16171070&quot; obj47.Name=&quot;Motor&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,268,0,2) obj47.Size=UDim2.new(0,36,0,36)
obj48=Instance.new(&quot;ImageButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Image=&quot;http://www.roblox.com/Asset/?ID=16171062&quot; obj48.Name=&quot;Glue&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,154,0,2) obj48.Size=UDim2.new(0,36,0,36)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Left&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,40) obj49.Size=UDim2.new(0,41,0,18) obj49.Text=&quot;Left&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Right&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,45,0,40) obj50.Size=UDim2.new(0,42,0,18) obj50.Text=&quot;Right&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;Top&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,89,0,40) obj51.Size=UDim2.new(0,41,0,18) obj51.Text=&quot;Top&quot; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj52=Instance.new(&quot;TextButton&quot;) obj52.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj52.BorderColor3=Color3.new(27/255,42/255,53/255) obj52.Name=&quot;Bottom&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0,132,0,40) obj52.Size=UDim2.new(0,42,0,18) obj52.Text=&quot;Bottom&quot; obj52.TextColor3=Color3.new(27/255,42/255,53/255)
obj53=Instance.new(&quot;TextButton&quot;) obj53.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj53.BorderColor3=Color3.new(27/255,42/255,53/255) obj53.Name=&quot;Front&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0,176,0,40) obj53.Size=UDim2.new(0,41,0,18) obj53.Text=&quot;Front&quot; obj53.TextColor3=Color3.new(27/255,42/255,53/255)
obj54=Instance.new(&quot;TextButton&quot;) obj54.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj54.BorderColor3=Color3.new(27/255,42/255,53/255) obj54.Name=&quot;Back&quot; obj54.Parent=obj40 obj54.Position=UDim2.new(0,219,0,40) obj54.Size=UDim2.new(0,42,0,18) obj54.Text=&quot;Back&quot; obj54.TextColor3=Color3.new(27/255,42/255,53/255)
obj55=Instance.new(&quot;TextButton&quot;) obj55.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj55.BorderColor3=Color3.new(27/255,42/255,53/255) obj55.Name=&quot;Pick&quot; obj55.Parent=obj40 obj55.Position=UDim2.new(0,263,0,40) obj55.Size=UDim2.new(0,41,0,18) obj55.Text=&quot;Pick&quot; obj55.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

sb=Instance.new(&quot;SurfaceSelection&quot;);
sb.Color=Options.SurfaceSelectionColor;
sb.Visible=false;
sb.Parent=obj40;

function RefreshButtons()
for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48}) do
v.BackgroundColor3=Options.ButtonColor;
end
if FunctionData.Surface.Mode==Enum.SurfaceType.Weld then obj41.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Universal then obj42.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Hinge then obj43.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Inlet then obj44.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Smooth then obj45.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Studs then obj46.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Motor then obj47.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Glue then obj48.BackgroundColor3=Options.SelectedColor; end
for i,v in pairs({obj49, obj50, obj51, obj52, obj53, obj54, obj55}) do
v.BackgroundColor3=Options.ButtonColor;
end
if FunctionData.Surface.Choosing then
obj55.BackgroundColor3=Options.SelectedColor;
else
if FunctionData.Surface.Face==Enum.NormalId.Left then obj49.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Right then obj50.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Top then obj51.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Bottom then obj52.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Front then obj53.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Back then obj54.BackgroundColor3=Options.SelectedColor; end
end
end

obj41.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Weld; RefreshButtons(); end)
obj42.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Universal; RefreshButtons(); end)
obj43.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Hinge; RefreshButtons(); end)
obj44.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Inlet; RefreshButtons(); end)
obj45.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Smooth; RefreshButtons(); end)
obj46.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Studs; RefreshButtons(); end)
obj47.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Motor; RefreshButtons(); end)
obj48.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Glue; RefreshButtons(); end)

obj49.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Left; RefreshButtons(); end)
obj50.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Right; RefreshButtons(); end)
obj51.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Top; RefreshButtons(); end)
obj52.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Bottom; RefreshButtons(); end)
obj53.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Front; RefreshButtons(); end)
obj54.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Back; RefreshButtons(); end)

obj55.MouseButton1Down:connect(function()
FunctionData.Surface.Choosing=true;
sb.Adornee=nil;
sb.Visible=true;
RefreshButtons();
end)
end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX439">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Elasticity</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Elasticity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Elasticity.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Elasticity.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;elasticity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Elasticity;
&#9;&#9;&#9;v.Elasticity=FunctionData.Elasticity.value;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Elasticity&quot;, parts, prior, FunctionData.Elasticity.value);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Elasticity = FunctionData.Elasticity or {};
FunctionData.Elasticity.value = FunctionData.Elasticity.value or .5;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Elasticity&quot; obj40.Position=UDim2.new(0,243,1,-22) obj40.Size=UDim2.new(0,84,0,22)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Transparency&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text=FunctionData.Elasticity.value;
obj40.Parent=obj1;

TB.insert(obj41, obj42);

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX440">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">FormFactor</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.FormFactor()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;formfactor&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.FormFactor;
&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;v.FormFactor=FunctionData.FormFactor.Mode;
&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;after[i]=v.FormFactor;
&#9;&#9;end
&#9;&#9;History.Action(&quot;FormFactor&quot;, parts, prior, after);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.FormFactor = FunctionData.FormFactor or {};
FunctionData.FormFactor.Mode = FunctionData.FormFactor.Mode or Enum.FormFactor.Custom;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;FormFactor&quot; obj40.Position=UDim2.new(0,243,1,-82) obj40.Size=UDim2.new(0,84,0,82)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Plate&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Plate&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;Symmetric&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,22) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;Symmetric&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;Brick&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,42) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Brick&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;Custom&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,62) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Custom&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

function RefreshButtons()
obj41.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Plate and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Symmetric and Options.SelectedColor or Options.ButtonColor;
obj43.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Brick and Options.SelectedColor or Options.ButtonColor;
obj44.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Custom and Options.SelectedColor or Options.ButtonColor;
end

obj41.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Plate;
RefreshButtons();
end)
obj42.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Symmetric;
RefreshButtons();
end)
obj43.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Brick;
RefreshButtons();
end)
obj44.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Custom;
RefreshButtons();
end)

RefreshButtons();

end
</string>
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBX441">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Save</string>
						<ProtectedString name="Source">admins={&quot;julialy&quot;,&quot;noobv11&quot;}
function elementInTable(tab,element) for _,a in pairs(tab) do if a == element then return true end end return false end

classes={
Fire={
{&quot;Color&quot;,&quot;color3&quot;,Color3.new(255 / 255, 127 / 255, 0 / 255)},
{&quot;Enabled&quot;,&quot;boolean&quot;,true},
{&quot;Heat&quot;,&quot;number&quot;,9},
{&quot;Name&quot;,&quot;string&quot;,&quot;Mesh&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;SecondaryColor&quot;,&quot;color3&quot;,Color3.new(255 / 255, 0 / 255, 0 / 255)},
{&quot;Size&quot;,&quot;number&quot;,5},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
Smoke={
{&quot;Color&quot;,&quot;color3&quot;,Color3.new(1,1,1)},
{&quot;Enabled&quot;,&quot;boolean&quot;,true},
{&quot;Name&quot;,&quot;string&quot;,&quot;Mesh&quot;},
{&quot;Opacity&quot;,&quot;number&quot;,0.5},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;RiseVelocity&quot;,&quot;number&quot;,1},
{&quot;Size&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
BlockMesh={
{&quot;Name&quot;,&quot;string&quot;,&quot;Mesh&quot;},
{&quot;Offset&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Scale&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;VertexColor&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
CylinderMesh={
{&quot;Name&quot;,&quot;string&quot;,&quot;Mesh&quot;},
{&quot;Offset&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Scale&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;VertexColor&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
SpecialMesh={
{&quot;MeshId&quot;,&quot;string&quot;,&quot;&quot;},
{&quot;MeshType&quot;,&quot;enum&quot;,Enum.MeshType.Head},
{&quot;Name&quot;,&quot;string&quot;,&quot;Mesh&quot;},
{&quot;Offset&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Scale&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;TextureId&quot;,&quot;string&quot;,&quot;&quot;},
{&quot;VertexColor&quot;,&quot;vector3&quot;,Vector3.new(1, 1, 1)},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
Decal={
{&quot;Shiny&quot;,&quot;number&quot;,20},
{&quot;Specular&quot;,&quot;number&quot;,0},
{&quot;Texture&quot;,&quot;string&quot;,&quot;&quot;},
{&quot;Face&quot;,&quot;enum&quot;,Enum.NormalId.Front},
{&quot;Name&quot;,&quot;string&quot;,&quot;Decal&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
Part={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Shape&quot;,&quot;enum&quot;,Enum.PartType.Block},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
},
Seat={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Shape&quot;,&quot;enum&quot;,Enum.PartType.Block},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
},
WedgePart={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
},
TrussPart={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Truss&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Style&quot;,&quot;enum&quot;,Enum.Style[&quot;Alternating Supports&quot;]},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,2},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Universal},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
},
SpawnLocation={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Shape&quot;,&quot;enum&quot;,Enum.PartType.Block},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
},
SkateboardPlatform={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Shape&quot;,&quot;enum&quot;,Enum.PartType.Block},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
{&quot;Steer&quot;,&quot;number&quot;,0},
{&quot;StickyWheels&quot;,&quot;boolean&quot;,true},
{&quot;Throttle&quot;,&quot;number&quot;,0},
},
VehicleSeat={
{&quot;BrickColor&quot;,&quot;brickcolor&quot;,BrickColor.new(&quot;Medium stone grey&quot;)},
{&quot;Material&quot;,&quot;enum&quot;,Enum.Material.Plastic},
{&quot;Reflectance&quot;,&quot;number&quot;,0},
{&quot;Transparency&quot;,&quot;number&quot;,0},
{&quot;Name&quot;,&quot;text&quot;,&quot;Part&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;Shape&quot;,&quot;enum&quot;,Enum.PartType.Block},
{&quot;formFactor&quot;,&quot;enum&quot;,Enum.FormFactor.Brick},
{&quot;Size&quot;,&quot;vector3&quot;,Vector3.new(4, 1.2, 2)},
{&quot;RotVelocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Velocity&quot;,&quot;vector3&quot;,Vector3.new(0, 0, 0)},
{&quot;Elasticity&quot;,&quot;number&quot;,0.5},
{&quot;Friction&quot;,&quot;number&quot;,0.3},
{&quot;Anchored&quot;,&quot;boolean&quot;,false},
{&quot;CanCollide&quot;,&quot;boolean&quot;,true},
{&quot;Locked&quot;,&quot;boolean&quot;,false},
{&quot;ResizeIncrement&quot;,&quot;number&quot;,1},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
{&quot;BackSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;BottomSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Inlet},
{&quot;FrontSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;LeftSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;RightSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Smooth},
{&quot;TopSurface&quot;,&quot;enum&quot;,Enum.SurfaceType.Studs},
{&quot;CFrame&quot;,&quot;cframe&quot;,CFrame.new()},
{&quot;HeadsUpDisplay&quot;,&quot;boolean&quot;,true},
{&quot;MaxSpeed&quot;,&quot;number&quot;,25},
{&quot;Steer&quot;,&quot;number&quot;,0},
{&quot;Throttle&quot;,&quot;number&quot;,0},
{&quot;Torque&quot;,&quot;number&quot;,10},
{&quot;TurnSpeed&quot;,&quot;number&quot;,1},
},


Model={
{&quot;Name&quot;,&quot;string&quot;,&quot;Model&quot;},
{&quot;Parent&quot;,&quot;object&quot;,nil},
{&quot;archivable&quot;,&quot;boolean&quot;,true},
},
}
gui_parts={}
text=[[print(&quot;Thanks for using blobbyblob&apos;s online saving script.&quot;); ]]

function allowed(part)
&#9;if not part.archivable then return false; end
&#9;if elementInTable(admins,game.Players.LocalPlayer.Name) then return true end
&#9;if string.len(part.Name)&gt;=17 then
&#9;&#9;if string.sub(part.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;&#9;p=string.sub(part.Name,17)
&#9;&#9;&#9;if game.Players.LocalPlayer:findFirstChild(&quot;BlobbyblobBuildToolStats&quot;) then
&#9;&#9;&#9;&#9;if game.Players.LocalPlayer.BlobbyblobBuildToolStats:findFirstChild(&quot;CanSave_&quot;..p) then
&#9;&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return false
end

function recursive(root)
&#9;if not root.archivable then return end
&#9;for count,a in pairs(root:GetChildren()) do
&#9;&#9;if not (a:IsA(&quot;Part&quot;) or a:IsA(&quot;WedgePart&quot;) or a:IsA(&quot;TrussPart&quot;)) or allowed(a) then
&#9;&#9;&#9;table.insert(gui_parts,a)
&#9;&#9;end
&#9;&#9;if #a:GetChildren()&gt;0 then recursive(a) end
&#9;end
end

recursive(workspace)
q=[[&quot;]]
end_line_chunk=&quot;; &quot;
start_at=1
round_to = 1e-5;
round=function(number,multiple)
&#9;return math.floor(number/multiple+.5)*multiple
end
for _,a in pairs(gui_parts) do
&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;=Instance.new(&quot;..q..a.className..q..&quot;)&quot;..end_line_chunk
&#9;if classes[a.className]~=nil then
&#9;&#9;for b,c in pairs(classes[a.className]) do
&#9;&#9;&#9;if c[2]==&quot;boolean&quot; then
&#9;&#9;&#9;&#9;if c[3]~=a[c[1]] then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..&quot;=&quot;..tostring(a[c[1]])..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;number&quot; then
&#9;&#9;&#9;&#9;if round(a[c[1]], round_to)~=c[3] then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..&quot;=&quot;..tostring(a[c[1]])..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;text&quot; or c[2]==&quot;string&quot; then
&#9;&#9;&#9;&#9;if c[3]~=a[c[1]] then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=&quot;]]..tostring(a[c[1]])..[[&quot;]]..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;brickcolor&quot; then
&#9;&#9;&#9;&#9;if c[3]~=a[c[1]] then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=BrickColor.new(&quot;]]..tostring(a[c[1]])..[[&quot;)]]..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;udim2&quot; then
&#9;&#9;&#9;&#9;if c[3].X.Scale~=round(a[c[1]].X.Scale, round_to) or c[3].X.Offset~=round(a[c[1]].X.Offset, round_to) or c[3].Y.Scale~=round(a[c[1]].Y.Scale, round_to) or c[3].Y.Offset~=round(a[c[1]].Y.Offset, round_to) then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=UDim2.new(]]..tostring(a[c[1]].X.Scale)..&quot;,&quot;..tostring(a[c[1]].X.Offset)..&quot;,&quot;..tostring(a[c[1]].Y.Scale)..&quot;,&quot;..tostring(a[c[1]].Y.Offset)..[[)]]..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;object&quot; then
&#9;&#9;&#9;&#9;foundparent=false
&#9;&#9;&#9;&#9;for d,e in pairs(gui_parts) do
&#9;&#9;&#9;&#9;&#9;if a.Parent==e then
&#9;&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..&quot;=obj&quot;..tostring(d)..end_line_chunk
&#9;&#9;&#9;&#9;&#9;&#9;foundparent=true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if not foundparent then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..&quot;=workspace&quot;..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;color3&quot; then
&#9;&#9;&#9;&#9;if round(a[c[1]].r, round_to)~=c[3].r or round(a[c[1]].g, round_to)~=c[3].g or round(a[c[1]].b, round_to)~=c[3].b then
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=Color3.new(]]..tostring(round(a[c[1]].r*255,1))..&quot;/255,&quot;..tostring(round(a[c[1]].g*255,1))..&quot;/255,&quot;..tostring(round(a[c[1]].b*255,1))..&quot;/255&quot;..[[)]]..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;enum&quot; then
&#9;&#9;&#9;&#9;if a[c[1]]~=c[3] then
&#9;&#9;&#9;&#9;&#9;enum=&quot;&quot;;
&#9;&#9;&#9;&#9;&#9;e=tostring(a[c[1]]);
&#9;&#9;&#9;&#9;&#9;while e~=&quot;&quot; do
&#9;&#9;&#9;&#9;&#9;&#9;if string.find(e, &quot;%.&quot;)~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if string.find(string.sub(e, 1, string.find(e, &quot;%.&quot;)-1), &quot; &quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;enum=enum .. (string.len(enum)==0 and &quot;&quot; or &quot;.&quot;) .. string.sub(e, 1, string.find(e, &quot;%.&quot;)-1);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;enum=enum .. &quot;[\&quot;&quot; .. string.sub(e, 1, string.find(e, &quot;%.&quot;)-1) .. &quot;\&quot;]&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;e=string.sub(e, string.find(e, &quot;%.&quot;)+1);
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if string.find(e, &quot; &quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;enum=enum .. (string.len(enum)==0 and &quot;&quot; or &quot;.&quot;) .. e;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;enum=enum .. &quot;[\&quot;&quot; .. e .. &quot;\&quot;]&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;e=&quot;&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..&quot;=&quot;..tostring(enum)..end_line_chunk
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif c[2]==&quot;vector3&quot; then
&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=Vector3.new(]]..tostring(a[c[1]])..[[)]]..end_line_chunk
&#9;&#9;&#9;elseif c[2]==&quot;cframe&quot; then
&#9;&#9;&#9;&#9;text=text..&quot;obj&quot;..tostring(_-1+start_at)..&quot;.&quot;..c[1]..[[=CFrame.new(]]..tostring(a[c[1]])..[[)]]..end_line_chunk
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

Spawn(function()
wait(10);
script:remove();
end)

error(text)</ProtectedString>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX442">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Utility:Mesh Editor</string>
						<string name="Value">--[[ Mesh Editor ]]

meshes={
{&quot;Cone&quot;, &quot;http://www.roblox.com/asset/?id=1778999&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Square Corner&quot;, &quot;http://www.roblox.com/asset/?id=11294911&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Triangular Corner&quot;, &quot;http://www.roblox.com/asset/?id=11294922&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Vegetable Hat&quot;, &quot;http://www.roblox.com/asset/?id=1091940&quot;, {{&quot;Vegetable Hat&quot;, &quot;http://www.roblox.com/asset/?id=1091942&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Potted Plant&quot;, &quot;http://www.roblox.com/asset/?id=25920418&quot;, {{&quot;Green Plant&quot;, &quot;http://www.roblox.com/asset/?id=25920406&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bush&quot;, &quot;http://www.roblox.com/asset/?id=16659363&quot;, {{&quot;Bush&quot;, &quot;http://www.roblox.com/asset/?id=16659355&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Tree&quot;, &quot;rbxasset://fonts\\tree.mesh&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Coil&quot;, &quot;http://www.roblox.com/asset/?id=16606212&quot;, {{&quot;Gravity Coil&quot;, &quot;http://www.roblox.com/asset/?id=16606141&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Vine Mesh&quot;, &quot;http://www.roblox.com/asset/?id=13108500&quot;, {{&quot;Vine&quot;, &quot;http://www.roblox.com/asset/?id=17585271&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Sapling&quot;, &quot;http://www.roblox.com/asset/?id=1090398&quot;, {{&quot;Sapling&quot;, &quot;http://www.roblox.com/asset/?id=1090399&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Cloud&quot;, &quot;http://www.roblox.com/asset/?id=1095708&quot;, {{&quot;Cloud&quot;, &quot;http://www.roblox.com/asset/?id=1095709&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Rock&quot;, &quot;http://www.roblox.com/asset/?id=1290033&quot;, {{&quot;Rock&quot;, &quot;http://www.roblox.com/asset/?id=1290030&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Igloo&quot;, &quot;http://www.roblox.com/asset/?id=41748257&quot;, {{&quot;Igloo&quot;, &quot;http://www.roblox.com/asset/?id=41748243&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Dominus&quot;, &quot;http://www.roblox.com/asset/?id=21057410&quot;, {{&quot;White Dominus&quot;, &quot;http://www.roblox.com/asset/?id=21057378&quot;}, {&quot;Red Dominus&quot;, &quot;http://www.roblox.com/asset/?id=31100020&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Cheese&quot;, &quot;http://www.roblox.com/asset/?id=1090700&quot;, {{&quot;Cheese&quot;, &quot;http://www.roblox.com/asset/?id=1090703&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Book&quot;, &quot;http://www.roblox.com/asset/?id=1136139&quot;, {{&quot;Blank Book&quot;, &quot;http://www.roblox.com/asset/?id=9644371&quot;}, {&quot;Roblox Joke Book&quot;, &quot;http://www.roblox.com/asset/?id=10055744&quot;}, {&quot;Fish Are Friends Not Food&quot;, &quot;http://www.roblox.com/asset/?id=8798201&quot;}, {&quot;Reading Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136349&quot;}, {&quot;Geography Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1138386&quot;}, {&quot;Biology Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136350&quot;}, {&quot;Chemistry Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1139751&quot;}, {&quot;Economics Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1143109&quot;}, {&quot;Math Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136146&quot;}, {&quot;Music Theory Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1139752&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Candle&quot;, &quot;http://www.roblox.com/asset/?id=10698598&quot;, {{&quot;Candle&quot;, &quot;http://www.roblox.com/asset/?id=10698599&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Plate&quot;, &quot;http://www.roblox.com/asset/?id=1028713&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bottle&quot;, &quot;http://www.roblox.com/asset/?id=29690481&quot;, {{&quot;Red Epic Sauce&quot;, &quot;http://www.roblox.com/asset/?id=29690498&quot;}, {&quot;Green Epic Sauce&quot;, &quot;http://www.roblox.com/asset/?id=38161930&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Ring&quot;, &quot;http://www.roblox.com/asset/?id=3270017&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Diamond&quot;, &quot;http://www.roblox.com/asset/?id=9756362&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bullet&quot;, &quot;http://www.roblox.com/asset/?id=10207677 &quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Sword&quot;, &quot;rbxasset://fonts/sword.mesh&quot;, {{&quot;Default Sword&quot;, &quot;rbxasset://textures/SwordTexture.png&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Stack of Disks&quot;, &quot;http://www.roblox.com/asset/?id=15720044&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Custom&quot;, &quot;&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
};
meta={
__index=function(t, i)
while i&gt;#t do
i=i-#t;
end
while i&lt;1 do
i=i+#t;
end
return t[i];
end};
setmetatable(meshes, meta);
for i,v in pairs(meshes) do
setmetatable(v[3], meta);
end


obj40=Instance.new(&quot;Frame&quot;) obj40.Position=UDim2.new(0,253,1,-200) obj40.Size=UDim2.new(0,94,0,92)
obj41=Instance.new(&quot;TextButton&quot;) obj41.Name=&quot;Insert&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,90,0,16) obj41.Text=&quot;Insert Mesh&quot; obj41.FontSize=Enum.FontSize.Size9
obj42=Instance.new(&quot;TextButton&quot;) obj42.Name=&quot;Remove&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,20) obj42.Size=UDim2.new(0,90,0,16) obj42.Text=&quot;Remove Mesh&quot; obj42.FontSize=Enum.FontSize.Size9
obj43=Instance.new(&quot;TextButton&quot;) obj43.Name=&quot;Resize&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,38) obj43.Size=UDim2.new(0,90,0,16) obj43.Text=&quot;Scale Mesh&quot; obj43.FontSize=Enum.FontSize.Size9
obj44=Instance.new(&quot;TextButton&quot;) obj44.Name=&quot;Texture&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,56) obj44.Size=UDim2.new(0,90,0,16) obj44.Text=&quot;Texture&quot; obj44.FontSize=Enum.FontSize.Size9
obj45=Instance.new(&quot;TextButton&quot;) obj45.Name=&quot;VertexColor&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,74) obj45.Size=UDim2.new(0,90,0,16) obj45.Text=&quot;VertexColor&quot; obj45.FontSize=Enum.FontSize.Size9
obj40.Parent=obj1;

obj40.BackgroundColor3=Options.MainColor;
obj41.BackgroundColor3=Options.ButtonColor;
obj42.BackgroundColor3=Options.ButtonColor;
obj43.BackgroundColor3=Options.ButtonColor;
obj44.BackgroundColor3=Options.ButtonColor;
obj45.BackgroundColor3=Options.ButtonColor;

function Active(p)
&#9;c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40:remove();
&#9;&#9;if obj46~=nil then obj46.Parent=nil; end
&#9;&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;&#9;TB.remove(obj48);
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

--Adjust VertexColor
obj45.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
vertexColor=nil;
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil and v.Mesh:IsA(&quot;SpecialMesh&quot;) then
vertexColor=v.Mesh.VertexColor;
end
end
if vertexColor~=nil then
obj46=Instance.new(&quot;Frame&quot;) obj46.Name=&quot;VertexColorAdjuster&quot; obj46.Position=UDim2.new(0,350,1,-200) obj46.Size=UDim2.new(0,100,0,35)
obj47=Instance.new(&quot;TextLabel&quot;) obj47.Active=false obj47.BackgroundTransparency=1 obj47.Name=&quot;Label&quot; obj47.Parent=obj46 obj47.Position=UDim2.new(0,0,0,0) obj47.Size=UDim2.new(1,0,0,12) obj47.Text=&quot;Input VertexColor&quot; obj47.FontSize=Enum.FontSize.Size9
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;Button&quot; obj48.Parent=obj46 obj48.Position=UDim2.new(0,2,0,15) obj48.Size=UDim2.new(1,-4,0,18) obj48.Text=&quot;&quot; obj48.FontSize=Enum.FontSize.Size9 obj48.ZIndex=1;
obj49=Instance.new(&quot;TextBox&quot;) obj49.Name=&quot;TextBox&quot; obj49.Parent=obj46 obj49.Position=UDim2.new(0,2,0,15) obj49.Size=UDim2.new(1,-4,0,18) obj49.Text=&quot;&quot; obj49.ZIndex=2 obj49.FontSize=Enum.FontSize.Size9; obj49.Visible=false;
obj46.BackgroundColor3=Options.MainColor;
obj48.BackgroundColor3=Options.ButtonColor;
obj49.BackgroundColor3=Options.ButtonColor;
OriginalText=tostring(vertexColor*255);
obj48.Text=OriginalText;
obj49.Text=OriginalText;
TB.insert(obj49, obj48);
obj46.Parent=obj1;
local container=obj46;
obj48.Changed:connect(function()
if obj48.Text~=OriginalText then
entry=obj48.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
vertexColor=Vector3.new(x/255,y/255,z/255);
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
v.Mesh.VertexColor=vertexColor;
end
end
end
end
container.Parent=nil;
end
end)
end
end)

--Adjust texture
obj44.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
&#9;mesh=&quot;&quot;;
&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;if v:findFirstChild(&quot;Mesh&quot;) and v.Mesh:IsA(&quot;SpecialMesh&quot;) and v.Mesh.MeshType==Enum.MeshType.FileMesh then
&#9;&#9;&#9;mesh=v.Mesh.MeshId;
&#9;&#9;end
&#9;end
&#9;if mesh~=&quot;&quot; then
&#9;&#9;ind=0;
&#9;&#9;for i,v in pairs(meshes) do
&#9;&#9;&#9;if v[2]==mesh then
&#9;&#9;&#9;&#9;ind=i;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if ind==0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55=Instance.new(&quot;Frame&quot;) obj55.Name=&quot;CustomTexture&quot; obj55.Position=UDim2.new(0,obj40.AbsolutePosition.x+obj40.AbsoluteSize.x+5,0,-200) obj55.Size=UDim2.new(0,124,0,76); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;TextLabel&quot;) obj56.Active=false obj56.Name=&quot;Label&quot; obj56.Parent=obj55 obj56.Position=UDim2.new(0.5,0,0,6) obj56.Size=UDim2.new(0,0,0,0) obj56.Text=&quot;Custom Texture&quot; obj56.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextBox&quot;) obj57.Name=&quot;InputBox&quot; obj57.Parent=obj55 obj57.Position=UDim2.new(0,2,0,14) obj57.Size=UDim2.new(1,-4,0,16) obj57.Text=&quot;&lt;Texture URL&gt;&quot; obj57.FontSize=Enum.FontSize.Size9; obj57.ZIndex=2; obj57.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MaskButton&quot; obj58.Parent=obj55 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextLabel&quot;) obj59.Active=false obj59.BackgroundTransparency=1 obj59.Name=&quot;Description&quot; obj59.Parent=obj55 obj59.Position=UDim2.new(0,2,0,32) obj59.Size=UDim2.new(1,-4,0,42) obj59.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj59.TextWrap=true obj59.TextYAlignment=Enum.TextYAlignment.Top obj59.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj57, obj58);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj58.Text or &quot; &quot;)==nil and obj58.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj58.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;obj46=Instance.new(&quot;Frame&quot;); obj46.Size=UDim2.new(0, 124, 0, 18*8+2); obj46.Position=UDim2.new(0, 352, 0, -200); obj46.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;index=0;
&#9;&#9;&#9;for i=1,8 do
&#9;&#9;&#9;&#9;if i==1 or i==8 then
&#9;&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;&#9;button.Text=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;&#9;button.Name=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;button.Parent=obj46;
&#9;&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;index=index+(button.Name==&quot;Previous&quot; and -1 or 1);
&#9;&#9;&#9;&#9;&#9;&#9;for v=1,6 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;text=obj46:findFirstChild(tostring(v));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;text.Text=meshes[ind][index+v];
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;&#9;button.Text=meshes[ind][3][i+index-1][1];
&#9;&#9;&#9;&#9;&#9;button.Name=i-1;
&#9;&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;button.Parent=obj46;
&#9;&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;if meshes[ind][3][index+tonumber(button.Name)][1]==&quot;Custom&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55=Instance.new(&quot;Frame&quot;) obj55.Name=&quot;CustomTexture&quot; obj55.Position=UDim2.new(0,obj46.AbsolutePosition.x+obj46.AbsoluteSize.x+5,0,-200) obj55.Size=UDim2.new(0,124,0,76); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;TextLabel&quot;) obj56.Active=false obj56.Name=&quot;Label&quot; obj56.Parent=obj55 obj56.Position=UDim2.new(0.5,0,0,6) obj56.Size=UDim2.new(0,0,0,0) obj56.Text=&quot;Custom Texture&quot; obj56.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextBox&quot;) obj57.Name=&quot;InputBox&quot; obj57.Parent=obj55 obj57.Position=UDim2.new(0,2,0,14) obj57.Size=UDim2.new(1,-4,0,16) obj57.Text=&quot;&lt;Texture URL&gt;&quot; obj57.FontSize=Enum.FontSize.Size9; obj57.ZIndex=2; obj57.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MaskButton&quot; obj58.Parent=obj55 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextLabel&quot;) obj59.Active=false obj59.BackgroundTransparency=1 obj59.Name=&quot;Description&quot; obj59.Parent=obj55 obj59.Position=UDim2.new(0,2,0,32) obj59.Size=UDim2.new(1,-4,0,42) obj59.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj59.TextWrap=true obj59.TextYAlignment=Enum.TextYAlignment.Top obj59.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj57, obj58);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj58.Text or &quot; &quot;)==nil and obj58.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj58.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=obj1;
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=meshes[ind][3][index+tonumber(button.Name)][2];
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;obj46.Parent=obj1;
&#9;&#9;end
&#9;end
end)

--Rescale
obj43.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
scale=nil;
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
scale=v.Mesh.Scale;
end
end
if scale~=nil then
obj46=Instance.new(&quot;Frame&quot;) obj46.Name=&quot;ScaleAdjuster&quot; obj46.Position=UDim2.new(0,350,1,-200) obj46.Size=UDim2.new(0,100,0,35)
obj47=Instance.new(&quot;TextLabel&quot;) obj47.Active=false obj47.BackgroundTransparency=1 obj47.Name=&quot;Label&quot; obj47.Parent=obj46 obj47.Position=UDim2.new(0,0,0,0) obj47.Size=UDim2.new(1,0,0,12) obj47.Text=&quot;Input New Scale&quot; obj47.FontSize=Enum.FontSize.Size9
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;Button&quot; obj48.Parent=obj46 obj48.Position=UDim2.new(0,2,0,15) obj48.Size=UDim2.new(1,-4,0,18) obj48.Text=&quot;Type Scale Here&quot; obj48.FontSize=Enum.FontSize.Size9
obj49=Instance.new(&quot;TextBox&quot;) obj49.Name=&quot;TextBox&quot; obj49.Parent=obj46 obj49.Position=UDim2.new(0,2,0,15) obj49.Size=UDim2.new(1,-4,0,18) obj49.Text=&quot;Scale&quot; obj49.ZIndex=2 obj49.FontSize=Enum.FontSize.Size9
obj46.BackgroundColor3=Options.MainColor;
obj48.BackgroundColor3=Options.ButtonColor;
obj49.BackgroundColor3=Options.ButtonColor;
OriginalText=tostring(scale);
obj49.Text=OriginalText;
TB.insert(obj49, obj48);
obj46.Parent=obj1;
local container=obj46;
obj48.Changed:connect(function()
if obj48.Text~=OriginalText then
entry=obj48.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
scale=Vector3.new(x,y,z);
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
v.Mesh.Scale=scale;
end
end
end
end
container.Parent=nil;
end
end)

end
end)

--Remove Hit
obj42.MouseButton1Down:connect(function()
--clear out old guis;
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
for _,a in pairs(v:GetChildren()) do
if a:IsA(&quot;DataModelMesh&quot;) then
a:remove();
end
end
end
end)

--Insert Hit
obj41.MouseButton1Down:connect(function()
&#9;if obj46~=nil then obj46.Parent=nil; end
&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;obj46=Instance.new(&quot;Frame&quot;); obj46.Name=&quot;InsertChange&quot;; obj46.Position=UDim2.new(0,352,0,-200); obj46.Size=UDim2.new(0,100,0,146);
&#9;obj47=Instance.new(&quot;TextButton&quot;); obj47.Name=&quot;BlockMesh&quot;; obj47.Parent=obj46; obj47.Position=UDim2.new(0,2,0,2); obj47.Size=UDim2.new(1,-4,0,16); obj47.Text=&quot;Block Mesh&quot;; obj47.FontSize=Enum.FontSize.Size9;
&#9;obj48=Instance.new(&quot;TextButton&quot;); obj48.Name=&quot;CylinderMesh&quot;; obj48.Parent=obj46; obj48.Position=UDim2.new(0,2,0,20); obj48.Size=UDim2.new(1,-4,0,16); obj48.Text=&quot;Cylinder Mesh&quot;; obj48.FontSize=Enum.FontSize.Size9;
&#9;obj49=Instance.new(&quot;TextButton&quot;); obj49.Name=&quot;SphereMesh&quot;; obj49.Parent=obj46; obj49.Position=UDim2.new(0,2,0,38); obj49.Size=UDim2.new(1,-4,0,16); obj49.Text=&quot;Sphere Mesh&quot;; obj49.FontSize=Enum.FontSize.Size9;
&#9;obj50=Instance.new(&quot;TextButton&quot;); obj50.Name=&quot;BrickMesh&quot;; obj50.Parent=obj46; obj50.Position=UDim2.new(0,2,0,56); obj50.Size=UDim2.new(1,-4,0,16); obj50.Text=&quot;Brick Mesh&quot;; obj50.FontSize=Enum.FontSize.Size9;
&#9;obj51=Instance.new(&quot;TextButton&quot;); obj51.Name=&quot;HeadMesh&quot;; obj51.Parent=obj46; obj51.Position=UDim2.new(0,2,0,74); obj51.Size=UDim2.new(1,-4,0,16); obj51.Text=&quot;Head Mesh&quot;; obj51.FontSize=Enum.FontSize.Size9;
&#9;obj52=Instance.new(&quot;TextButton&quot;); obj52.Name=&quot;TorsoMesh&quot;; obj52.Parent=obj46; obj52.Position=UDim2.new(0,2,0,92); obj52.Size=UDim2.new(1,-4,0,16); obj52.Text=&quot;Torso Mesh&quot;; obj52.FontSize=Enum.FontSize.Size9;
&#9;obj53=Instance.new(&quot;TextButton&quot;); obj53.Name=&quot;WedgeMesh&quot;; obj53.Parent=obj46; obj53.Position=UDim2.new(0,2,0,110); obj53.Size=UDim2.new(1,-4,0,16); obj53.Text=&quot;Wedge Mesh&quot;; obj53.FontSize=Enum.FontSize.Size9;
&#9;obj54=Instance.new(&quot;TextButton&quot;); obj54.Name=&quot;FileMesh&quot;; obj54.Parent=obj46; obj54.Position=UDim2.new(0,2,0,128); obj54.Size=UDim2.new(1,-4,0,16); obj54.Text=&quot;File Mesh&quot;; obj54.FontSize=Enum.FontSize.Size9;
&#9;obj46.BackgroundColor3=Options.MainColor;
&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;obj48.BackgroundColor3=Options.ButtonColor;
&#9;obj49.BackgroundColor3=Options.ButtonColor;
&#9;obj50.BackgroundColor3=Options.ButtonColor;
&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;obj54.BackgroundColor3=Options.ButtonColor;
&#9;obj46.Parent=obj1;
&#9;obj47.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;BlockMesh&quot;, v); m.Scale=scale; end obj46.Parent=nil; end)
&#9;obj48.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;CylinderMesh&quot;, v); m.Scale=scale; end obj46.Parent=nil; end)
&#9;obj49.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Sphere; end obj46.Parent=nil; end)
&#9;obj50.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Brick; end obj46.Parent=nil; end)
&#9;obj51.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Head; end obj46.Parent=nil; end)
&#9;obj52.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Torso; end obj46.Parent=nil; end)
&#9;obj53.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Wedge; end obj46.Parent=nil; end)
&#9;obj54.MouseButton1Down:connect(function()
&#9;&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;&#9;obj55=Instance.new(&quot;Frame&quot;); obj55.Size=UDim2.new(0, 124, 0, 18*8+2); obj55.Position=UDim2.new(0, 457, 0, -200); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;index=0;
&#9;&#9;for i=1,8 do
&#9;&#9;&#9;if i==1 or i==8 then
&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;button.Text=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;button.Name=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;button.Parent=obj55;
&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;index=index+(button.Name==&quot;Previous&quot; and -1 or 1);
&#9;&#9;&#9;&#9;for v=1,6 do
&#9;&#9;&#9;&#9;text=obj55:findFirstChild(tostring(v));
&#9;&#9;&#9;&#9;text.Text=meshes[v+index][1];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;button.Text=meshes[i+index-1][1];
&#9;&#9;&#9;&#9;button.Name=i-1;
&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;button.Parent=obj55;
&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;if meshes[index+tonumber(button.Name)][1]==&quot;Custom&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;if obj56~=nil then obj56.Parent=nil; end
&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;Frame&quot;) obj56.Name=&quot;CustomTexture&quot; obj56.Position=UDim2.new(0,obj55.AbsolutePosition.x+obj55.AbsoluteSize.x+5,0,-200) obj56.Size=UDim2.new(0,124,0,76); obj56.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextLabel&quot;) obj57.Active=false obj57.Name=&quot;Label&quot; obj57.Parent=obj56 obj57.Position=UDim2.new(0.5,0,0,6) obj57.Size=UDim2.new(0,0,0,0) obj57.Text=&quot;Custom Texture&quot; obj57.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextBox&quot;) obj58.Name=&quot;InputBox&quot; obj58.Parent=obj56 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.ZIndex=2; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextButton&quot;) obj59.Name=&quot;MaskButton&quot; obj59.Parent=obj56 obj59.Position=UDim2.new(0,2,0,14) obj59.Size=UDim2.new(1,-4,0,16) obj59.Text=&quot;&lt;Texture URL&gt;&quot; obj59.FontSize=Enum.FontSize.Size9; obj59.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj60=Instance.new(&quot;TextLabel&quot;) obj60.Active=false obj60.BackgroundTransparency=1 obj60.Name=&quot;Description&quot; obj60.Parent=obj56 obj60.Position=UDim2.new(0,2,0,32) obj60.Size=UDim2.new(1,-4,0,42) obj60.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj60.TextWrap=true obj60.TextYAlignment=Enum.TextYAlignment.Top obj60.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj58, obj59);
&#9;&#9;&#9;&#9;&#9;&#9;obj59.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj59.Text or &quot; &quot;)==nil and obj59.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj59.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=obj1;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;local scale=Vector3.new(1,1,1);
&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;scale=m.Scale; m:remove();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;m=Instance.new(&quot;SpecialMesh&quot;, v);
&#9;&#9;&#9;&#9;&#9;&#9;m.Scale=scale;
&#9;&#9;&#9;&#9;&#9;&#9;m.MeshType=Enum.MeshType.FileMesh;
&#9;&#9;&#9;&#9;&#9;&#9;m.MeshId=meshes[index+tonumber(button.Name)][2];
&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=meshes[index+tonumber(button.Name)][3][1][2];
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;obj55.Parent=obj1;
&#9;end)
end)
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX443">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">CanCollide</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.CanCollide()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;cancollide&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]={v.CanCollide, v.Parent, v.CFrame};
&#9;&#9;&#9;v.CanCollide=FunctionData.CanCollide.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;CanCollide&quot;, parts, prior, FunctionData.CanCollide.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.CanCollide = FunctionData.CanCollide or {};
FunctionData.CanCollide.Mode = FunctionData.CanCollide.Mode or true;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(212/255,244/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;CanCollide&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;false&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;CanCollide: false&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;true&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;CanCollide: true&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.CanCollide.Mode = false;
&#9;obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.CanCollide.Mode = true;
&#9;obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX444">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">function GetParts</string>
						<string name="Value">--[[ GetParts ]]

function Recurse(t)
local p={}
for i,v in pairs(t) do
if v:IsA(&quot;BasePart&quot;) then table.insert(p,v); end
if #v:GetChildren()&gt;0 then
local parts=Recurse(v:GetChildren(),p);
for a,b in pairs(parts) do
table.insert(p,b);
end
end
end
return p;
end

function GetParts(t)
p=Recurse(t)
return p;
end
</string>
					</Properties>
				</Item>
				<Item class="Script" referent="RBX445">
					<Properties>
						<bool name="Archivable">true</bool>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Scripts (You can delete if you want)</string>
						<ProtectedString name="Source">print &apos;Hi world!&apos;
</ProtectedString>
					</Properties>
					<Item class="LocalScript" referent="RBX446">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Anchor_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Anchor()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;anchor&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]={v.Anchored, v.Parent, v.CFrame};
&#9;&#9;&#9;v.Anchored=FunctionData.Anchor.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Anchor&quot;, parts, prior, FunctionData.Anchor.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Anchor = FunctionData.Anchor or {};
FunctionData.Anchor.Mode = FunctionData.Anchor.Mode or true;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(212/255,244/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Anchor&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;true&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;Anchor Parts&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;false&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;Unanchor Parts&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.Anchor.Mode = true;
&#9;obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.Anchor.Mode = false;
&#9;obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX447">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">CanCollide_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.CanCollide()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;cancollide&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]={v.CanCollide, v.Parent, v.CFrame};
&#9;&#9;&#9;v.CanCollide=FunctionData.CanCollide.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;CanCollide&quot;, parts, prior, FunctionData.CanCollide.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.CanCollide = FunctionData.CanCollide or {};
FunctionData.CanCollide.Mode = FunctionData.CanCollide.Mode or true;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(212/255,244/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;CanCollide&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;false&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;CanCollide: false&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;true&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;CanCollide: true&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.CanCollide.Mode = false;
&#9;obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.CanCollide.Mode = true;
&#9;obj41.BackgroundColor3 = not FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = FunctionData.CanCollide.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX448">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Color_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Color()

mouse_colorCopy = nil;

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;if obj40~=nil then obj40.Parent=nil; end
&#9;&#9;if sb~=nil then sb.Parent=nil; end
&#9;&#9;return;
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if sb.Visible then
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;for i,v in pairs(FunctionData.Color.ColorList) do
&#9;&#9;&#9;&#9;if v==p[2].Target.BrickColor.Name then
&#9;&#9;&#9;&#9;&#9;FunctionData.Color.Choice = i;
&#9;&#9;&#9;&#9;&#9;RefreshColors();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Passive(p);
&#9;&#9;end
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;mouse_colorCopy = mouse_colorCopy or p[2];
&#9;&#9;if sb.Visible then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;end
&#9;&#9;local obj45=obj45;
&#9;&#9;Spawn(function()
&#9;&#9;&#9;mouse_over=mouse_over+1;
&#9;&#9;&#9;obj45.BackgroundTransparency=1;
&#9;&#9;&#9;obj45.TextTransparency=1;
&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;local mo=mouse_over;
&#9;&#9;&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;wait(.75)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj45.Text=p[2].Target.BrickColor.Name;
&#9;&#9;&#9;&#9;&#9;obj45.Position=UDim2.new(0,p[2].X-obj40.AbsolutePosition.x,0,p[2].Y-obj40.AbsolutePosition.y-obj45.AbsoluteSize.y);
&#9;&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;new={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;color&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.BrickColor;
&#9;&#9;&#9;if FunctionData.Color.Choice&lt;=143 then
&#9;&#9;&#9;&#9;v.BrickColor=BrickColor.new(FunctionData.Color.ColorList[FunctionData.Color.Choice or 10])
&#9;&#9;&#9;elseif FunctionData.Color.Choice==144 then
&#9;&#9;&#9;&#9;--painting a brick while the eyedropper is selected? Using the current mouseOver would be nice...
&#9;&#9;&#9;&#9;if mouse_colorCopy~=nil then
&#9;&#9;&#9;&#9;&#9;if mouse_colorCopy.Target then
&#9;&#9;&#9;&#9;&#9;&#9;v.BrickColor=mouse_colorCopy.Target.BrickColor;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Color.Choice==145 then
&#9;&#9;&#9;&#9;v.BrickColor=BrickColor.new(FunctionData.Color.ColorList[math.random(143)]);
&#9;&#9;&#9;end
&#9;&#9;&#9;new[i]=v.BrickColor;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Color&quot;, parts, prior, new);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

function RefreshColors()
&#9;for i=1,145 do
&#9;&#9;if i~=FunctionData.Color.Choice then
&#9;&#9;&#9;obj41:findFirstChild(i).BorderColor3=Color3.new(0,0,0);
&#9;&#9;else
&#9;&#9;&#9;obj41:findFirstChild(FunctionData.Color.Choice).BorderColor3=Options.SelectedColor;
&#9;&#9;end
&#9;end&#9;
end

FunctionData.Color = FunctionData.Color or {};
FunctionData.Color.ColorList=FunctionData.Color.ColorList or {&quot;Institutional white&quot;,&quot;White&quot;,&quot;Phosph. White&quot;,&quot;Transparent&quot;,&quot;Light stone grey&quot;,&quot;Mid gray&quot;,&quot;Light grey&quot;,&quot;Tr. Brown&quot;,&quot;Light grey metallic&quot;,&quot;Medium stone grey&quot;,&quot;Silver&quot;,&quot;Grey&quot;,&quot;Silver flip/flop&quot;,&quot;Gun metallic&quot;,&quot;Dark grey&quot;,&quot;Dark stone grey&quot;,&quot;Dark grey metallic&quot;,&quot;Black metallic&quot;,&quot;Black&quot;,&quot;Really black&quot;,&quot;Light red&quot;,&quot;Pastel orange&quot;,&quot;Tr. Flu. Reddish orange&quot;,&quot;Medium red&quot;,&quot;Tr. Red&quot;,&quot;Bright red&quot;,&quot;Really red&quot;,&quot;Dusty Rose&quot;,&quot;Dark red&quot;,&quot;Red flip/flop&quot;,&quot;Sand red&quot;,&quot;Light orange&quot;,&quot;Medium orange&quot;,&quot;Warm yellowish orange&quot;,&quot;Bright orange&quot;,&quot;Deep orange&quot;,&quot;Neon orange&quot;,&quot;Flame reddish orange&quot;,&quot;CGA brown&quot;,&quot;Dark orange&quot;,&quot;Br. yellowish orange&quot;,&quot;Br. reddish orange&quot;,&quot;Med. yellowish orange&quot;,&quot;Curry&quot;,&quot;Dark Curry&quot;,&quot;Light orange brown&quot;,&quot;Pastel brown&quot;,&quot;Yellow flip/flop&quot;,&quot;Light brick yellow&quot;,&quot;Brown&quot;,&quot;Nougat&quot;,&quot;Dark nougat&quot;,&quot;Earth orange&quot;,&quot;Reddish brown&quot;,&quot;Rust&quot;,&quot;Gold&quot;,&quot;Earth yellow&quot;,&quot;Brick yellow&quot;,&quot;Lig. Yellowich orange&quot;,&quot;Pastel yellow&quot;,&quot;Light yellow&quot;,&quot;Cool yellow&quot;,&quot;Tr. Yellow&quot;,&quot;Tr. Flu. Green&quot;,&quot;Tr. Flu. Yellow&quot;,&quot;Flame yellowish orange&quot;,&quot;Fire Yellow&quot;,&quot;Bright yellow&quot;,&quot;New Yeller&quot;,&quot;Sand yellow&quot;,&quot;Sand yellow metallic&quot;,&quot;Lig. yellowish green&quot;,&quot;Med. yellowish green&quot;,&quot;Olive&quot;,&quot;Grime&quot;,&quot;Faded green&quot;,&quot;Neon green&quot;,&quot;Light green (Mint)&quot;,&quot;Br. yellowish green&quot;,&quot;Lime green&quot;,&quot;Bright green&quot;,&quot;Camo&quot;,&quot;Dark green&quot;,&quot;Earth green&quot;,&quot;Pastel green&quot;,&quot;Medium green&quot;,&quot;Sand green&quot;,&quot;Tr. Green&quot;,&quot;Lemon metalic&quot;,&quot;Light blue&quot;,&quot;Tr. Lg blue&quot;,&quot;Tr. Flu. Blue&quot;,&quot;Light bluish green&quot;,&quot;Light Royal blue&quot;,&quot;Pastel light blue&quot;,&quot;Light bluish violet&quot;,&quot;Pastel blue-green&quot;,&quot;Pastel Blue&quot;,&quot;Turquoise&quot;,&quot;Med. bluish green&quot;,&quot;Medium blue&quot;,&quot;Dove blue&quot;,&quot;Tr. Blue&quot;,&quot;Toothpaste&quot;,&quot;Teal&quot;,&quot;Cyan&quot;,&quot;Bright bluish green&quot;,&quot;Bright blue&quot;,&quot;Really blue&quot;,&quot;Navy blue&quot;,&quot;Earth blue&quot;,&quot;Medium Royal blue&quot;,&quot;Medium bluish violet&quot;,&quot;Royal blue&quot;,&quot;Bright bluish violet&quot;,&quot;Deep blue&quot;,&quot;Dark Royal blue&quot;,&quot;Sand blue metallic&quot;,&quot;Sand blue&quot;,&quot;Tr. Bright bluish violet&quot;,&quot;Pastel violet&quot;,&quot;Light lilac&quot;,&quot;Alder&quot;,&quot;Lilac&quot;,&quot;Reddish lilac&quot;,&quot;Lavender&quot;,&quot;Royal purple&quot;,&quot;Bright violet&quot;,&quot;Tr. Medi. reddish violet&quot;,&quot;Light reddish violet&quot;,&quot;Light purple&quot;,&quot;Tr. Flu. Red&quot;,&quot;Light pink&quot;,&quot;Pink&quot;,&quot;Hot pink&quot;,&quot;Magenta&quot;,&quot;Bright purple&quot;,&quot;Med. reddish violet&quot;,&quot;Bright reddish lilac&quot;,&quot;Bright reddish violet&quot;,&quot;Medium lilac&quot;,&quot;Sand violet metallic&quot;,&quot;Sand violet&quot;,&quot;Eyedropper&quot;,&quot;Random Color&quot;}
FunctionData.Color.Choice = FunctionData.Color.Choice or 10;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Color&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,583,0,103)
obj41=Instance.new(&quot;Frame&quot;) obj41.BackgroundColor3=Color3.new(255/255,176/255,0/255) obj41.BackgroundTransparency=1 obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Palette&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,-3,0,-3) obj41.Size=UDim2.new(0,590,0,110)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(180/255,179/255,182/255) obj42.Image=&quot;http://www.roblox.com/asset/?id=34254577&quot; obj42.Name=&quot;145&quot; obj42.Parent=obj41 obj42.Position=UDim2.new(0,565,0,85) obj42.Size=UDim2.new(0,19,0,19)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(179/255,178/255,181/255) obj43.Image=&quot;http://www.roblox.com/asset/?id=34254562&quot; obj43.Name=&quot;144&quot; obj43.Parent=obj41 obj43.Position=UDim2.new(0,545,0,85) obj43.Size=UDim2.new(0,19,0,19)
obj45=Instance.new(&quot;TextLabel&quot;); obj45.BackgroundColor3=Options.ToolTipColor; obj45.Size=UDim2.new(0, 140, 0, 30); obj45.TextWrap=true; obj45.BackgroundTransparency=1; obj45.TextTransparency=1; obj45.Parent=obj40

obj42.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj42.Name);
RefreshColors();
end)
obj43.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj43.Name);
sb.Visible=true;
RefreshColors();
end)

sb=Instance.new(&quot;SelectionBox&quot;);
sb.Name=&quot;ColorEyedropper&quot;;
sb.Color=Options.ActiveSelectionBoxColor;
sb.Visible=false;
sb.Parent=obj1;

mouse_over=0;

for i=0,142,1 do
local obj44=Instance.new(&quot;TextButton&quot;)
obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255)
obj44.BorderColor3=Color3.new(8/255,8/255,8/255)
obj44.Name=tostring(i+1)
obj44.Position=UDim2.new(0,5+(i%29)*20,0,5+(math.floor(i/29))*20)
obj44.Size=UDim2.new(0,19,0,19)
obj44.Text=&quot;&quot;
obj44.BackgroundColor3=BrickColor.new(FunctionData.Color.ColorList[i+1]).Color
obj44.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj44.Name);
RefreshColors()
end)
obj44.MouseMoved:connect(function(x, y)
mouse_over=mouse_over+1;
obj45.BackgroundTransparency=1;
obj45.TextTransparency=1;
local mo=mouse_over;
if Options.ToolTipText==&quot;on&quot; then
wait(.75)
end
if mo==mouse_over then
obj45.Text=FunctionData.Color.ColorList[tonumber(obj44.Name)];
obj45.Position=UDim2.new(0,x-obj40.AbsolutePosition.x,0,y-obj40.AbsolutePosition.y-obj45.AbsoluteSize.y);
if Options.ToolTipText==&quot;immediate&quot; then
obj45.BackgroundTransparency=0;
obj45.TextTransparency=0;
end
end
if Options.ToolTipText==&quot;on&quot; then
for transparency=1,0,-.05 do
if mo==mouse_over then
obj45.BackgroundTransparency=transparency;
obj45.TextTransparency=transparency;
wait();
end
end
if mo==mouse_over then
obj45.BackgroundTransparency=0;
obj45.TextTransparency=0;
end
end
end)
obj44.Parent=obj41
end
obj40.Parent=obj1;

RefreshColors();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX449">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Elasticity_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Elasticity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Elasticity.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Elasticity.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;elasticity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Elasticity;
&#9;&#9;&#9;v.Elasticity=FunctionData.Elasticity.value;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Elasticity&quot;, parts, prior, FunctionData.Elasticity.value);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Elasticity = FunctionData.Elasticity or {};
FunctionData.Elasticity.value = FunctionData.Elasticity.value or .5;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Elasticity&quot; obj40.Position=UDim2.new(0,243,1,-22) obj40.Size=UDim2.new(0,84,0,22)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Transparency&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text=FunctionData.Elasticity.value;
obj40.Parent=obj1;

TB.insert(obj41, obj42);

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX450">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">FormFactor_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.FormFactor()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;formfactor&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.FormFactor;
&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;v.FormFactor=FunctionData.FormFactor.Mode;
&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;after[i]=v.FormFactor;
&#9;&#9;end
&#9;&#9;History.Action(&quot;FormFactor&quot;, parts, prior, after);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.FormFactor = FunctionData.FormFactor or {};
FunctionData.FormFactor.Mode = FunctionData.FormFactor.Mode or Enum.FormFactor.Custom;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;FormFactor&quot; obj40.Position=UDim2.new(0,243,1,-82) obj40.Size=UDim2.new(0,84,0,82)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Plate&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Plate&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;Symmetric&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,22) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;Symmetric&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;Brick&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,42) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Brick&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;Custom&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,62) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Custom&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

function RefreshButtons()
obj41.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Plate and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Symmetric and Options.SelectedColor or Options.ButtonColor;
obj43.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Brick and Options.SelectedColor or Options.ButtonColor;
obj44.BackgroundColor3 = FunctionData.FormFactor.Mode==Enum.FormFactor.Custom and Options.SelectedColor or Options.ButtonColor;
end

obj41.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Plate;
RefreshButtons();
end)
obj42.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Symmetric;
RefreshButtons();
end)
obj43.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Brick;
RefreshButtons();
end)
obj44.MouseButton1Down:connect(function()
FunctionData.FormFactor.Mode=Enum.FormFactor.Custom;
RefreshButtons();
end)

RefreshButtons();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX451">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Friction_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Friction()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Friction.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Friction.value = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;friction&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Friction;
&#9;&#9;&#9;v.Friction=FunctionData.Friction.value;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Friction&quot;, parts, prior, FunctionData.Friction.value);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Friction = FunctionData.Friction or {};
FunctionData.Friction.value = FunctionData.Friction.value or .5;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Friction&quot; obj40.Position=UDim2.new(0,243,1,-22) obj40.Size=UDim2.new(0,84,0,22)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Transparency&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text=FunctionData.Friction.value;
obj40.Parent=obj1;

TB.insert(obj41, obj42);

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX452">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">HistoryOOP_Script</string>
							<ProtectedString name="Source">History={Done={}, Undone={}}

History.Action=function(...)
History.Done[#History.Done+1]={...};
History.Undone={};
end;
History.Prep=function(...)
History.Undone[#History.Undone+1]={...};
end;

History.Undo=function()
&#9;if #History.Done&gt;0 then
&#9;&#9;local p=History.Done[#History.Done];
&#9;&#9;if p[1]==&quot;Move&quot; then
&#9;&#9;&#9;for i=1,#p[2] do
&#9;&#9;&#9;&#9;p[2][i].CFrame=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Clone&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;if Selection.Check(v) then
&#9;&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Delete&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Parent=p[3][i];
&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Resize&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Size=p[3][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Move+Resize&quot; then
&#9;&#9;&#9;v=p[2];
&#9;&#9;&#9;v.Size=p[5];
&#9;&#9;&#9;v.CFrame=p[3];
&#9;&#9;elseif p[1]==&quot;Rotate&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CFrame = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Lock&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Locked = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Color&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.BrickColor = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Material&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Material = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Transparency&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Transparency=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Reflectance&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Reflectance=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Anchor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Anchored = p[3][i][1];
&#9;&#9;&#9;&#9;v.Parent=p[3][i][2];
&#9;&#9;&#9;&#9;v.CFrame=p[3][i][3];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;CanCollide&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CanCollide = p[3][i][1];
&#9;&#9;&#9;&#9;v.Parent=p[3][i][2];
&#9;&#9;&#9;&#9;v.CFrame=p[3][i][3];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;FormFactor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.FormFactor=p[3][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Shape&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[4]~=nil and p[4][i]~=nil and p[4][i][1]~=nil then
&#9;&#9;&#9;&#9;&#9;v.Parent=p[4][i][1].Parent;
&#9;&#9;&#9;&#9;&#9;p[4][i][1].Parent=nil;
&#9;&#9;&#9;&#9;&#9;if Selection.Check(p[4][i][1]) then
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[4][i][1]);
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif p[3]~=nil and p[3][i]~=nil and p[3][i][4]~=nil and p[3][i][3]~=nil and p[3][i][2]~=nil then
&#9;&#9;&#9;&#9;&#9;v.Shape=p[3][i][4];
&#9;&#9;&#9;&#9;&#9;v.Size=p[3][i][3];
&#9;&#9;&#9;&#9;&#9;v.CFrame=p[3][i][2];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Surface&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[3]==Enum.NormalId.Left then v.LeftSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Right then v.RightSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Top then v.TopSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Bottom then v.BottomSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Front then v.FrontSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Back then v.BackSurface=p[4][i];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Velocity&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Velocity=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Undone[#History.Undone+1]=History.Done[#History.Done];
&#9;&#9;History.Done[#History.Done]=nil;
&#9;end
end

History.Redo=function()
&#9;--handle History.Undone
&#9;if #History.Undone&gt;0 then
&#9;&#9;local p=History.Undone[#History.Undone];
&#9;&#9;if p[1]==&quot;Move&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;p[2][i].CFrame=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Clone&quot; then
&#9;&#9;&#9;for i=1,#p[2] do
&#9;&#9;&#9;&#9;p[2][i].Parent=workspace;
&#9;&#9;&#9;&#9;for i,v in pairs(p[3]) do
&#9;&#9;&#9;&#9;&#9;if v[1]==p[2][i] or v[1]:IsDescendantOf(p[2][i]) then
&#9;&#9;&#9;&#9;&#9;&#9;v[1].CFrame=v[2];
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Delete&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Resize&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Size=p[4][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Move+Resize&quot; then
&#9;&#9;&#9;v=p[2];
&#9;&#9;&#9;v.Size=p[6];
&#9;&#9;&#9;v.CFrame=p[4];
&#9;&#9;elseif p[1]==&quot;Rotate&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CFrame = p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Lock&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Locked = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Color&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.BrickColor = p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Material&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Material = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Transparency&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Transparency=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Reflectance&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Reflectance=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Anchor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Anchored = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;CanCollide&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CanCollide = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;FormFactor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.FormFactor=p[4][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Shape&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[4][i][1]~=nil then
&#9;&#9;&#9;&#9;&#9;p[4][i][1].Parent=v.Parent;
&#9;&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;&#9;if Selection.Check(p[4][i][1]) then
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[4][i][1]);
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;v.Shape=p[4][i][2];
&#9;&#9;&#9;&#9;&#9;v.Size=p[3][i][3];
&#9;&#9;&#9;&#9;&#9;v.CFrame=p[3][i][2];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Surface&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[3]==Enum.NormalId.Left then v.LeftSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Right then v.RightSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Top then v.TopSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Bottom then v.BottomSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Front then v.FrontSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Back then v.BackSurface=p[5];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Velocity&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Velocity=p[4];
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Done[#History.Done+1]=History.Undone[#History.Undone];
&#9;&#9;History.Undone[#History.Undone]=nil;
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX453">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">HookUpGuis_Script</string>
							<ProtectedString name="Source">--[[ Hook Up Guis ]]
PaletteMode=1;
PaletteImages={
{36663907,36662758,36662760,36662767,36662771},
{0,36681404,36681442,36681517,36681469},
{0,36681389,36681397,36681413,36681490},
{0,36681506,36681529,36681480,36681419},
{0,36681407,36681526,36681456,36681429},
};
PaletteFunctions = PaletteFunctions or {};
PaletteFunctions={

Move=PaletteFunctions.Move or (function() end),
Resize=PaletteFunctions.Resize or (function() end),
Rotate=PaletteFunctions.Rotate or (function() end),
Lock=PaletteFunctions.Lock or (function() end),
Color=PaletteFunctions.Color or (function() end),
Material=PaletteFunctions.Material or (function() end),
Transparency=PaletteFunctions.Transparency or (function() end),
Reflectance=PaletteFunctions.Reflectance or (function() end),
Anchor=PaletteFunctions.Anchor or (function() end),
CanCollide=PaletteFunctions.CanCollide or (function() end),
FormFactor=PaletteFunctions.FormFactor or (function() end),
Shape=PaletteFunctions.Shape or (function() end),
Surface=PaletteFunctions.Surface or (function() end),
Velocity=PaletteFunctions.Velocity or (function() end),
RotVelocity=PaletteFunctions.RotVelocity or (function() end),
Friction=PaletteFunctions.Friction or (function() end),
Elasticity=PaletteFunctions.Elasticity or (function() end),
Utilities=PaletteFunctions.Utilities or (function() end),

Options=PaletteFunctions.Options or (function() end),
Help=PaletteFunctions.Help or (function() end),
};
FunctionData={};

function RefreshPalette()
obj3.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][2]);
obj4.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][4]);
obj5.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][5]);
obj6.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][3]);
end
function ActivateFunction(index)
input(&quot;Unload&quot;);
if PaletteMode==1 and index==1 then
PaletteFunctions.Move();
elseif PaletteMode==1 and index==2 then
PaletteFunctions.Resize();
elseif PaletteMode==1 and index==3 then
PaletteFunctions.Rotate();
elseif PaletteMode==1 and index==4 then
PaletteFunctions.Lock();
elseif PaletteMode==2 and index==1 then
PaletteFunctions.Color();
elseif PaletteMode==2 and index==2 then
PaletteFunctions.Material();
elseif PaletteMode==2 and index==3 then
PaletteFunctions.Transparency();
elseif PaletteMode==2 and index==4 then
PaletteFunctions.Reflectance();
elseif PaletteMode==3 and index==1 then
PaletteFunctions.Anchor();
elseif PaletteMode==3 and index==2 then
PaletteFunctions.CanCollide();
elseif PaletteMode==3 and index==3 then
PaletteFunctions.FormFactor();
elseif PaletteMode==3 and index==4 then
PaletteFunctions.Shape();
elseif PaletteMode==4 and index==1 then
PaletteFunctions.Surface();
elseif PaletteMode==4 and index==2 then
PaletteFunctions.Velocity();
elseif PaletteMode==4 and index==3 then
PaletteFunctions.RotVelocity();
elseif PaletteMode==4 and index==4 then
PaletteFunctions.Friction();
elseif PaletteMode==5 and index==1 then
PaletteFunctions.Elasticity();
elseif PaletteMode==5 and index==2 then
PaletteFunctions.Utilities();
elseif PaletteMode==5 and index==3 then
PaletteFunctions.Options();
elseif PaletteMode==5 and index==4 then
PaletteFunctions.Help();
end
end

obj7.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[1][1]);
obj8.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[2][1]);
obj9.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[3][1]);
obj10.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[4][1]);
obj11.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[5][1]);

function HitButton(obj)
if obj==obj3 then
ActivateFunction(1);
elseif obj==obj4 then
ActivateFunction(3);
elseif obj==obj5 then
ActivateFunction(4);
elseif obj==obj6 then
ActivateFunction(2);
elseif obj==obj7 then
PaletteMode=1;
RefreshPalette();
elseif obj==obj8 then
PaletteMode=2;
RefreshPalette();
elseif obj==obj9 then
PaletteMode=3;
RefreshPalette();
elseif obj==obj10 then
PaletteMode=4;
RefreshPalette();
elseif obj==obj11 then
PaletteMode=5;
RefreshPalette();
elseif obj==gui24 then
input(&quot;Group&quot;);
elseif obj==gui25 then
input(&quot;Ungroup&quot;);
elseif obj==gui26 then
input(&quot;Apply&quot;);
elseif obj==gui27 then
input(&quot;Undo&quot;);
elseif obj==gui28 then
input(&quot;Redo&quot;);
elseif obj==gui29 then
input(&quot;Clone&quot;);
elseif obj==gui30 then
input(&quot;Delete&quot;);
elseif obj==gui31 then
input(&quot;Save&quot;);
end
end

obj3.MouseButton1Down:connect(function() HitButton(obj3); end);
obj4.MouseButton1Down:connect(function() HitButton(obj4); end);
obj5.MouseButton1Down:connect(function() HitButton(obj5); end);
obj6.MouseButton1Down:connect(function() HitButton(obj6); end);

obj7.MouseButton1Down:connect(function() HitButton(obj7); end);
obj8.MouseButton1Down:connect(function() HitButton(obj8); end);
obj9.MouseButton1Down:connect(function() HitButton(obj9); end);
obj10.MouseButton1Down:connect(function() HitButton(obj10); end);
obj11.MouseButton1Down:connect(function() HitButton(obj11); end);

gui24.MouseButton1Down:connect(function() HitButton(gui24); end);
gui25.MouseButton1Down:connect(function() HitButton(gui25); end);
gui26.MouseButton1Down:connect(function() HitButton(gui26); end);
gui27.MouseButton1Down:connect(function() HitButton(gui27); end);
gui28.MouseButton1Down:connect(function() HitButton(gui28); end);
gui29.MouseButton1Down:connect(function() HitButton(gui29); end);
gui30.MouseButton1Down:connect(function() HitButton(gui30); end);
gui31.MouseButton1Down:connect(function() HitButton(gui31); end);

RefreshPalette();

--[[gui_drag=nil;
dragger_gui.BackgroundTransparency=.5;
dragger_gui.Parent=obj1;
GuiDrag={
function Down(gui)
dragger_gui.Size=gui.Size;
dragger_gui.BackgroundColor3=gui.BackgroundColor3;
end,
}
gui2.MouseButton1Down:connect(function() gui_drag=gui2; end)
gui4.MouseButton1Down:connect(function() gui_drag=gui2; end)
gui5.MouseButton1Down:connect(function() gui_drag=gui2; end)
]]
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX454">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">KeyStrokeOOP_Script</string>
							<ProtectedString name="Source">--[[

void keys.down(k as Integer)
void keys.up(k as Integer)
bool keys.check(k as Integer)

]]

keys={

&#9;down=function(k)
&#9;&#9;table.insert(keys.list,k);
&#9;end,

&#9;up=function(k)
&#9;&#9;for i=#keys.list,1,-1 do
&#9;&#9;&#9;if keys.list[i]==k then
&#9;&#9;&#9;&#9;table.remove(keys.list,i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;check=function(k)
&#9;&#9;for i,v in pairs(keys.list) do
&#9;&#9;&#9;if k==v then
&#9;&#9;&#9;&#9;return true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return false;
&#9;end,

&#9;list={}
}
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX455">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Lock_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Lock()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;lock&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Locked;
&#9;&#9;&#9;v.Locked=FunctionData.Lock.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Lock&quot;, parts, prior, FunctionData.Lock.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Lock = FunctionData.Lock or {};
FunctionData.Lock.Mode = FunctionData.Lock.Mode or false;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Lock&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;true&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;Lock Selection&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;false&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;Unlock Selection&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.Lock.Mode = true;
&#9;obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.Lock.Mode = false;
&#9;obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX456">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Material_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Material()

mouse_over=0;
function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;local obj50=obj50;
&#9;&#9;Spawn(function()
&#9;&#9;&#9;mouse_over=mouse_over+1;
&#9;&#9;&#9;obj50.BackgroundTransparency=1;
&#9;&#9;&#9;obj50.TextTransparency=1;
&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;local mo=mouse_over;
&#9;&#9;&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;wait(.75)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj50.Text=string.sub(tostring(p[2].Target.Material), 15);
&#9;&#9;&#9;&#9;&#9;obj50.Position=UDim2.new(0,p[2].X-obj40.AbsolutePosition.x,0,p[2].Y-obj40.AbsolutePosition.y-obj50.AbsoluteSize.y);
&#9;&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;new=nil;
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;material&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Material;
&#9;&#9;&#9;v.Material = FunctionData.Material.Choice;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Material&quot;, parts, prior, FunctionData.Material.Choice);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Material = FunctionData.Material or {};
FunctionData.Material.Choice = FunctionData.Material.Choice or Enum.Material.Plastic;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Material&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,344,0,40)
obj41=Instance.new(&quot;ImageButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Image=&quot;http://www.roblox.com/Asset/?ID=16170001&quot; obj41.Name=&quot;Concrete&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,192,0,2) obj41.Size=UDim2.new(0,36,0,36)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Image=&quot;http://www.roblox.com/Asset/?ID=16169978&quot; obj42.Name=&quot;CorrodedMetal&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,116,0,2) obj42.Size=UDim2.new(0,36,0,36)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Image=&quot;http://www.roblox.com/Asset/?ID=16169998&quot; obj43.Name=&quot;DiamondPlate&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,230,0,2) obj43.Size=UDim2.new(0,36,0,36)
obj44=Instance.new(&quot;ImageButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Image=&quot;http://www.roblox.com/Asset/?ID=16169991&quot; obj44.Name=&quot;Foil&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,78,0,2) obj44.Size=UDim2.new(0,36,0,36)
obj45=Instance.new(&quot;ImageButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Image=&quot;http://www.roblox.com/Asset/?ID=16169988&quot; obj45.Name=&quot;Grass&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,2) obj45.Size=UDim2.new(0,36,0,36)
obj46=Instance.new(&quot;ImageButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Image=&quot;http://www.roblox.com/Asset/?ID=16169985&quot; obj46.Name=&quot;Ice&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,306,0,2) obj46.Size=UDim2.new(0,36,0,36)
obj47=Instance.new(&quot;ImageButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Image=&quot;http://www.roblox.com/Asset/?ID=16169981&quot; obj47.Name=&quot;Plastic&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,40,0,2) obj47.Size=UDim2.new(0,36,0,36)
obj48=Instance.new(&quot;ImageButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Image=&quot;http://www.roblox.com/Asset/?ID=16169975&quot; obj48.Name=&quot;Slate&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,268,0,2) obj48.Size=UDim2.new(0,36,0,36)
obj49=Instance.new(&quot;ImageButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Image=&quot;http://www.roblox.com/Asset/?ID=16169971&quot; obj49.Name=&quot;Wood&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,154,0,2) obj49.Size=UDim2.new(0,36,0,36)
obj40.Parent=obj1;
obj50=Instance.new(&quot;TextLabel&quot;); obj50.BackgroundColor3=Options.ToolTipColor; obj50.Size=UDim2.new(0, 140, 0, 30); obj50.TextWrap=true; obj50.BackgroundTransparency=1; obj50.TextTransparency=1; obj50.Parent=obj40

function RefreshMaterials()
for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48, obj49}) do
if Enum.Material[v.Name] == FunctionData.Material.Choice then
v.BorderColor3=Options.SelectedColor;
else
v.BorderColor3=Color3.new(0,0,0);
end
end
end

for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48, obj49}) do
v.MouseButton1Down:connect(function()
FunctionData.Material.Choice = Enum.Material[v.Name];
RefreshMaterials();
end)
v.MouseMoved:connect(function(x,y)
&#9;local obj50=obj50;
&#9;mouse_over=mouse_over+1;
&#9;obj50.BackgroundTransparency=1;
&#9;obj50.TextTransparency=1;
&#9;if true then
&#9;&#9;local mo=mouse_over;
&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;wait(.75)
&#9;&#9;end
&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;obj50.Text=v.Name;
&#9;&#9;&#9;obj50.Position=UDim2.new(0,x-obj40.AbsolutePosition.x,0,y-obj40.AbsolutePosition.y-obj50.AbsoluteSize.y);
&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)
end

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX457">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Move_Script</string>
							<ProtectedString name="Source">function PaletteFunctions.Move()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Move.x = tonumber(obj42.Text) or 0;
&#9;&#9;FunctionData.Move.y = tonumber(obj44.Text) or 0;
&#9;&#9;FunctionData.Move.z = tonumber(obj46.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;aabb.Parent=nil;
&#9;&#9;handles.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if pending_target then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;else
&#9;&#9;&#9;Passive(p);
&#9;&#9;end
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if pending_target then
&#9;&#9;&#9;FunctionData.Move.TargetAxis = p[2].Target;
&#9;&#9;&#9;pending_target=false;
&#9;&#9;&#9;if pending_target then
&#9;&#9;&#9;&#9;obj51.Text = &quot;Pending Selection...&quot;;
&#9;&#9;&#9;elseif FunctionData.Move.TargetAxis then
&#9;&#9;&#9;&#9;obj51.Text = &quot;Axes Alignment Chosen&quot;;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj51.Text = &quot;No Reference Part&quot;;
&#9;&#9;&#9;end
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;else
&#9;&#9;&#9;aabb.Parent=nil;
&#9;&#9;&#9;handles.Visible=false;
&#9;&#9;&#9;axes_x.Parent=nil;
&#9;&#9;&#9;axes_y.Parent=nil;
&#9;&#9;&#9;axes_z.Parent=nil;
&#9;&#9;&#9;Passive(p);
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;end
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;move&quot;);
&#9;&#9;if FunctionData.Move.TargetAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(((FunctionData.Move.TargetAxis.CFrame - FunctionData.Move.TargetAxis.Position) * CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z)).p) * v.CFrame;
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;elseif FunctionData.Move.WorldAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z) * v.CFrame;
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;elseif not FunctionData.Move.WorldAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = v.CFrame * CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z);
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Action(&quot;Move&quot;, p, prior, after);
&#9;&#9;pending_target=false;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;aabb.Parent=LocalBin;
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;HandlesUp();
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;&#9;handles.Visible=true;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index = 0;

FunctionData.Move = FunctionData.Move or {};

FunctionData.Move.x = FunctionData.Move.x or 0;
FunctionData.Move.y = FunctionData.Move.y or 0;
FunctionData.Move.z = FunctionData.Move.z or 0;
if FunctionData.Move.WorldAxis==nil then
FunctionData.Move.WorldAxis = true;
end

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(207/255,239/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Move&quot; obj40.Position=UDim2.new(0,243,1,-110) obj40.Size=UDim2.new(0,114,0,110) obj40.Visible=true
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,110,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,110,0,18) obj42.Text=tonumber(FunctionData.Move.x) or 0; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,110,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(151/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,110,0,18) obj44.Text=tonumber(FunctionData.Move.y) or 0; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,110,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,143/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,110,0,18) obj46.Text=tonumber(FunctionData.Move.z) or 0; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;WorldObjAxis&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,110,0,14) obj47.Text=FunctionData.Move.WorldAxis and &quot;World Axis&quot; or &quot;Object Axis&quot;; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;TargetAxis&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,2,0,78) obj51.Size=UDim2.new(0,110,0,14) obj51.Text=FunctionData.Move.TargetAxis and &quot;Axes Alignment Chosen&quot; or &quot;No Reference Part&quot;; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Neg&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,94) obj48.Size=UDim2.new(0,35,0,14) obj48.Text=&quot;* -1&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Doub&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,39,0,94) obj49.Size=UDim2.new(0,36,0,14) obj49.Text=&quot;* 2&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Half&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,77,0,94) obj50.Size=UDim2.new(0,35,0,14) obj50.Text=&quot;* .5&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
obj40.Parent=obj1;

obj48.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * -1;
FunctionData.Move.y = (FunctionData.Move.y or 0) * -1;
FunctionData.Move.z = (FunctionData.Move.z or 0) * -1;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * 2;
FunctionData.Move.y = (FunctionData.Move.y or 0) * 2;
FunctionData.Move.z = (FunctionData.Move.z or 0) * 2;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)
obj50.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * 0.5;
FunctionData.Move.y = (FunctionData.Move.y or 0) * 0.5;
FunctionData.Move.z = (FunctionData.Move.z or 0) * 0.5;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)

sb=Instance.new(&quot;SelectionBox&quot;);
sb.Name=&quot;PendingDistinguisher&quot;;
sb.Color=Options.ActiveSelectionBoxColor;
sb.Visible=false;
sb.Parent=obj1;
handles=Instance.new(&quot;Handles&quot;);
handles.Color=Options.DragHandlesColor;
handles.Parent=obj1;
aabb=Instance.new(&quot;Part&quot;);
aabb.Anchored=true;
aabb.CanCollide=false;
aabb.Transparency=1;
aabb.Parent=LocalBin;
aabb.Name=&quot;AABB&quot;;

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_x&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_x&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

function UpdateHandles()
&#9;if #HasPermission(GetParts(Selection.Get()),&quot;handles_drag&quot;)==1 and not FunctionData.Move.WorldAxis and not FunctionData.Move.TargetAxis then
&#9;&#9;local p=HasPermission(GetParts(Selection.Get()),&quot;handles_drag&quot;)[1];
&#9;&#9;handles.Adornee=p;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=p.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, p.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=p.CFrame*CFrame.new(0, p.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=p.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, p.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;elseif #Selection.Get()==0 then
&#9;&#9;handles.Adornee=nil;
&#9;&#9;axes_x.Transparency=1;
&#9;&#9;axes_y.Transparency=1;
&#9;&#9;axes_z.Transparency=1;
&#9;elseif FunctionData.Move.TargetAxis then
&#9;&#9;min, max, _min, _max = angledAABB(GetParts(Selection.Get()), FunctionData.Move.TargetAxis.CFrame);
&#9;&#9;aabb.Size = _max - _min;
&#9;&#9;aabb.CFrame = CFrame.new(min:lerp(max, .5)) * (FunctionData.Move.TargetAxis.CFrame - FunctionData.Move.TargetAxis.Position);
&#9;&#9;handles.Adornee=aabb;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=aabb.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, aabb.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=aabb.CFrame*CFrame.new(0, aabb.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=aabb.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, aabb.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;else
&#9;&#9;min, max = getAABB(GetParts(Selection.Get()));
&#9;&#9;aabb.Size = max - min;
&#9;&#9;aabb.CFrame = CFrame.new(min:lerp(max, .5));
&#9;&#9;handles.Adornee=aabb;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=aabb.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, aabb.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=aabb.CFrame*CFrame.new(0, aabb.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=aabb.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, aabb.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;end
end;
UpdateHandles();

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

function HandlesUp()
if #original_locations&gt;0 and handles_dragging_parts then
final_locations={};
for i,v in pairs(handles_dragging_parts) do
final_locations[#final_locations + 1] = v.CFrame;
end
History.Action(&quot;Move&quot;, handles_dragging_parts, original_locations, final_locations);
original_locations={};
end
end;

handles_dragging_parts={};
old_distance=0;
original_locations={};
final_locations={};
handles.MouseButton1Down:connect(function()
handles_dragging_parts=HasPermission(GetParts(Selection.Get()), &quot;handles_drag&quot;)
original_locations={};
for i,v in pairs(handles_dragging_parts) do
original_locations[#original_locations + 1] = v.CFrame;
end
old_distance = 0;
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
new_distance = round(dist - old_distance, Options.MoveDragIntervals);
old_distance = old_distance + new_distance;
if new_distance~=0 then
local faces=Vector3.new();
if face==Enum.NormalId.Left then
faces=Vector3.new(-1, 0, 0);
elseif face==Enum.NormalId.Right then
faces=Vector3.new(1, 0, 0);
elseif face==Enum.NormalId.Top then
faces=Vector3.new(0, 1, 0);
elseif face==Enum.NormalId.Bottom then
faces=Vector3.new(0, -1, 0);
elseif face==Enum.NormalId.Front then
faces=Vector3.new(0, 0, -1);
elseif face==Enum.NormalId.Back then
faces=Vector3.new(0, 0, 1);
end
if handles.Adornee==aabb then
for i,v in pairs(handles_dragging_parts) do
v.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(v.CFrame);
end
axes_x.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_x.CFrame);
axes_y.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_y.CFrame);
axes_z.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_z.CFrame);
aabb.CFrame=aabb.CFrame*CFrame.new(faces * new_distance);
else
for i,v in pairs(handles_dragging_parts) do
v.CFrame=v.CFrame*CFrame.new(faces * new_distance);
end
UpdateHandles();
end
end
end)

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

obj47.MouseButton1Down:connect(function()
FunctionData.Move.WorldAxis = not FunctionData.Move.WorldAxis;
obj47.Text=FunctionData.Move.WorldAxis and &quot;World Axis&quot; or &quot;Object Axis&quot;;
end)
pending_target = false;
obj51.MouseButton1Down:connect(function()
pending_target = not pending_target;
if pending_target then
sb.Visible=true;
obj51.Text = &quot;Pending Selection...&quot;;
else
sb.Visible=false;
FunctionData.Move.TargetAxis = nil;
obj51.Text = &quot;No Reference Part&quot;;
end
end)

function angledAABB(parts, cframe)
if type(parts)~=&quot;table&quot; then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
if #parts==0 then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
--local min=parts[1].Position
--local max=parts[1].Position
local min=Vector3.new(math.huge, math.huge, math.huge);
local max=Vector3.new(-math.huge, -math.huge, -math.huge);
for i,v in pairs(parts) do
for x=-1,1,2 do
for y=-1,1,2 do
for z=-1,1,2 do
local s=v.Size/2;
local p = (v.CFrame * CFrame.new(x*s.x, y*s.y, z*s.z)).p;
min=Vector3.new(math.min(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(0,math.pi/2,0)).lookVector, p), min.x),math.min(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(math.pi/2,0,0)).lookVector, p), min.y),math.min(DistanceAlongLine(Vector3.new(0,0,0), cframe.lookVector, p), min.z))
max=Vector3.new(math.max(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(0,math.pi/2,0)).lookVector, p), max.x),math.max(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(math.pi/2,0,0)).lookVector, p), max.y),math.max(DistanceAlongLine(Vector3.new(0,0,0), cframe.lookVector, p), max.z))
end
end
end
end
return min.x*(cframe*CFrame.Angles(0,math.pi/2,0)).lookVector+min.y*(cframe*CFrame.Angles(math.pi/2,0,0)).lookVector+min.z*cframe.lookVector,max.x*(cframe*CFrame.Angles(0,math.pi/2,0)).lookVector+max.y*(cframe*CFrame.Angles(math.pi/2,0,0)).lookVector+max.z*cframe.lookVector, min, max
end

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX458">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Options_Script</string>
							<ProtectedString name="Source">--[[Options]]

PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Options()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;&#9;if f~=nil then f.Parent=nil; end
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if obj66~=nil and obj66.Name==&quot;ToolTipDisplay&quot; then obj66.Visible=false; end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(163/255,162/255,165/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Options&quot; obj40.Position=UDim2.new(0.5,-183,0.5,-115) obj40.Size=UDim2.new(0,366,0,230) obj40.BackgroundColor3=Options.MainColor;
obj41=Instance.new(&quot;TextLabel&quot;) obj41.Active=false obj41.BackgroundColor3=Color3.new(163/255,162/255,165/255) obj41.BackgroundTransparency=1 obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Parent=obj40 obj41.Position=UDim2.new(0,0,0,0) obj41.Size=UDim2.new(1,0,0,30) obj41.Text=&quot;Options&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.FontSize=Enum.FontSize.Size18
obj42=Instance.new(&quot;TextButton&quot;) obj42.Name=&quot;RepeatDelay&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,32) obj42.Size=UDim2.new(0.5,-3,0,20) obj42.Text=&quot;Repeat Delay: 1&quot; obj42.TextXAlignment=Enum.TextXAlignment.Left; obj42.BackgroundColor3=Options.ButtonColor;
obj43=Instance.new(&quot;TextButton&quot;) obj43.Name=&quot;RepeatRate&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,54) obj43.Size=UDim2.new(0.5,-3,0,20) obj43.Text=&quot;Repeat Rate: 0.03&quot; obj43.TextXAlignment=Enum.TextXAlignment.Left; obj43.BackgroundColor3=Options.ButtonColor;
obj44=Instance.new(&quot;TextButton&quot;) obj44.Name=&quot;DoubleClickSpeed&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,76) obj44.Size=UDim2.new(0.5,-3,0,20) obj44.Text=&quot;Double Click Speed: 0.03&quot; obj44.TextXAlignment=Enum.TextXAlignment.Left; obj44.BackgroundColor3=Options.ButtonColor;
obj45=Instance.new(&quot;TextButton&quot;) obj45.Name=&quot;BoundingBoxColor&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,98) obj45.Size=UDim2.new(0.5,-3,0,20) obj45.Text=&quot;Bounding Box Color: Cyan&quot; obj45.TextXAlignment=Enum.TextXAlignment.Left; obj45.BackgroundColor3=Options.ButtonColor;
obj46=Instance.new(&quot;TextButton&quot;) obj46.Name=&quot;ActiveSelectionBoxColor&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,120) obj46.Size=UDim2.new(0.5,-3,0,20) obj46.Text=&quot;Active Selection Color: Really red&quot; obj46.TextXAlignment=Enum.TextXAlignment.Left; obj46.BackgroundColor3=Options.ButtonColor;
obj47=Instance.new(&quot;TextButton&quot;) obj47.Name=&quot;DragHandlesColor&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,142) obj47.Size=UDim2.new(0.5,-3,0,20) obj47.Text=&quot;Drag Handles Color: Bright orange&quot; obj47.TextXAlignment=Enum.TextXAlignment.Left; obj47.BackgroundColor3=Options.ButtonColor;
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;RotateHandlesColor&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,164) obj48.Size=UDim2.new(0.5,-3,0,20) obj48.Text=&quot;Rotate Handles Color: Bright red&quot; obj48.TextXAlignment=Enum.TextXAlignment.Left; obj48.BackgroundColor3=Options.ButtonColor;
obj49=Instance.new(&quot;TextButton&quot;) obj49.Name=&quot;ResizeHandlesColor&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,186) obj49.Size=UDim2.new(0.5,-3,0,20) obj49.Text=&quot;Resize Handles Color: Bright blue&quot; obj49.TextXAlignment=Enum.TextXAlignment.Left; obj49.BackgroundColor3=Options.ButtonColor;
obj50=Instance.new(&quot;TextButton&quot;) obj50.Name=&quot;SurfaceSelectionColor&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,2,0,208) obj50.Size=UDim2.new(0.5,-3,0,20) obj50.Text=&quot;Surface Selection Color: Bright violet&quot; obj50.TextXAlignment=Enum.TextXAlignment.Left; obj50.BackgroundColor3=Options.ButtonColor;
obj51=Instance.new(&quot;TextButton&quot;) obj51.Name=&quot;SmallestSize&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0.5,1,0,98) obj51.Size=UDim2.new(0.5,-3,0,20) obj51.Text=&quot;Smallest Part Size: 1, 1, 1&quot; obj51.TextXAlignment=Enum.TextXAlignment.Left; obj51.BackgroundColor3=Options.ButtonColor;
obj52=Instance.new(&quot;TextButton&quot;) obj52.Name=&quot;CloneShift&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0.5,1,0,120) obj52.Size=UDim2.new(0.5,-3,0,20) obj52.Text=&quot;Clone Shift: true&quot; obj52.TextXAlignment=Enum.TextXAlignment.Left; obj52.BackgroundColor3=Options.ButtonColor;
obj53=Instance.new(&quot;TextButton&quot;) obj53.Name=&quot;Permissions&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0.5,1,0,208) obj53.Size=UDim2.new(0.5,-3,0,20) obj53.Text=&quot;Permissions Editor&quot; obj53.TextXAlignment=Enum.TextXAlignment.Left; obj53.BackgroundColor3=Options.ButtonColor;
obj54=Instance.new(&quot;TextButton&quot;) obj54.Name=&quot;DockVisible&quot; obj54.Parent=obj40 obj54.Position=UDim2.new(0.5,1,0,186) obj54.Size=UDim2.new(0.5,-3,0,20) obj54.Text=&quot;Dock Visible: true&quot; obj54.TextXAlignment=Enum.TextXAlignment.Left; obj54.BackgroundColor3=Options.ButtonColor;
obj55=Instance.new(&quot;TextButton&quot;) obj55.Name=&quot;ToolTip&quot; obj55.Parent=obj40 obj55.Position=UDim2.new(0.5,1,0,164) obj55.Size=UDim2.new(0.5,-3,0,20) obj55.Text=&quot;ToolTipText: on&quot; obj55.TextXAlignment=Enum.TextXAlignment.Left; obj55.BackgroundColor3=Options.ButtonColor;
obj56=Instance.new(&quot;TextButton&quot;) obj56.Name=&quot;ThreeAxes&quot; obj56.Parent=obj40 obj56.Position=UDim2.new(0.5,1,0,142) obj56.Size=UDim2.new(0.5,-3,0,20) obj56.Text=&quot;Three Axes: on&quot; obj56.TextXAlignment=Enum.TextXAlignment.Left; obj56.BackgroundColor3=Options.ButtonColor;
obj57=Instance.new(&quot;TextButton&quot;) obj57.Name=&quot;ResizeDragIntervals&quot; obj57.Parent=obj40 obj57.Position=UDim2.new(0.5,1,0,76) obj57.Size=UDim2.new(0.5,-3,0,20) obj57.Text=&quot;Resize Increments: 1&quot; obj57.TextXAlignment=Enum.TextXAlignment.Left; obj57.BackgroundColor3=Options.ButtonColor;
obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MoveDragIntervals&quot; obj58.Parent=obj40 obj58.Position=UDim2.new(0.5,1,0,32) obj58.Size=UDim2.new(0.5,-3,0,20) obj58.Text=&quot;Move Increments: 0.5&quot; obj58.TextXAlignment=Enum.TextXAlignment.Left; obj58.BackgroundColor3=Options.ButtonColor;
obj59=Instance.new(&quot;TextButton&quot;) obj59.Name=&quot;RotateDragIntervals&quot; obj59.Parent=obj40 obj59.Position=UDim2.new(0.5,1,0,54) obj59.Size=UDim2.new(0.5,-3,0,20) obj59.Text=&quot;Rotate Increments: 5&quot; obj59.TextXAlignment=Enum.TextXAlignment.Left; obj59.BackgroundColor3=Options.ButtonColor;
obj40.Parent=gui;

brickcolors={
{obj45, &quot;Bounding Box Color&quot;, &quot;BoundingBoxColor&quot;, &quot;Determines the color of the selection boxes that surround selected parts.&quot;},
{obj46, &quot;Active Selection Color&quot;, &quot;ActiveSelectionBoxColor&quot;, &quot;Determines the color of the selection box that is used when choosing a part.&quot;},
{obj47, &quot;Drag Handles Color&quot;, &quot;DragHandlesColor&quot;, &quot;Determines the color of the dragging handles for movement.&quot;},
{obj48, &quot;Rotate Handles Color&quot;, &quot;RotateHandlesColor&quot;, &quot;Determines the color of the dragging handles for rotation.&quot;},
{obj49, &quot;Resize Handles Color&quot;, &quot;ResizeHandlesColor&quot;, &quot;Determines the color of the dragging handles for resizing.&quot;},
{obj50, &quot;Surface Selection Color&quot;, &quot;SurfaceSelectionColor&quot;, &quot;Determines the color of the selection panel that is used when selecting a surface of a part.&quot;},
}
all_colors = {&quot;Institutional white&quot;,&quot;White&quot;,&quot;Phosph. White&quot;,&quot;Transparent&quot;,&quot;Light stone grey&quot;,&quot;Mid gray&quot;,&quot;Light grey&quot;,&quot;Tr. Brown&quot;,&quot;Light grey metallic&quot;,&quot;Medium stone grey&quot;,&quot;Silver&quot;,&quot;Grey&quot;,&quot;Silver flip/flop&quot;,&quot;Gun metallic&quot;,&quot;Dark grey&quot;,&quot;Dark stone grey&quot;,&quot;Dark grey metallic&quot;,&quot;Black metallic&quot;,&quot;Black&quot;,&quot;Really black&quot;,&quot;Light red&quot;,&quot;Pastel orange&quot;,&quot;Tr. Flu. Reddish orange&quot;,&quot;Medium red&quot;,&quot;Tr. Red&quot;,&quot;Bright red&quot;,&quot;Really red&quot;,&quot;Dusty Rose&quot;,&quot;Dark red&quot;,&quot;Red flip/flop&quot;,&quot;Sand red&quot;,&quot;Light orange&quot;,&quot;Medium orange&quot;,&quot;Warm yellowish orange&quot;,&quot;Bright orange&quot;,&quot;Deep orange&quot;,&quot;Neon orange&quot;,&quot;Flame reddish orange&quot;,&quot;CGA brown&quot;,&quot;Dark orange&quot;,&quot;Br. yellowish orange&quot;,&quot;Br. reddish orange&quot;,&quot;Med. yellowish orange&quot;,&quot;Curry&quot;,&quot;Dark Curry&quot;,&quot;Light orange brown&quot;,&quot;Pastel brown&quot;,&quot;Yellow flip/flop&quot;,&quot;Light brick yellow&quot;,&quot;Brown&quot;,&quot;Nougat&quot;,&quot;Dark nougat&quot;,&quot;Earth orange&quot;,&quot;Reddish brown&quot;,&quot;Rust&quot;,&quot;Gold&quot;,&quot;Earth yellow&quot;,&quot;Brick yellow&quot;,&quot;Lig. Yellowich orange&quot;,&quot;Pastel yellow&quot;,&quot;Light yellow&quot;,&quot;Cool yellow&quot;,&quot;Tr. Yellow&quot;,&quot;Tr. Flu. Green&quot;,&quot;Tr. Flu. Yellow&quot;,&quot;Flame yellowish orange&quot;,&quot;Fire Yellow&quot;,&quot;Bright yellow&quot;,&quot;New Yeller&quot;,&quot;Sand yellow&quot;,&quot;Sand yellow metallic&quot;,&quot;Lig. yellowish green&quot;,&quot;Med. yellowish green&quot;,&quot;Olive&quot;,&quot;Grime&quot;,&quot;Faded green&quot;,&quot;Neon green&quot;,&quot;Light green (Mint)&quot;,&quot;Br. yellowish green&quot;,&quot;Lime green&quot;,&quot;Bright green&quot;,&quot;Camo&quot;,&quot;Dark green&quot;,&quot;Earth green&quot;,&quot;Pastel green&quot;,&quot;Medium green&quot;,&quot;Sand green&quot;,&quot;Tr. Green&quot;,&quot;Lemon metalic&quot;,&quot;Light blue&quot;,&quot;Tr. Lg blue&quot;,&quot;Tr. Flu. Blue&quot;,&quot;Light bluish green&quot;,&quot;Light Royal blue&quot;,&quot;Pastel light blue&quot;,&quot;Light bluish violet&quot;,&quot;Pastel blue-green&quot;,&quot;Pastel Blue&quot;,&quot;Turquoise&quot;,&quot;Med. bluish green&quot;,&quot;Medium blue&quot;,&quot;Dove blue&quot;,&quot;Tr. Blue&quot;,&quot;Toothpaste&quot;,&quot;Teal&quot;,&quot;Cyan&quot;,&quot;Bright bluish green&quot;,&quot;Bright blue&quot;,&quot;Really blue&quot;,&quot;Navy blue&quot;,&quot;Earth blue&quot;,&quot;Medium Royal blue&quot;,&quot;Medium bluish violet&quot;,&quot;Royal blue&quot;,&quot;Bright bluish violet&quot;,&quot;Deep blue&quot;,&quot;Dark Royal blue&quot;,&quot;Sand blue metallic&quot;,&quot;Sand blue&quot;,&quot;Tr. Bright bluish violet&quot;,&quot;Pastel violet&quot;,&quot;Light lilac&quot;,&quot;Alder&quot;,&quot;Lilac&quot;,&quot;Reddish lilac&quot;,&quot;Lavender&quot;,&quot;Royal purple&quot;,&quot;Bright violet&quot;,&quot;Tr. Medi. reddish violet&quot;,&quot;Light reddish violet&quot;,&quot;Light purple&quot;,&quot;Tr. Flu. Red&quot;,&quot;Light pink&quot;,&quot;Pink&quot;,&quot;Hot pink&quot;,&quot;Magenta&quot;,&quot;Bright purple&quot;,&quot;Med. reddish violet&quot;,&quot;Bright reddish lilac&quot;,&quot;Bright reddish violet&quot;,&quot;Medium lilac&quot;,&quot;Sand violet metallic&quot;,&quot;Sand violet&quot;};
numbers={
{obj42, &quot;Repeat Delay&quot;, &quot;RepeatDelay&quot;, &quot;The amount of time that elapses before the tab button begins to repeat.&quot;},
{obj43, &quot;Repeat Rate&quot;, &quot;RepeatRate&quot;, &quot;The amount of time between tab hits.&quot;},
{obj44, &quot;Double Click Speed&quot;, &quot;DoubleClickSpeed&quot;, &quot;How quickly you have to double click in order to select the target&apos;s parent.&quot;},
{obj57, &quot;Resize Increments&quot;, &quot;ResizeDragIntervals&quot;, &quot;The factor by which you&apos;ll resize when clicking and dragging on a handle.&quot;},
{obj58, &quot;MoveIncrements&quot;, &quot;MoveDragIntervals&quot;, &quot;The factor by which you&apos;ll move when clicking and dragging on a handle.&quot;},
{obj59, &quot;RotateIncrements&quot;, &quot;RotateDragIntervals&quot;, &quot;The factor by which you&apos;ll rotate when clicking and dragging on a handle.&quot;},
}
boolean={
{obj52, &quot;Clone Shift&quot;, function(bool) return (bool and &quot;true&quot; or &quot;false&quot;); end, &quot;CloneShift&quot;, &quot;Determines whether cloned parts get moved above the old part, or whether they remain in the same location.&quot;},
{obj54, &quot;Dock Visible&quot;, function(bool) return (bool and &quot;true&quot; or &quot;false&quot;); end, &quot;DockVisible&quot;, &quot;Whether or not the dock above the main tool window is visible.&quot;},
{obj56, &quot;Three Axes&quot;, function(bool) return (bool and &quot;on&quot; or &quot;off&quot;); end, &quot;ThreeAxes&quot;, &quot;Determines if the three axes indicators are turned on.&quot;},
}
--toggle is used for text properties that have a select series of values.
toggle={
{obj55, &quot;Tool Tip Text&quot;, &quot;ToolTipText&quot;, &quot;Determines if you can hover over colors and materials to identify their name.&quot;, {&quot;off&quot;, &quot;on&quot;, &quot;immediate&quot;}},
}
vector3={
{obj51, &quot;Smallest Size&quot;, &quot;SmallestSize&quot;, &quot;The smallest size you can resize a part to when dragging. Type in 3 numbers separated by commas.&quot;},
}

UpdateButtons=function()
for i,v in pairs(vector3) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
end
for i,v in pairs(numbers) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]]);
end
for i,v in pairs(toggle) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]];
end
for i,v in pairs(brickcolors) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]].Name;
end
for i,v in pairs(boolean) do
v[1].Text=v[2] .. &quot;: &quot; .. v[3](Options[v[4]]);
end
end;

for i,v in pairs(vector3) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextBox&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor;
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
obj62.Text=v[2];
obj63.Text=v[4];
obj64.MouseButton1Down:connect(function()
entry=obj61.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
Options[v[3]]=Vector3.new(x,y,z);
else
Options[v[3]]=Vector3.new(1,x,1);
end
else
Options[v[3]]=Vector3.new(1,1,1);
end
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(numbers) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]]);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextBox&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor;
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=Options[v[3]];
obj62.Text=v[2];
obj63.Text=v[4];
obj64.MouseButton1Down:connect(function()
Options[v[3]]=math.abs(tonumber(obj61.Text==&quot;&quot; and &quot;0&quot; or obj61.Text) or 0);
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(boolean) do
v[1].Text=v[2] .. &quot;: &quot; .. v[3](Options[v[4]]);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=v[3](Options[v[4]]);
obj62.Text=v[2];
obj63.Text=v[5];
obj61.MouseButton1Down:connect(function()
Options[v[4]]=not Options[v[4]]
obj61.Text=v[3](Options[v[4]]);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(toggle) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]];
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=(Options[v[3]]);
obj62.Text=v[2];
obj63.Text=v[4];
obj61.MouseButton1Down:connect(function()
for a,b in pairs(v[5]) do
if b==Options[v[3]] then
index=a;
end
end
index=index+1;
if v[5][index]==nil then index=1 end
Options[v[3]]=v[5][index];
obj61.Text=(Options[v[3]]);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(brickcolors) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]].Name;
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=Options[v[3]].Name;
obj62.Text=v[2];
obj63.Text=v[4];
obj61.MouseButton1Down:connect(function(x,y)
f=Instance.new(&quot;Frame&quot;);
f.Size=UDim2.new(0, 13*(15)+2*(13+1), 0, 11*(15)+2*(11+1)); --number of tiles wide: 13, number of tiles tall: 11, spacing: 2, width and heightof each tile: 15
f.Position=UDim2.new(0, x, 0, y);
f.Parent=gui;
for i=0,142,1 do
local tile=Instance.new(&quot;TextButton&quot;)
tile.BorderColor3=Color3.new(8/255,8/255,8/255)
tile.Name=tostring(i+1)
tile.Position=UDim2.new(0,2+(i%13)*17,0,2+(math.floor(i/13))*17)
tile.Size=UDim2.new(0,19,0,19)
tile.Text=&quot;&quot;
tile.BackgroundColor3=BrickColor.new(all_colors[i+1]).Color
tile.MouseButton1Down:connect(function()
Options[v[3]]=BrickColor.new(all_colors[tonumber(tile.Name)]);
f.Parent=nil;
end)
tile.Parent=f
end
obj61.Text=(Options[v[3]].Name);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

obj53.MouseButton1Down:connect(function()
&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;PermissionsIndex=1;
&#9;PermissionsGiven=true;
&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;obj60=Instance.new(&quot;Frame&quot;) obj60.Position=UDim2.new(0.5,-57,0.5,-35) obj60.Size=UDim2.new(0,130,0,78)
&#9;obj61=Instance.new(&quot;TextLabel&quot;) obj61.Active=false obj61.Name=&quot;PlayerName&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,2) obj61.Size=UDim2.new(1,-4,0,12)
&#9;obj62=Instance.new(&quot;TextButton&quot;) obj62.Name=&quot;Previous&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,64) obj62.Size=UDim2.new(0,16,0,12) obj62.Text=&quot;&lt;&quot;
&#9;obj63=Instance.new(&quot;TextButton&quot;) obj63.Name=&quot;Next&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,20,0,64) obj63.Size=UDim2.new(0,16,0,12) obj63.Text=&quot;&gt;&quot;
&#9;obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;SwapMode&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,38,0,64) obj64.Size=UDim2.new(0,48,0,12) obj64.Text=&quot;Given&quot;
&#9;obj65=Instance.new(&quot;TextButton&quot;) obj65.Name=&quot;Submit&quot; obj65.Parent=obj60 obj65.Position=UDim2.new(0,88,0,64) obj65.Size=UDim2.new(0,40,0,12) obj65.Text=&quot;Submit&quot;
&#9;obj66=Instance.new(&quot;TextLabel&quot;); obj66.Size=UDim2.new(0, 140, 0, 80); obj66.Parent=obj60; obj66.Visible=false; obj66.BackgroundColor3=Options.ToolTipColor; obj66.Text=&quot;&quot;; obj66.TextWrap=true; obj66.ZIndex=2; obj66.Name=&quot;ToolTipDisplay&quot;;
&#9;obj60.BackgroundColor3=Options.MainColor;
&#9;obj61.BackgroundColor3=Options.ButtonColor;
&#9;obj62.BackgroundColor3=Options.ButtonColor;
&#9;obj63.BackgroundColor3=Options.ButtonColor;
&#9;obj64.BackgroundColor3=Options.ButtonColor;
&#9;obj65.BackgroundColor3=Options.ButtonColor;
&#9;local buttons={};
&#9;local Refresh=function()
&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;&#9;obj61.Text=permissionsTarget.Name;
&#9;&#9;if PermissionsGiven then
&#9;&#9;&#9;for i,v in pairs(buttons) do
&#9;&#9;&#9;&#9;v.Text=UserPermission(permissionsTarget, game.Players.LocalPlayer, _possible_permissions[tonumber(v.Name)]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;v.Text=UserPermission(game.Players.LocalPlayer, permissionsTarget, _possible_permissions[tonumber(v.Name)]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;end
&#9;end;
&#9;local descriptions={&quot;Allow player to select your parts&quot;, &quot;Allow player to drag your parts around&quot;, &quot;Allow player to clone your parts&quot;, &quot; Allow player to drag your parts around via movement handles&quot;, &quot;Allow player to move your parts via Apply button.&quot;, &quot;Allow player to resize your parts via resize handles&quot;, &quot;Allow player to resize your parts via Apply button&quot;, &quot;Allow player to rotate your parts via rotational handles&quot;, &quot;Allow player to rotate your parts via Apply button&quot;, &quot;Allow player to lock your parts&quot;, &quot;Allow player to color your parts&quot;, &quot;Allow player to change the material of your parts&quot;, &quot;Allow player to change transparency of your parts&quot;, &quot;Allow player to change reflectance of your parts&quot;, &quot;Allow player to anchor/unanchor your parts&quot;, &quot;Allow player to change CanCollide of your parts&quot;, &quot;Allow player to change the form factor of your parts&quot;, &quot;Allow player to change the shape of your parts&quot;, &quot;Allow player to change the surface of your parts&quot;, &quot;Allow player to change the velocity of your parts&quot;, &quot;Allow player to change the rotational velocity of your parts&quot;, &quot;Allow player to change the friction of your parts&quot;, &quot;Allow player to delete your parts&quot;, &quot;Allow player to save your parts&quot;};
&#9;for x=1,8 do
&#9;&#9;for y=1,3 do
&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;button.Name=tostring((y-1)*8+x);
&#9;&#9;&#9;button.Position=UDim2.new(0,2+(x-1)*16,0,16+(y-1)*16);
&#9;&#9;&#9;button.Size=UDim2.new(0,14,0,14);
&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;button.Parent=obj60;
&#9;&#9;&#9;button.Text=UserPermission(permissionsTarget, game.Players.LocalPlayer, _possible_permissions[(y-1)*8+x]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;&#9;buttons[#buttons+1]=button;
&#9;&#9;&#9;button.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;&#9;&#9;obj66.Text=descriptions[tonumber(button.Name)];
&#9;&#9;&#9;&#9;obj66.Visible=true;
&#9;&#9;&#9;end)
&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;if not PermissionsGiven then
&#9;&#9;&#9;&#9;&#9;PermissionsGiven=true;
&#9;&#9;&#9;&#9;&#9;obj64.Text=PermissionsGiven and &quot;Given&quot; or &quot;Recieved&quot;;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;&#9;&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;&#9;&#9;&#9;if obj61.Text==permissionsTarget.Name then --just to make sure nothing unexpected is going on
&#9;&#9;&#9;&#9;&#9;permissions=game.Players.LocalPlayer:findFirstChild(&quot;BuildPermissions&quot;);
&#9;&#9;&#9;&#9;&#9;if permissions~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;if permissions:findFirstChild(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)]) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;permissions[(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)])].Value=not permissions[(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)])].Value;
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local q=Instance.new(&quot;BoolValue&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Name=permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)];
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Value=true;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Parent=permissions;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Refresh();
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
&#9;obj60.Parent=gui;
&#9;obj62.MouseButton1Down:connect(function()
&#9;&#9;PermissionsIndex=PermissionsIndex-1;
&#9;&#9;if PermissionsIndex&lt;1 then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;Refresh();
&#9;end)
&#9;obj62.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Previous Player&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj63.MouseButton1Down:connect(function()
&#9;&#9;PermissionsIndex=PermissionsIndex+1;
&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=1; end
&#9;&#9;Refresh();
&#9;end)
&#9;obj63.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Next Player&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj64.MouseButton1Down:connect(function()
&#9;&#9;PermissionsGiven=not PermissionsGiven;
&#9;&#9;obj64.Text=PermissionsGiven and &quot;Given&quot; or &quot;Recieved&quot;;
&#9;end)
&#9;obj64.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Currently displaying: &quot; .. (PermissionsGiven and &quot;Permissions given to other players&quot; or &quot;Permissions other players have given you&quot;);
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj65.MouseButton1Down:connect(function()
&#9;&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;end)
&#9;obj62.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Submit changes and close this window.&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;Refresh();
end)

end


</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX459">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Passive_Script</string>
							<ProtectedString name="Source">--[[ Passive ]]

Shortcuts={
}

LastClick=tick();
Click=1;
PartClicked=nil;
SelectedPart=2;
LassoSelect=false;

lasso=Instance.new(&quot;Frame&quot;, gui);
lasso.BackgroundColor3=Color3.new(.2, .6, 1);
lasso.BorderColor3=Color3.new(0, 0, 0);
lasso.BackgroundTransparency=.8;
lasso.Visible=false;

function Passive(p)
&#9;c=p[1];
&#9;if c==&quot;KeyDown&quot; then
&#9;&#9;keys.down(string.byte(p[3]));
&#9;&#9;if string.byte(p[3])==13 then
&#9;&#9;&#9;TB.enter();
&#9;&#9;end
&#9;&#9;if p[3]==&quot;r&quot; and not keys.check(48) then
&#9;&#9;&#9;Drag.Rotate(Enum.Axis.Y);
&#9;&#9;elseif p[3]==&quot;t&quot; and not keys.check(48) then
&#9;&#9;&#9;Drag.Rotate(Enum.Axis.X);
&#9;&#9;end
&#9;&#9;if p[3]==&quot;z&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui27);
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;&#9;HitButton(obj4);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;r&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui28);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;g&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui24);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;u&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui25);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;c&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui29);
&#9;&#9;&#9;end
&#9;&#9;elseif string.byte(p[3])==8 then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui30);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;q&quot; then
&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;HitButton(obj3);
&#9;&#9;elseif p[3]==&quot;e&quot; then
&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;HitButton(obj6);
&#9;&#9;end
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;keys.up(string.byte(p[3]));
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;TB.enter();
&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;if tick()-LastClick&gt;Options.DoubleClickSpeed or PartClicked==nil or p[2].Target~=PartClicked then
&#9;&#9;&#9;&#9;if not Selection.Check(p[2].Target) and keys.check(48) and Permission(p[2].Target, &quot;select&quot;) then
&#9;&#9;&#9;&#9;&#9;Selection.Add(p[2].Target);
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=1;
&#9;&#9;&#9;&#9;elseif Selection.Check(p[2].Target) and keys.check(48) then
&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[2].Target);
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=0;
&#9;&#9;&#9;&#9;elseif Selection.Check(p[2].Target) and not keys.check(48) and Permission(p[2].Target, &quot;drag&quot;) then
&#9;&#9;&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;&#9;&#9;&#9;SelectedPart=2;
&#9;&#9;&#9;&#9;&#9;Drag.Down(p[2].Target, (p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p, HasPermission(GetParts(Selection.Get()), &quot;drag&quot;));
&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;elseif not Selection.Check(p[2].Target) and not keys.check(48) and Permission(p[2].Target, &quot;select&quot;) then
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=1;
&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;Selection.Add(p[2].Target);
&#9;&#9;&#9;&#9;&#9;if Permission(p[2].Target, &quot;drag&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Drag.Down(p[2].Target, (p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p, HasPermission(GetParts(Selection.Get()), &quot;drag&quot;));
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;elseif not Selection.Check(p[2].Target) and not p[2].Target.Locked and Permission(p[2].Target, &quot;clone&quot;) then
&#9;&#9;&#9;&#9;&#9;--clone the part.
&#9;&#9;&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;local offset=(p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p;
&#9;&#9;&#9;&#9;&#9;&#9;local k=p[2].Target:clone();
&#9;&#9;&#9;&#9;&#9;&#9;k.Name=&quot;BlobbyblobBuild_&quot;..player.Name;
&#9;&#9;&#9;&#9;&#9;&#9;if Options.CloneShift then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x=math.abs((k.CFrame*CFrame.Angles(0,math.pi/2,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y=math.abs((k.CFrame*CFrame.Angles(math.pi/2,0,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;z=math.abs(k.CFrame.lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (y &gt;= x and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.y,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif (x &gt;= y and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.x,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif (z &gt;= x and z &gt;= y) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.z,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;k.Parent=workspace;
&#9;&#9;&#9;&#9;&#9;&#9;History.Action(&quot;Clone&quot;, {k}, {{k, k.CFrame}}); --send a copy so that if I end up deleting it (via undo), I can pull up another copy.
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(k);
&#9;&#9;&#9;&#9;&#9;&#9;Drag.Down(k, offset, {k});
&#9;&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;lasso.Size=UDim2.new(0,0,0,0);
&#9;&#9;&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;&#9;&#9;&#9;lasso.Visible=true;
&#9;&#9;&#9;&#9;&#9;start_pos=Vector2.new(p[2].X, p[2].Y);
&#9;&#9;&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p
&#9;&#9;&#9;&#9;&#9;slope1=Vector2.new(rel.x/-rel.z, rel.y/-rel.z)
&#9;&#9;&#9;&#9;&#9;LassoSelect=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Click=1;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;--A double click! :o
&#9;&#9;&#9;&#9;Click=Click+1;
&#9;&#9;&#9;&#9;if SelectedPart==1 and PartClicked~=nil then
&#9;&#9;&#9;&#9;&#9;Targ=PartClicked;
&#9;&#9;&#9;&#9;&#9;i=1; while i&lt;Click and Targ.Parent~=workspace do i=i+1; Targ=Targ.Parent; end
&#9;&#9;&#9;&#9;&#9;Selection.Add(Targ);
&#9;&#9;&#9;&#9;elseif SelectedPart==0 then
&#9;&#9;&#9;&#9;&#9;Targ=PartClicked;
&#9;&#9;&#9;&#9;&#9;for i=2,Click do Targ=Targ.Parent; end
&#9;&#9;&#9;&#9;&#9;Selection.Remove(Targ);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;lasso.Size=UDim2.new(0,0,0,0);
&#9;&#9;&#9;lasso.Visible=true;
&#9;&#9;&#9;start_pos=Vector2.new(p[2].X, p[2].Y);
&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p
&#9;&#9;&#9;slope1=Vector2.new(rel.x/-rel.z, rel.y/-rel.z)
&#9;&#9;&#9;LassoSelect=true;
&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;Click=1;
&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;end
&#9;&#9;LastClick=tick();
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;Drag.Move(p[2].UnitRay);
&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;if lasso.Visible then
&#9;&#9;&#9;lasso.Position=UDim2.new(0, math.min(p[2].X, start_pos.x), 0, math.min(p[2].Y, start_pos.y));
&#9;&#9;&#9;lasso.Size=UDim2.new(0, math.abs(p[2].X-start_pos.x), 0, math.abs(p[2].Y-start_pos.y));
&#9;&#9;end
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;Drag.Up();
&#9;&#9;p[2].Icon=GetIcon(p[2].Target);&#9;
&#9;&#9;if LassoSelect then
&#9;&#9;&#9;lasso.Visible=false;
&#9;&#9;&#9;LassoSelect=false;
&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p 
&#9;&#9;&#9;search(slope1, Vector2.new(rel.x/-rel.z, rel.y/-rel.z), p[2]);
&#9;&#9;end
&#9;elseif c==&quot;Undo&quot; then
&#9;&#9;History.Undo();
&#9;elseif c==&quot;Redo&quot; then
&#9;&#9;History.Redo();
&#9;elseif c==&quot;Group&quot; then
&#9;&#9;if #Selection.Get()&gt;1 then
&#9;&#9;&#9;local max_parent=Selection.Get()[1];
&#9;&#9;&#9;local g=Instance.new(&quot;Model&quot;);
&#9;&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;&#9;if v.Parent:IsAncestorOf(max_parent) then
&#9;&#9;&#9;&#9;&#9;max_parent = v.Parent;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;v.Parent=g;
&#9;&#9;&#9;end
&#9;&#9;&#9;g.Parent=max_parent;
&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;Selection.Add(g);
&#9;&#9;end
&#9;elseif c==&quot;Ungroup&quot; then
&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;if v:IsA(&quot;Model&quot;) then
&#9;&#9;&#9;&#9;for a,b in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;b.Parent=v.Parent;
&#9;&#9;&#9;&#9;&#9;Selection.Add(b);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif c==&quot;Delete&quot; then
&#9;&#9;parents={};
&#9;&#9;items=HasPermission(GetParts(Selection.Get()), &quot;delete&quot;);
&#9;&#9;for i,v in pairs(items) do
&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;parents[#parents+1]=v.Parent;
&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Delete&quot;, items, parents);
&#9;elseif c==&quot;Clone&quot; then
&#9;&#9;local items={};
&#9;&#9;local refs={};
&#9;&#9;upward=0;
&#9;&#9;if Options.CloneShift then
&#9;&#9;&#9;for i,p in pairs(GetParts(Selection.Get())) do
&#9;&#9;&#9;&#9;x=math.abs((p.CFrame*CFrame.Angles(0,math.pi/2,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;y=math.abs((p.CFrame*CFrame.Angles(math.pi/2,0,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;z=math.abs(p.CFrame.lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;if (y &gt;= x and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.y);
&#9;&#9;&#9;&#9;elseif (x &gt;= y and x &gt;= z) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.x);
&#9;&#9;&#9;&#9;elseif (z &gt;= x and z &gt;= y) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.z);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;local p=v:clone();
&#9;&#9;&#9;p.Parent=workspace;
&#9;&#9;&#9;items[#items+1]=p;
&#9;&#9;end
&#9;&#9;for i,v in pairs(GetParts(items)) do
&#9;&#9;&#9;v.CFrame = CFrame.new(0, upward, 0) * v.CFrame;
&#9;&#9;&#9;v.Name=&quot;BlobbyblobBuild_&quot;..player.Name;
&#9;&#9;&#9;refs[#refs+1]={v, v.CFrame};
&#9;&#9;end
&#9;&#9;Selection.Clear()
&#9;&#9;for i,v in pairs(items) do
&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;end
&#9;&#9;History.Action(&quot;Clone&quot;, items, refs);
&#9;elseif c==&quot;Save&quot; then
&#9;&#9;local s=script:findFirstChild(&quot;Save&quot;);
&#9;&#9;if s~=nil then
&#9;&#9;&#9;local s=s:clone();
&#9;&#9;&#9;s.Disabled=false;
&#9;&#9;&#9;s.Parent=game.Players.LocalPlayer.Backpack;
&#9;&#9;end
&#9;end

local round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end
&#9;--Almost a function: Refresh Dock.
&#9;if Options.DockVisible then
&#9;&#9;gui1.Visible=true;
&#9;&#9;if #GetParts(Selection.Get())==1 then
&#9;&#9;part=GetParts(Selection.Get())[1];
&#9;&#9;local x,y,z,r00,r01,r02,r10,r11,r12,r20,r21,r22=part.CFrame:components();
&#9;&#9;gui2.Text=round(x, 1e-6);
&#9;&#9;gui4.Text=round(y, 1e-6);
&#9;&#9;gui5.Text=round(z, 1e-6);
&#9;&#9;gui7.Text=part.Size.x;
&#9;&#9;gui8.Text=part.Size.y;
&#9;&#9;gui9.Text=part.Size.z;
&#9;&#9;gui11.Text=round(r00, 1e-5);
&#9;&#9;gui12.Text=round(r01, 1e-5);
&#9;&#9;gui13.Text=round(r02, 1e-5);
&#9;&#9;gui14.Text=round(r10, 1e-5);
&#9;&#9;gui15.Text=round(r11, 1e-5);
&#9;&#9;gui16.Text=round(r12, 1e-5);
&#9;&#9;gui17.Text=round(r20, 1e-5);
&#9;&#9;gui18.Text=round(r21, 1e-5);
&#9;&#9;gui19.Text=round(r22, 1e-5);
&#9;&#9;x,y,z=part.CFrame:toEulerAnglesXYZ();
&#9;&#9;gui21.Text=round(math.deg(x), 1e-5);
&#9;&#9;gui22.Text=round(math.deg(y), 1e-5);
&#9;&#9;gui23.Text=round(math.deg(z), 1e-5);
&#9;&#9;else
&#9;&#9;&#9;gui2.Text=&quot;&quot;;
&#9;&#9;&#9;gui4.Text=&quot;&quot;;
&#9;&#9;&#9;gui5.Text=&quot;&quot;;
&#9;&#9;&#9;gui7.Text=&quot;&quot;;
&#9;&#9;&#9;gui8.Text=&quot;&quot;;
&#9;&#9;&#9;gui9.Text=&quot;&quot;;
&#9;&#9;&#9;gui11.Text=&quot;&quot;;
&#9;&#9;&#9;gui12.Text=&quot;&quot;;
&#9;&#9;&#9;gui13.Text=&quot;&quot;;
&#9;&#9;&#9;gui14.Text=&quot;&quot;;
&#9;&#9;&#9;gui15.Text=&quot;&quot;;
&#9;&#9;&#9;gui16.Text=&quot;&quot;;
&#9;&#9;&#9;gui17.Text=&quot;&quot;;
&#9;&#9;&#9;gui18.Text=&quot;&quot;;
&#9;&#9;&#9;gui19.Text=&quot;&quot;;
&#9;&#9;&#9;gui21.Text=&quot;&quot;;
&#9;&#9;&#9;gui22.Text=&quot;&quot;;
&#9;&#9;&#9;gui23.Text=&quot;&quot;;
&#9;&#9;end
&#9;else
&#9;&#9;gui1.Visible=false
&#9;end
end


--The two following functions were made by weaselman50. Don&apos;t ask me how they work. :P
function check(rel, slope1, slope2, Axis)
&#9;if rel[Axis]&gt;slope2[Axis]*-rel.z and slope1[Axis]&gt;slope2[Axis] then 
&#9;&#9;return rel[Axis]&lt;slope1[Axis]*-rel.z
&#9;elseif slope1[Axis]&lt;slope2[Axis] and rel[Axis]&lt;slope2[Axis]*-rel.z then
&#9;&#9;return rel[Axis]&gt;slope1[Axis]*-rel.z
&#9;else
&#9;&#9;return false
&#9;end
end
function search(slope1, slope2, mouse)
&#9;print(&quot;Search called&quot;);
&#9;print(&quot;Slope1: &quot;, slope1, &quot; - Slope2: &quot;, slope2);
&#9;parts=HasPermission(GetParts(workspace:GetChildren()), &quot;select&quot;);
&#9;for i, v in pairs(parts) do
&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(v.Position)).p
&#9;&#9;if rel.z&lt;0 and check(rel, slope1, slope2, &quot;x&quot;) and check(rel, slope1, slope2, &quot;y&quot;) then
&#9;&#9;&#9;Selection.Add(v)
&#9;&#9;end
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX460">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Permission_Script</string>
							<ProtectedString name="Source">function Permission(part,case)
&#9;if OnlineMode then
&#9;&#9;if #part.Name&gt;16 and string.sub(part.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;&#9;local owner=game.Players:findFirstChild(string.sub(part.Name,17))
&#9;&#9;&#9;if not owner then
&#9;&#9;&#9;&#9;if case~=&quot;select&quot; or not part.Locked or (keys.check(51) or keys.check(52)) then
&#9;&#9;&#9;&#9;&#9;return true; --player left the game
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;local bp=owner:findFirstChild(&quot;BuildPermissions&quot;);
&#9;&#9;&#9;&#9;if bp~=nil then
&#9;&#9;&#9;&#9;&#9;if bp:findFirstChild(player.Name..&quot;_&quot;..case) then
&#9;&#9;&#9;&#9;&#9;&#9;if bp[player.Name..&quot;_&quot;..case].Value then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if case~=&quot;select&quot; or not part.Locked or (keys.check(51) or keys.check(52)) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return true; --player gave permission
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif not part.Locked and case==&quot;clone&quot; then
&#9;&#9;&#9;return true --return true for cloning a starter part
&#9;&#9;end
&#9;else
--for offline build, return true for everything except selecting and dragging locked parts (without alt selected).
&#9;&#9;if case==&quot;drag&quot; or case==&quot;select&quot; then
&#9;&#9;&#9;if (keys.check(51) or keys.check(52)) or not part.Locked then
&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;return false
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false;
end

function HasPermission(table_of_parts, case)
&#9;local t={};
&#9;for i,v in pairs(table_of_parts) do
&#9;&#9;if Permission(v,case) then
&#9;&#9;&#9;t[#t+1]=v;
&#9;&#9;end
&#9;end
&#9;return t;
end

function UserPermission(LocalUser, TargetUser, case)
&#9;local bp=TargetUser:findFirstChild(&quot;BuildPermissions&quot;);
&#9;if bp~=nil then
&#9;&#9;if bp:findFirstChild(LocalUser.Name..&quot;_&quot;..case) then
&#9;&#9;&#9;if bp[LocalUser.Name..&quot;_&quot;..case].Value then
&#9;&#9;&#9;&#9;return true; --player gave permission
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

_possible_permissions={&quot;select&quot;,&quot;drag&quot;,&quot;clone&quot;,&quot;handles_drag&quot;,&quot;move&quot;,&quot;handles_resize&quot;,&quot;resize&quot;,&quot;handles_rotate&quot;,&quot;rotate&quot;,&quot;lock&quot;,&quot;color&quot;,&quot;material&quot;,&quot;transparency&quot;,&quot;reflectance&quot;,&quot;anchor&quot;,&quot;cancollide&quot;,&quot;formfactor&quot;,&quot;shape&quot;,&quot;surface&quot;,&quot;velocity&quot;,&quot;rotvelocity&quot;,&quot;friction&quot;,&quot;delete&quot;,&quot;save&quot;, &quot;elasticity&quot;,&quot;owner_only&quot;}

--Give all permissions to every player for themself.
if player:findFirstChild(&quot;BuildPermissions&quot;)==nil then
local m=Instance.new(&quot;Model&quot;);
m.Name=&quot;BuildPermissions&quot;;
for i,v in pairs(_possible_permissions) do
local q=Instance.new(&quot;BoolValue&quot;);
q.Name=player.Name..&quot;_&quot;..v;
q.Value=true;
q.Parent=m;
end
m.Parent=player;
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX461">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Reflectance_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Reflectance()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;FunctionData.Reflectance.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;reflectance&quot;);
&#9;&#9;FunctionData.Reflectance.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Reflectance;
&#9;&#9;&#9;if FunctionData.Reflectance.Relative then
&#9;&#9;&#9;&#9;v.Reflectance=math.min(1e8, math.max(0, v.Reflectance+FunctionData.Reflectance.Value));
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;v.Reflectance=math.min(1e8, math.max(0, FunctionData.Reflectance.Value));
&#9;&#9;&#9;end
&#9;&#9;&#9;after[i]=v.Reflectance;
&#9;&#9;end
&#9;&#9;pass_action=false;
&#9;&#9;for i,v in pairs(prior) do
&#9;&#9;&#9;if prior[i]~=after[i] then
&#9;&#9;&#9;&#9;pass_action=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if pass_action then
&#9;&#9;&#9;History.Action(&quot;Reflectance&quot;, parts, prior, after);
&#9;&#9;end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index=0;

FunctionData.Reflectance = FunctionData.Reflectance or {};
FunctionData.Reflectance.Relative = FunctionData.Reflectance.Relative or false;
FunctionData.Reflectance.Value = FunctionData.Reflectance.Value or 0.5;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Reflectance&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;RelativeConstant&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,16) obj43.Text=&quot;Constant&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)

obj42.Text = tostring(FunctionData.Reflectance.Value);
obj40.Parent=obj1;
TB.insert(obj41, obj42);

function RefreshButtons()
obj43.Text = FunctionData.Reflectance.Relative and &quot;Relative&quot; or &quot;Constant&quot;;
end

obj43.MouseButton1Down:connect(function()
FunctionData.Reflectance.Relative = not FunctionData.Reflectance.Relative;
RefreshButtons();
end)

RefreshButtons();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX462">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Resize_Script</string>
							<ProtectedString name="Source">function PaletteFunctions.Resize()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Button1Down&quot; then
&#9;&#9;handles.Visible=false;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;handles.Visible=true;
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;HandlesUp();
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;handles.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;resize&quot;);
&#9;&#9;pre_size={};
&#9;&#9;post_size={};
&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;pre_size[i]=v.Size;
&#9;&#9;&#9;local cf = v.CFrame;
&#9;&#9;&#9;v.Size = v.Size + Vector3.new(FunctionData.Resize.x, FunctionData.Resize.y, FunctionData.Resize.z);
&#9;&#9;&#9;v.CFrame = cf;
&#9;&#9;&#9;post_size[i]=v.Size;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Resize&quot;, p, pre_size, post_size);
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(Options.ApplyButton) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Resize=FunctionData.Resize or {};

FunctionData.Resize.x = FunctionData.Resize.x or 0;
FunctionData.Resize.y = FunctionData.Resize.y or 0;
FunctionData.Resize.z = FunctionData.Resize.z or 0;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Resize&quot; obj40.Position=UDim2.new(0,243,1,-78) obj40.Size=UDim2.new(0,84,0,78)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;X&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(155/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Y&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,147/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;Z&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;Neg&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,25,0,14) obj47.Text=&quot;* -1&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Doub&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,29,0,62) obj48.Size=UDim2.new(0,26,0,14) obj48.Text=&quot;* 2&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Half&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,57,0,62) obj49.Size=UDim2.new(0,25,0,14) obj49.Text=&quot;* .5&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
obj40.Parent=obj1;
TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);
obj42.Text=FunctionData.Resize.x;
obj44.Text=FunctionData.Resize.y;
obj46.Text=FunctionData.Resize.z;

obj47.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * -1;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * -1;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * -1;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)
obj48.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * 2;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * 2;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * 2;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Resize.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Resize.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Resize.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Resize.x = (FunctionData.Resize.x or 0) * .5;
FunctionData.Resize.y = (FunctionData.Resize.y or 0) * .5;
FunctionData.Resize.z = (FunctionData.Resize.z or 0) * .5;
obj42.Text = FunctionData.Resize.x;
obj44.Text = FunctionData.Resize.y;
obj46.Text = FunctionData.Resize.z;
end)

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_y&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_z&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

handles=Instance.new(&quot;Handles&quot;);
handles.Color=Options.ResizeHandlesColor;
handles.Parent=obj1;

function HandlesUp()
if resize_drag~=nil then
History.Action(&quot;Move+Resize&quot;, resize_drag, original_location, resize_drag.CFrame, original_size, resize_drag.Size);
original_locations={};
UpdateHandles();
end
end;

resize_drag=nil;
old_distance=0;
original_location=CFrame.new();
original_size=CFrame.new();
handles.MouseButton1Down:connect(function()
&#9;p=HasPermission(GetParts(Selection.Get()), &quot;handles_resize&quot;);
&#9;if #p==1 then
&#9;&#9;resize_drag=p[1];
&#9;&#9;original_location=resize_drag.CFrame;
&#9;&#9;original_size=resize_drag.Size;
&#9;&#9;old_distance = 0;
&#9;end
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
&#9;new_distance = round(dist - old_distance, Options.ResizeDragIntervals);
&#9;old_distance = old_distance + new_distance;
&#9;if new_distance~=0 then
&#9;&#9;local faces=Vector3.new();
&#9;&#9;if face==Enum.NormalId.Left then
&#9;&#9;&#9;faces=Vector3.new(-1, 0, 0); -- -
&#9;&#9;elseif face==Enum.NormalId.Right then
&#9;&#9;&#9;faces=Vector3.new(1, 0, 0); -- +
&#9;&#9;elseif face==Enum.NormalId.Top then
&#9;&#9;&#9;faces=Vector3.new(0, 1, 0); -- +
&#9;&#9;elseif face==Enum.NormalId.Bottom then
&#9;&#9;&#9;faces=Vector3.new(0, -1, 0); -- -
&#9;&#9;elseif face==Enum.NormalId.Front then
&#9;&#9;&#9;faces=Vector3.new(0, 0, -1); -- -
&#9;&#9;elseif face==Enum.NormalId.Back then
&#9;&#9;&#9;faces=Vector3.new(0, 0, 1); -- +
&#9;&#9;end
&#9;&#9;if math.abs(faces.x)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.x+Options.SmallestSize.x, new_distance);&#9;&#9;&#9;
&#9;&#9;elseif math.abs(faces.y)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.y+Options.SmallestSize.y, new_distance);
&#9;&#9;elseif math.abs(faces.z)==1 then
&#9;&#9;&#9;new_distance=math.max(-resize_drag.Size.z+Options.SmallestSize.z, new_distance);
&#9;&#9;end
&#9;&#9;cf=resize_drag.CFrame;
&#9;&#9;resize_drag.Size = resize_drag.Size + Vector3.new(math.abs(faces.x), math.abs(faces.y), math.abs(faces.z)) * new_distance;
&#9;&#9;resize_drag.CFrame=cf * CFrame.new(faces * new_distance / 2);
&#9;&#9;UpdateHandles();
&#9;end
end)

function UpdateHandles()
&#9;p=HasPermission(GetParts(Selection.Get()), &quot;handles_resize&quot;);
&#9;if #p==1 then
&#9;&#9;handles.Adornee=p[1];
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=p[1].CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, p[1].Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=p[1].CFrame*CFrame.new(0, p[1].Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=p[1].CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, p[1].Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;else
&#9;&#9;handles.Adornee=nil;
&#9;&#9;axes_x.Transparency=1;
&#9;&#9;axes_y.Transparency=1;
&#9;&#9;axes_z.Transparency=1;
&#9;end
end

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

UpdateHandles();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX463">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">RotVelocity_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.RotVelocity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.RotVelocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.RotVelocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.RotVelocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;print(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z);
&#9;&#9;local prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;rotvelocity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.RotVelocity;
&#9;&#9;&#9;v.RotVelocity=Vector3.new(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z);
&#9;&#9;end
&#9;&#9;History.Action(&quot;RotVelocity&quot;, parts, prior, Vector3.new(FunctionData.RotVelocity.x, FunctionData.RotVelocity.y, FunctionData.RotVelocity.z));
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.RotVelocity = FunctionData.RotVelocity or {};
FunctionData.RotVelocity.x = FunctionData.RotVelocity.x or 0;
FunctionData.RotVelocity.y = FunctionData.RotVelocity.y or 0;
FunctionData.RotVelocity.z = FunctionData.RotVelocity.z or 0;


obj40=Instance.new(&quot;Frame&quot;); obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255); obj40.BorderColor3=Color3.new(27/255,42/255,53/255); obj40.Name=&quot;RotVelocity&quot;; obj40.Position=UDim2.new(0,243,1,-62); obj40.Size=UDim2.new(0,84,0,62);
obj41=Instance.new(&quot;TextBox&quot;); obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255); obj41.BorderColor3=Color3.new(27/255,42/255,53/255); obj41.Name=&quot;xBox&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,2,0,2); obj41.Size=UDim2.new(0,80,0,18); obj41.Text=&quot;X&quot;; obj41.TextColor3=Color3.new(27/255,42/255,53/255); obj41.Visible=false; obj41.ZIndex=2;
obj42=Instance.new(&quot;TextButton&quot;); obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255); obj42.BorderColor3=Color3.new(27/255,42/255,53/255); obj42.Name=&quot;xButton&quot;; obj42.Parent=obj40; obj42.Position=UDim2.new(0,2,0,2); obj42.Size=UDim2.new(0,80,0,18); obj42.Text=&quot;X&quot;; obj42.TextColor3=Color3.new(27/255,42/255,53/255);
obj43=Instance.new(&quot;TextBox&quot;); obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255); obj43.BorderColor3=Color3.new(27/255,42/255,53/255); obj43.Name=&quot;yBox&quot;; obj43.Parent=obj40; obj43.Position=UDim2.new(0,2,0,22); obj43.Size=UDim2.new(0,80,0,18); obj43.Text=&quot;Y&quot;; obj43.TextColor3=Color3.new(27/255,42/255,53/255); obj43.Visible=false; obj43.ZIndex=2;
obj44=Instance.new(&quot;TextButton&quot;); obj44.BackgroundColor3=Color3.new(157/255,255/255,255/255); obj44.BorderColor3=Color3.new(27/255,42/255,53/255); obj44.Name=&quot;yButton&quot;; obj44.Parent=obj40; obj44.Position=UDim2.new(0,2,0,22); obj44.Size=UDim2.new(0,80,0,18); obj44.Text=&quot;Y&quot;; obj44.TextColor3=Color3.new(27/255,42/255,53/255);
obj45=Instance.new(&quot;TextBox&quot;); obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255); obj45.BorderColor3=Color3.new(27/255,42/255,53/255); obj45.Name=&quot;zBox&quot;; obj45.Parent=obj40; obj45.Position=UDim2.new(0,2,0,42); obj45.Size=UDim2.new(0,80,0,18); obj45.Text=&quot;Z&quot;; obj45.TextColor3=Color3.new(27/255,42/255,53/255); obj45.Visible=false; obj45.ZIndex=2;
obj46=Instance.new(&quot;TextButton&quot;); obj46.BackgroundColor3=Color3.new(255/255,149/255,255/255); obj46.BorderColor3=Color3.new(27/255,42/255,53/255); obj46.Name=&quot;zButton&quot;; obj46.Parent=obj40; obj46.Position=UDim2.new(0,2,0,42); obj46.Size=UDim2.new(0,80,0,18); obj46.Text=&quot;Z&quot;; obj46.TextColor3=Color3.new(27/255,42/255,53/255);
obj42.Text=FunctionData.RotVelocity.x;
obj44.Text=FunctionData.RotVelocity.y;
obj46.Text=FunctionData.RotVelocity.z;
obj40.Parent=obj1;

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX464">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Rotate_Script</string>
							<ProtectedString name="Source">function PaletteFunctions.Rotate()

tab_index = 0;
function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Button1Down&quot; then
&#9;&#9;if pending_selection then
&#9;&#9;&#9;FunctionData.Rotate.Around = p[2].Target;
&#9;&#9;&#9;pending_selection = false;
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;HandlesUp();
&#9;&#9;&#9;UpdateButtons();
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;else
&#9;&#9;&#9;axes_x.Parent=nil;
&#9;&#9;&#9;axes_y.Parent=nil;
&#9;&#9;&#9;axes_z.Parent=nil;
&#9;&#9;&#9;aabb.Parent=nil;
&#9;&#9;&#9;handles.Visible=false;
&#9;&#9;&#9;Passive(p);
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;end
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;HandlesUp();
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;aabb.Parent=LocalBin;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;handles.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;aabb.Parent=nil;
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;if FunctionData.Rotate.x~=0 or FunctionData.Rotate.y~=0 or FunctionData.Rotate.z~=0 then
&#9;&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;rotate&quot;);
&#9;&#9;&#9;old_cframe={}; for i,v in pairs(p) do old_cframe[#old_cframe+1]=v.CFrame;&#9;end
&#9;&#9;&#9;if FunctionData.Rotate.Around and FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;center=CFrame.new(FunctionData.Rotate.Around.Position);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z))
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.Around and not FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.AsWhole then

&#9;&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center = CFrame.new(center / #p);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.Constant then

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(v.CFrame.p)*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;elseif FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(v.CFrame.p) * CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z)) * (v.CFrame - v.Position);
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;else

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = v.CFrame * CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;end
&#9;&#9;&#9;new_cframe={}; for i,v in pairs(p) do new_cframe[#new_cframe+1]=v.CFrame;&#9;end
&#9;&#9;&#9;History.Action(&quot;Rotate&quot;, p, old_cframe, new_cframe);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if pending_selection then
&#9;&#9;&#9;sb.Adornee = p[2].Target;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(Options.ApplyButton) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Rotate=FunctionData.Rotate or {};

FunctionData.Rotate.x = FunctionData.Rotate.x or 0;
FunctionData.Rotate.y = FunctionData.Rotate.y or 0;
FunctionData.Rotate.z = FunctionData.Rotate.z or 0;
if FunctionData.Rotate.WorldAxis==nil then
FunctionData.Rotate.WorldAxis = false;
end
if FunctionData.Rotate.AsWhole==nil then
FunctionData.Rotate.AsWhole = true;
end
if FunctionData.Rotate.Constant==nil then
FunctionData.Rotate.Constant = false;
end
FunctionData.Rotate.Around = FunctionData.Rotate.Around;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Rotate&quot; obj40.Position=UDim2.new(0,243,1,-142) obj40.Size=UDim2.new(0,84,0,142)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;X&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(155/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Y&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,147/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;Z&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;WorldObjAxis&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,80,0,14) obj47.Text=&quot;World Axis&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Neg&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,1,-16) obj48.Size=UDim2.new(0,25,0,14) obj48.Text=&quot;* -1&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Doub&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,29,1,-16) obj49.Size=UDim2.new(0,26,0,14) obj49.Text=&quot;* 2&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Half&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,57,1,-16) obj50.Size=UDim2.new(0,25,0,14) obj50.Text=&quot;* .5&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;AsWholeIndivid&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,2,0,78) obj51.Size=UDim2.new(0,80,0,14) obj51.Text=&quot;As Whole&quot; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj52=Instance.new(&quot;TextButton&quot;) obj52.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj52.BorderColor3=Color3.new(27/255,42/255,53/255) obj52.Name=&quot;Constant&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0,2,0,94) obj52.Size=UDim2.new(0,80,0,14) obj52.Text=&quot;Constant&quot; obj52.TextColor3=Color3.new(27/255,42/255,53/255)
obj53=Instance.new(&quot;TextButton&quot;) obj53.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj53.BorderColor3=Color3.new(27/255,42/255,53/255) obj53.Name=&quot;Constant&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0,2,0,110) obj53.Size=UDim2.new(0,80,0,14) obj53.Text=&quot;Around Point&quot; obj53.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;
TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);
obj42.Text=FunctionData.Rotate.x;
obj44.Text=FunctionData.Rotate.y;
obj46.Text=FunctionData.Rotate.z;

function UpdateButtons()
&#9;if FunctionData.Rotate.Around~=nil then
&#9;&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj51.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj52.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = FunctionData.Rotate.WorldAxis and &quot;World Axis&quot; or &quot;Centroid Axis&quot;;
&#9;&#9;obj51.Text = &quot;As Whole&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around Part&quot;;
&#9;elseif FunctionData.Rotate.AsWhole then
&#9;&#9;obj47.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj52.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = &quot;World Axis&quot;;
&#9;&#9;obj51.Text = &quot;As Whole&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;elseif FunctionData.Rotate.Constant then
&#9;&#9;obj47.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj51.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj53.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj47.Text = &quot;World Axis&quot;;
&#9;&#9;obj51.Text = &quot;Individually&quot;;
&#9;&#9;obj52.Text = &quot;Constant&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;else
&#9;&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = FunctionData.Rotate.WorldAxis and &quot;World Axis&quot; or &quot;Object&apos;s Axis&quot;;
&#9;&#9;obj51.Text = &quot;Individually&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;end
end

UpdateButtons();

obj47.MouseButton1Down:connect(function()
FunctionData.Rotate.WorldAxis = not FunctionData.Rotate.WorldAxis;
UpdateButtons();
UpdateHandles();
end)
obj51.MouseButton1Down:connect(function()
FunctionData.Rotate.AsWhole = not FunctionData.Rotate.AsWhole;
UpdateButtons();
UpdateHandles();
end)
obj52.MouseButton1Down:connect(function()
FunctionData.Rotate.Constant = not FunctionData.Rotate.Constant;
UpdateButtons();
UpdateHandles();
end)
pending_selection = false;
sb=Instance.new(&quot;SelectionBox&quot;);
sb.Color=Options.ActiveSelectionBoxColor;
sb.Name=&quot;PendingDistinguisher&quot;;
sb.Visible=false;
sb.Parent=obj1;
obj53.MouseButton1Down:connect(function()
&#9;if not pending_selection then
&#9;&#9;pending_selection = true;
&#9;&#9;sb.Visible=true;
&#9;else
&#9;&#9;pending_selection = false;
&#9;&#9;sb.Visible=false;
&#9;&#9;FunctionData.Rotate.Around = nil;
&#9;end
&#9;UpdateButtons();
end)

obj48.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * -1;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * -1;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * -1;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * 2;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * 2;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * 2;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)
obj50.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * .5;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * .5;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * .5;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_x&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_x&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

aabb=Instance.new(&quot;Part&quot;);
aabb.Anchored=true;
aabb.CanCollide=false;
aabb.Transparency=1;
aabb.Parent=LocalBin;
handles=Instance.new(&quot;ArcHandles&quot;);
handles.Color=Options.RotateHandlesColor;
handles.Adornee=aabb;
handles.Parent=obj1;

function HandlesUp()
&#9;if #rotate_drag&gt;0 then
&#9;&#9;new_cframe={};
&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;new_cframe[#new_cframe+1]=v.CFrame;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Rotate&quot;, rotate_drag, original_cframe, new_cframe);
&#9;&#9;rotate_drag={};
&#9;end
end;

old_rotation=0;
rotate_drag={};
original_cframe={};
rotate_by=Vector3.new(0,0,0);
handles.MouseButton1Down:connect(function(axis)
&#9;if axis==Enum.Axis.X then
&#9;&#9;rotate_by=Vector3.new(1,0,0);
&#9;elseif axis==Enum.Axis.Y then
&#9;&#9;rotate_by=Vector3.new(0,1,0);
&#9;elseif axis==Enum.Axis.Z then
&#9;&#9;rotate_by=Vector3.new(0,0,1);
&#9;end
&#9;rotate_drag=HasPermission(GetParts(Selection.Get()), &quot;handles_rotate&quot;);
&#9;old_rotation=0;
&#9;original_cframe={};
&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;original_cframe[i]=v.CFrame;
&#9;end
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
&#9;if #rotate_drag&gt;0 then
&#9;&#9;new_dist = round(dist - old_rotation, math.rad(Options.RotateDragIntervals));
&#9;&#9;if new_dist~=0 then
&#9;&#9;&#9;if FunctionData.Rotate.Around~=nil and FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;&#9;center=CFrame.new(FunctionData.Rotate.Around.Position);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Rotate.Around~=nil and not FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center = CFrame.new(center / #rotate_drag);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;old_rotation = old_rotation + new_dist;
&#9;end
end)

function UpdateHandles()
&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;handles_rotate&quot;);
&#9;if #parts&gt;0 then
&#9;&#9;if FunctionData.Rotate.Around~=nil and FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame.p;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = CFrame.new(center);
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;elseif FunctionData.Rotate.Around~=nil and not FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame.p;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;else
&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;end
&#9;&#9;&#9;center = center / #parts;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = CFrame.new(center);
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;end
&#9;else
&#9;&#9;handles.Visible=false;
&#9;end
end

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

UpdateHandles();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX465">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">SelectionOOP_Script</string>
							<ProtectedString name="Source">--[[ Selection

void Selection.Add(p as Part)
void Selection.Remove(p as Part)
bool Selection.Check(p as Part)
void Selection.Clear()
table Selection.Get() --returns all selected parts

]]

function getAABB(parts)
if type(parts)~=&quot;table&quot; then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
if #parts==0 then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
local min=parts[1].Position
local max=parts[1].Position
for i,v in pairs(parts) do
for x=-1,1,2 do
for y=-1,1,2 do
for z=-1,1,2 do
local s=v.Size/2;
local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
min=Vector3.new(math.min(p.x,min.x),math.min(p.y,min.y),math.min(p.z,min.z));
max=Vector3.new(math.max(p.x,max.x),math.max(p.y,max.y),math.max(p.z,max.z));
end
end
end
end
return min,max
end

function DistanceAlongLine(lineStart, lineDirection, point) 
return ((point - lineStart):Dot(lineDirection))  / (lineDirection:Dot(lineDirection)) --(lineStart + distanceAlongLine * lineDirection) 
end 

Selx={part, box, bb};
Selx.Remove=function(self)
&#9;if self.box~=nil then
&#9;&#9;self.box.Parent=nil;
&#9;end
&#9;if self.bb~=nil then
&#9;&#9;self.bb.Parent=nil;
&#9;end
end;
Selx.new=function()
local o={};
setmetatable(o, {__index = Selx});
return o;
end;

Selection={Parts={},};
Selection.Add=function(p)
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;if v.part==p or v.part:IsAncestorOf(p) then
&#9;&#9;&#9;return nil;
&#9;&#9;end
&#9;end
&#9;for i=#Selection.Parts, 1, -1 do
&#9;&#9;if Selection.Parts[i].part:IsDescendantOf(p) then
&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;end
&#9;end
&#9;e=Selx.new();
&#9;e.part = p;
&#9;e.box = Instance.new(&quot;SelectionBox&quot;);
&#9;e.box.Adornee = p;
&#9;e.box.Color = Options.BoundingBoxColor;
&#9;e.box.Parent = gui;
&#9;Selection.Parts[#Selection.Parts+1] = e;
end;
Selection.Remove=function(p)
&#9;done = false;
&#9;while not done do
&#9;&#9;done = true;
&#9;&#9;for i = #Selection.Parts, 1, -1 do
&#9;&#9;&#9;if Selection.Parts[i].part==p then
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;&#9;done=true;
&#9;&#9;&#9;&#9;i = 0;
&#9;&#9;&#9;elseif Selection.Parts[i].part:IsAncestorOf(p) then
&#9;&#9;&#9;&#9;for a,v in pairs(Selection.Parts[i].part:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;e=Selx.new();
&#9;&#9;&#9;&#9;&#9;e.part = v;
&#9;&#9;&#9;&#9;&#9;e.box = Instance.new(&quot;SelectionBox&quot;);
&#9;&#9;&#9;&#9;&#9;e.box.Adornee = v;
&#9;&#9;&#9;&#9;&#9;e.box.Color = Options.BoundingBoxColor;
&#9;&#9;&#9;&#9;&#9;e.box.Parent = gui;
&#9;&#9;&#9;&#9;&#9;Selection.Parts[#Selection.Parts+1] = e;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;done=false;
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;elseif Selection.Parts[i].part:IsDescendantOf(p) then
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end;
Selection.Check=function(p)
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;if v.part==p or v.part:IsAncestorOf(p) then
&#9;&#9;&#9;return true;
&#9;&#9;end
&#9;end
end;
Selection.Get=function()
&#9;parts={};
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;parts[#parts+1]=v.part;
&#9;end
&#9;return parts;
end;
Selection.Clear=function()
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;v:Remove();
&#9;end
&#9;Selection.Parts={};
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX466">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Shape_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Shape()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;shape&quot;);
&#9;&#9;made_change=false;
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;if v.className==&quot;Part&quot; then
&#9;&#9;&#9;&#9;prior[i]={v, v.CFrame, v.Size, v.Shape};
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;prior[i]={v, v.CFrame, v.Size};
&#9;&#9;&#9;end
&#9;&#9;&#9;if FunctionData.Shape.Mode==&quot;Brick&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Block;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Brick&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Block then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Block;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Block};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Wedge&quot; and v.className~=&quot;WedgePart&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;WedgePart&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Sphere&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Ball;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Sphere&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Ball then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Ball;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Ball};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Cylinder&quot; and v.className~=&quot;Part&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Part&quot;);
&#9;&#9;&#9;&#9;new.Shape=Enum.PartType.Cylinder;
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Cylinder&quot; and v.className==&quot;Part&quot; and v.Shape~=Enum.PartType.Cylinder then
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Shape=Enum.PartType.Cylinder;
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;&#9;after[i]={nil, Enum.PartType.Cylinder};
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Truss&quot; and v.className~=&quot;TrussPart&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;TrussPart&quot;);
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;SpawnLocation&quot; and v.className~=&quot;SpawnLocation&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;SpawnLocation&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Seat&quot; and v.className~=&quot;Seat&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;Seat&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;VehicleSeat&quot; and v.className~=&quot;VehicleSeat&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;VehicleSeat&quot;);
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;elseif FunctionData.Shape.Mode==&quot;Skateboard&quot; and v.className~=&quot;SkateboardPlatform&quot; then
&#9;&#9;&#9;&#9;local par=v.Parent;
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;local new=Instance.new(&quot;SkateboardPlatform&quot;);
&#9;&#9;&#9;&#9;if v:IsA(&quot;BasePart&quot;) and not v:IsA(&quot;TrussPart&quot;) and not v:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;&#9;&#9;new.FormFactor=v.FormFactor;
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;new.FormFactor=Enum.FormFactor.Custom;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Size=v.Size;
&#9;&#9;&#9;&#9;new.CFrame=v.CFrame;
&#9;&#9;&#9;&#9;new.BrickColor=v.BrickColor;
&#9;&#9;&#9;&#9;new.Material=v.Material;
&#9;&#9;&#9;&#9;new.Reflectance=v.Reflectance;
&#9;&#9;&#9;&#9;new.Transparency=v.Transparency;
&#9;&#9;&#9;&#9;new.Name=v.Name;
&#9;&#9;&#9;&#9;new.RotVelocity=v.RotVelocity;
&#9;&#9;&#9;&#9;new.Velocity=v.Velocity;
&#9;&#9;&#9;&#9;new.Anchored=v.Anchored;
&#9;&#9;&#9;&#9;new.CanCollide=v.CanCollide;
&#9;&#9;&#9;&#9;new.Locked=v.Locked;
&#9;&#9;&#9;&#9;new.Elasticity=v.Elasticity;
&#9;&#9;&#9;&#9;new.Friction=v.Friction;
&#9;&#9;&#9;&#9;new.BackSurface=v.BackSurface
&#9;&#9;&#9;&#9;new.BottomSurface=v.BottomSurface
&#9;&#9;&#9;&#9;new.FrontSurface=v.FrontSurface
&#9;&#9;&#9;&#9;new.LeftSurface=v.LeftSurface
&#9;&#9;&#9;&#9;new.RightSurface=v.RightSurface
&#9;&#9;&#9;&#9;new.TopSurface=v.TopSurface
&#9;&#9;&#9;&#9;for _,a in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;a:clone().Parent=new;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;new.Parent=par;
&#9;&#9;&#9;&#9;after[i]={new};
&#9;&#9;&#9;&#9;Selection.Add(new);
&#9;&#9;&#9;&#9;made_change=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if made_change then History.Action(&quot;Shape&quot;, parts, prior, after); end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Shape = FunctionData.Shape or {};
FunctionData.Shape.Mode = FunctionData.Shape.Mode or &quot;Brick&quot;;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(215/255,247/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Shape&quot; obj40.Position=UDim2.new(0,243,1,-182) obj40.Size=UDim2.new(0,84,0,182)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Brick&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;Brick&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;Wedge&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,22) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;Wedge&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;Sphere&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,42) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Sphere&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;Truss&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,62) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Truss&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;Cylinder&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,82) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Cylinder&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255)
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;SpawnLocation&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,102) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;SpawnLocation&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;Seat&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,122) obj47.Size=UDim2.new(0,80,0,18) obj47.Text=&quot;Seat&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;VehicleSeat&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,142) obj48.Size=UDim2.new(0,80,0,18) obj48.Text=&quot;VehicleSeat&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;SkateboardPlatform&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,162) obj49.Size=UDim2.new(0,80,0,18) obj49.Text=&quot;Skateboard&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

function RefreshButtons()
obj41.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Brick&quot; and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Wedge&quot; and Options.SelectedColor or Options.ButtonColor;
obj43.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Sphere&quot; and Options.SelectedColor or Options.ButtonColor;
obj44.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Truss&quot; and Options.SelectedColor or Options.ButtonColor;
obj45.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Cylinder&quot; and Options.SelectedColor or Options.ButtonColor;
obj46.BackgroundColor3 = FunctionData.Shape.Mode==&quot;SpawnLocation&quot; and Options.SelectedColor or Options.ButtonColor;
obj47.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Seat&quot; and Options.SelectedColor or Options.ButtonColor;
obj48.BackgroundColor3 = FunctionData.Shape.Mode==&quot;VehicleSeat&quot; and Options.SelectedColor or Options.ButtonColor;
obj49.BackgroundColor3 = FunctionData.Shape.Mode==&quot;Skateboard&quot; and Options.SelectedColor or Options.ButtonColor;
end

obj41.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Brick&quot;; RefreshButtons(); end)
obj42.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Wedge&quot;; RefreshButtons(); end)
obj43.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Sphere&quot;; RefreshButtons(); end)
obj44.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Truss&quot;; RefreshButtons(); end)
obj45.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Cylinder&quot;; RefreshButtons(); end)
obj46.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;SpawnLocation&quot;; RefreshButtons(); end)
obj47.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Seat&quot;; RefreshButtons(); end)
obj48.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;VehicleSeat&quot;; RefreshButtons(); end)
obj49.MouseButton1Down:connect(function() FunctionData.Shape.Mode=&quot;Skateboard&quot;; RefreshButtons(); end)

RefreshButtons();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX467">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Surface_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Surface()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if p[2].Target~=nil and FunctionData.Surface.Choosing then
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;FunctionData.Surface.Choosing=false;
&#9;&#9;&#9;FunctionData.Surface.Face=p[2].TargetSurface;
&#9;&#9;&#9;RefreshButtons();
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if FunctionData.Surface.Choosing and p[2].Target~=nil then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;&#9;sb.TargetSurface=p[2].TargetSurface;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;made_a_change=false;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;surface&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;if FunctionData.Surface.Face==Enum.NormalId.Left then
&#9;&#9;&#9;&#9;prior[i]=v.LeftSurface;
&#9;&#9;&#9;&#9;v.LeftSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.LeftSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Right then
&#9;&#9;&#9;&#9;prior[i]=v.RightSurface;
&#9;&#9;&#9;&#9;v.RightSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.RightSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Top then
&#9;&#9;&#9;&#9;prior[i]=v.TopSurface;
&#9;&#9;&#9;&#9;v.TopSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.TopSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Bottom then
&#9;&#9;&#9;&#9;prior[i]=v.BottomSurface;
&#9;&#9;&#9;&#9;v.BottomSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.BottomSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Front then
&#9;&#9;&#9;&#9;prior[i]=v.FrontSurface;
&#9;&#9;&#9;&#9;v.FrontSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.FrontSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Surface.Face==Enum.NormalId.Back then
&#9;&#9;&#9;&#9;prior[i]=v.BackSurface;
&#9;&#9;&#9;&#9;v.BackSurface=FunctionData.Surface.Mode;
&#9;&#9;&#9;&#9;if v.BackSurface~=FunctionData.Surface.Mode then
&#9;&#9;&#9;&#9;&#9;made_a_change=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Action(&quot;Surface&quot;, parts, FunctionData.Surface.Face, prior, FunctionData.Surface.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Surface = FunctionData.Surface or {};
FunctionData.Surface.Mode = FunctionData.Surface.Mode or Enum.SurfaceType.Smooth;
FunctionData.Surface.Face = FunctionData.Surface.Face or Enum.NormalId.Left;
FunctionData.Surface.Choosing = false;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Surface&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,306,0,60)
obj41=Instance.new(&quot;ImageButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Image=&quot;http://www.roblox.com/Asset/?ID=16171080&quot; obj41.Name=&quot;Weld&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,192,0,2) obj41.Size=UDim2.new(0,36,0,36)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Image=&quot;http://www.roblox.com/Asset/?ID=16171136&quot; obj42.Name=&quot;Universal&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,116,0,2) obj42.Size=UDim2.new(0,36,0,36)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Image=&quot;http://www.roblox.com/Asset/?ID=16171065&quot; obj43.Name=&quot;Hinge&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,230,0,2) obj43.Size=UDim2.new(0,36,0,36)
obj44=Instance.new(&quot;ImageButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Image=&quot;http://www.roblox.com/Asset/?ID=16171066&quot; obj44.Name=&quot;Inlet&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,78,0,2) obj44.Size=UDim2.new(0,36,0,36)
obj45=Instance.new(&quot;ImageButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Image=&quot;http://www.roblox.com/Asset/?ID=16171076&quot; obj45.Name=&quot;Smooth&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,2) obj45.Size=UDim2.new(0,36,0,36)
obj46=Instance.new(&quot;ImageButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Image=&quot;http://www.roblox.com/Asset/?ID=16171077&quot; obj46.Name=&quot;Studs&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,40,0,2) obj46.Size=UDim2.new(0,36,0,36)
obj47=Instance.new(&quot;ImageButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Image=&quot;http://www.roblox.com/Asset/?ID=16171070&quot; obj47.Name=&quot;Motor&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,268,0,2) obj47.Size=UDim2.new(0,36,0,36)
obj48=Instance.new(&quot;ImageButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Image=&quot;http://www.roblox.com/Asset/?ID=16171062&quot; obj48.Name=&quot;Glue&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,154,0,2) obj48.Size=UDim2.new(0,36,0,36)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Left&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,40) obj49.Size=UDim2.new(0,41,0,18) obj49.Text=&quot;Left&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Right&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,45,0,40) obj50.Size=UDim2.new(0,42,0,18) obj50.Text=&quot;Right&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;Top&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,89,0,40) obj51.Size=UDim2.new(0,41,0,18) obj51.Text=&quot;Top&quot; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj52=Instance.new(&quot;TextButton&quot;) obj52.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj52.BorderColor3=Color3.new(27/255,42/255,53/255) obj52.Name=&quot;Bottom&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0,132,0,40) obj52.Size=UDim2.new(0,42,0,18) obj52.Text=&quot;Bottom&quot; obj52.TextColor3=Color3.new(27/255,42/255,53/255)
obj53=Instance.new(&quot;TextButton&quot;) obj53.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj53.BorderColor3=Color3.new(27/255,42/255,53/255) obj53.Name=&quot;Front&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0,176,0,40) obj53.Size=UDim2.new(0,41,0,18) obj53.Text=&quot;Front&quot; obj53.TextColor3=Color3.new(27/255,42/255,53/255)
obj54=Instance.new(&quot;TextButton&quot;) obj54.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj54.BorderColor3=Color3.new(27/255,42/255,53/255) obj54.Name=&quot;Back&quot; obj54.Parent=obj40 obj54.Position=UDim2.new(0,219,0,40) obj54.Size=UDim2.new(0,42,0,18) obj54.Text=&quot;Back&quot; obj54.TextColor3=Color3.new(27/255,42/255,53/255)
obj55=Instance.new(&quot;TextButton&quot;) obj55.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj55.BorderColor3=Color3.new(27/255,42/255,53/255) obj55.Name=&quot;Pick&quot; obj55.Parent=obj40 obj55.Position=UDim2.new(0,263,0,40) obj55.Size=UDim2.new(0,41,0,18) obj55.Text=&quot;Pick&quot; obj55.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

sb=Instance.new(&quot;SurfaceSelection&quot;);
sb.Color=Options.SurfaceSelectionColor;
sb.Visible=false;
sb.Parent=obj40;

function RefreshButtons()
for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48}) do
v.BackgroundColor3=Options.ButtonColor;
end
if FunctionData.Surface.Mode==Enum.SurfaceType.Weld then obj41.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Universal then obj42.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Hinge then obj43.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Inlet then obj44.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Smooth then obj45.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Studs then obj46.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Motor then obj47.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Mode==Enum.SurfaceType.Glue then obj48.BackgroundColor3=Options.SelectedColor; end
for i,v in pairs({obj49, obj50, obj51, obj52, obj53, obj54, obj55}) do
v.BackgroundColor3=Options.ButtonColor;
end
if FunctionData.Surface.Choosing then
obj55.BackgroundColor3=Options.SelectedColor;
else
if FunctionData.Surface.Face==Enum.NormalId.Left then obj49.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Right then obj50.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Top then obj51.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Bottom then obj52.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Front then obj53.BackgroundColor3=Options.SelectedColor; end
if FunctionData.Surface.Face==Enum.NormalId.Back then obj54.BackgroundColor3=Options.SelectedColor; end
end
end

obj41.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Weld; RefreshButtons(); end)
obj42.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Universal; RefreshButtons(); end)
obj43.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Hinge; RefreshButtons(); end)
obj44.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Inlet; RefreshButtons(); end)
obj45.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Smooth; RefreshButtons(); end)
obj46.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Studs; RefreshButtons(); end)
obj47.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Motor; RefreshButtons(); end)
obj48.MouseButton1Down:connect(function() FunctionData.Surface.Mode=Enum.SurfaceType.Glue; RefreshButtons(); end)

obj49.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Left; RefreshButtons(); end)
obj50.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Right; RefreshButtons(); end)
obj51.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Top; RefreshButtons(); end)
obj52.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Bottom; RefreshButtons(); end)
obj53.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Front; RefreshButtons(); end)
obj54.MouseButton1Down:connect(function() FunctionData.Surface.Face=Enum.NormalId.Back; RefreshButtons(); end)

obj55.MouseButton1Down:connect(function()
FunctionData.Surface.Choosing=true;
sb.Adornee=nil;
sb.Visible=true;
RefreshButtons();
end)
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX468">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">TextBoxOOP_Script</string>
							<ProtectedString name="Source">--[[
void TB.insert(textbox as TextBox, textbutton as TextButton)
void TB.enter()
void TB.remove(item as TextBox, item as TextButton)
void TB.clean()
]]

TB={
&#9;insert=function(textbox,textbutton)
&#9;&#9;local cxn1=textbutton.MouseEnter:connect(function()
&#9;&#9;&#9;textbox.Visible=true;
&#9;&#9;&#9;TB.current=textbutton;
&#9;&#9;end);
&#9;&#9;local cxn2=textbutton.MouseLeave:connect(function()
&#9;&#9;wait()
&#9;&#9;textbox.Visible=false;
&#9;&#9;&#9;if TB.current==textbutton then
&#9;&#9;&#9;&#9;TB.current=nil;
&#9;&#9;&#9;end
&#9;&#9;end);
&#9;&#9;local cxn3=textbutton.MouseButton1Down:connect(function()
&#9;&#9;&#9;TB.enter();
&#9;&#9;end);
&#9;&#9;table.insert(TB.items,{textbox,textbutton,cxn1,cxn2,cxn3});
&#9;end,

&#9;enter=function()
&#9;&#9;for i,v in pairs(TB.items) do
&#9;&#9;&#9;if v[2]==TB.current then
&#9;&#9;&#9;&#9;TB.current.Text=v[1].Text;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;remove=function(item)
&#9;&#9;for i,v in pairs(TB.items) do
&#9;&#9;&#9;if item==v[1] or item==v[2] then
&#9;&#9;&#9;&#9;v[3]:disconnect();
&#9;&#9;&#9;&#9;v[4]:disconnect();
&#9;&#9;&#9;&#9;v[5]:disconnect();
&#9;&#9;&#9;&#9;table.remove(TB.items,i);
&#9;&#9;&#9;&#9;if TB.current==v[2] then
&#9;&#9;&#9;&#9;&#9;TB.current=nil;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;clean=function()
&#9;&#9;for i=#TB.items,1,-1 do
&#9;&#9;&#9;if TB.items[i][1].Parent==nil and TB.items[i][2].Parent==nil then
&#9;&#9;&#9;&#9;TB.items[i][3]:disconnect();
&#9;&#9;&#9;&#9;TB.items[i][4]:disconnect();
&#9;&#9;&#9;&#9;TB.items[i][5]:disconnect();
&#9;&#9;&#9;&#9;table.remove(TB.items,i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;current=nil,

&#9;items={},
};

</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX469">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Transparency_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Transparency()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;FunctionData.Transparency.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;transparency&quot;);
&#9;&#9;FunctionData.Transparency.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Transparency;
&#9;&#9;&#9;if FunctionData.Transparency.Relative then
&#9;&#9;&#9;&#9;v.Transparency=math.min(1, math.max(0, v.Transparency+FunctionData.Transparency.Value));
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;v.Transparency=math.min(1, math.max(0, FunctionData.Transparency.Value));
&#9;&#9;&#9;end
&#9;&#9;&#9;after[i]=v.Transparency;
&#9;&#9;end
&#9;&#9;pass_action=false;
&#9;&#9;for i,v in pairs(prior) do
&#9;&#9;&#9;if prior[i]~=after[i] then
&#9;&#9;&#9;&#9;pass_action=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if pass_action then
&#9;&#9;&#9;History.Action(&quot;Transparency&quot;, parts, prior, after);
&#9;&#9;end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index=0;

FunctionData.Transparency = FunctionData.Transparency or {};
FunctionData.Transparency.Relative = FunctionData.Transparency.Relative or false;
FunctionData.Transparency.Value = FunctionData.Transparency.Value or 0.5;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Transparency&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(226/255,226/255,226/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;RelativeConstant&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,16) obj43.Text=&quot;Constant&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)

obj42.Text = tostring(FunctionData.Transparency.Value);
obj40.Parent=obj1;
TB.insert(obj41, obj42);

function RefreshButtons()
obj43.Text = FunctionData.Transparency.Relative and &quot;Relative&quot; or &quot;Constant&quot;;
end

obj43.MouseButton1Down:connect(function()
FunctionData.Transparency.Relative = not FunctionData.Transparency.Relative;
RefreshButtons();
end)

RefreshButtons();

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX470">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Utilities_Script</string>
							<ProtectedString name="Source">--[[ Utilities ]]

PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Utilities()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

modes={};
for i,v in pairs(script:GetChildren()) do
if string.sub(v.Name,1,8)==&quot;Utility:&quot; and v:IsA(&quot;StringValue&quot;) then
modes[#modes+1]=v;
end
end
for i,v in pairs(script.Parent:GetChildren()) do
if string.sub(v.Name,1,8)==&quot;Utility:&quot; and v:IsA(&quot;StringValue&quot;) then
modes[#modes+1]=v;
end
end


rows=1;
width=140;
height=20;
buffer=2;
obj40=Instance.new(&quot;Frame&quot;) obj40.Name=&quot;Utilities&quot; obj40.Position=UDim2.new(0,243,1,-200)
obj40.Size=UDim2.new(0, math.ceil((#modes)/4)*(width+buffer)+buffer, 0, (#modes&gt;=4 and 4 or (#modes)%4)*(height+buffer)+buffer);
for i,v in pairs(modes) do
local obj41=Instance.new(&quot;TextButton&quot;);
obj41.Size=UDim2.new(0, 140, 0, 20);
obj41.Position=UDim2.new(0, math.floor((i-1)/rows)*(width+buffer)+buffer, 0, (i-1)%rows*(height+buffer)+buffer);
obj41.Parent=obj40;
obj41.Text=string.sub(v.Name, 9);
obj41.BackgroundColor3=Options.ButtonColor;
obj41.MouseButton1Down:connect(function()
input(&quot;Unload&quot;);
if v~=nil then
assert(loadstring(v.Value))();
end
end)
end
obj40.Parent=obj1;



end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX471">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Utility:Cutscene Maker_Script</string>
							<ProtectedString name="Source"></ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX472">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Utility:Mesh Editor_Script</string>
							<ProtectedString name="Source">--[[ Mesh Editor ]]

meshes={
{&quot;Cone&quot;, &quot;http://www.roblox.com/asset/?id=1778999&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Square Corner&quot;, &quot;http://www.roblox.com/asset/?id=11294911&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Triangular Corner&quot;, &quot;http://www.roblox.com/asset/?id=11294922&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Vegetable Hat&quot;, &quot;http://www.roblox.com/asset/?id=1091940&quot;, {{&quot;Vegetable Hat&quot;, &quot;http://www.roblox.com/asset/?id=1091942&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Potted Plant&quot;, &quot;http://www.roblox.com/asset/?id=25920418&quot;, {{&quot;Green Plant&quot;, &quot;http://www.roblox.com/asset/?id=25920406&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bush&quot;, &quot;http://www.roblox.com/asset/?id=16659363&quot;, {{&quot;Bush&quot;, &quot;http://www.roblox.com/asset/?id=16659355&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Tree&quot;, &quot;rbxasset://fonts\\tree.mesh&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Coil&quot;, &quot;http://www.roblox.com/asset/?id=16606212&quot;, {{&quot;Gravity Coil&quot;, &quot;http://www.roblox.com/asset/?id=16606141&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Vine Mesh&quot;, &quot;http://www.roblox.com/asset/?id=13108500&quot;, {{&quot;Vine&quot;, &quot;http://www.roblox.com/asset/?id=17585271&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Sapling&quot;, &quot;http://www.roblox.com/asset/?id=1090398&quot;, {{&quot;Sapling&quot;, &quot;http://www.roblox.com/asset/?id=1090399&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Cloud&quot;, &quot;http://www.roblox.com/asset/?id=1095708&quot;, {{&quot;Cloud&quot;, &quot;http://www.roblox.com/asset/?id=1095709&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Rock&quot;, &quot;http://www.roblox.com/asset/?id=1290033&quot;, {{&quot;Rock&quot;, &quot;http://www.roblox.com/asset/?id=1290030&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Igloo&quot;, &quot;http://www.roblox.com/asset/?id=41748257&quot;, {{&quot;Igloo&quot;, &quot;http://www.roblox.com/asset/?id=41748243&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Dominus&quot;, &quot;http://www.roblox.com/asset/?id=21057410&quot;, {{&quot;White Dominus&quot;, &quot;http://www.roblox.com/asset/?id=21057378&quot;}, {&quot;Red Dominus&quot;, &quot;http://www.roblox.com/asset/?id=31100020&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Cheese&quot;, &quot;http://www.roblox.com/asset/?id=1090700&quot;, {{&quot;Cheese&quot;, &quot;http://www.roblox.com/asset/?id=1090703&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Book&quot;, &quot;http://www.roblox.com/asset/?id=1136139&quot;, {{&quot;Blank Book&quot;, &quot;http://www.roblox.com/asset/?id=9644371&quot;}, {&quot;Roblox Joke Book&quot;, &quot;http://www.roblox.com/asset/?id=10055744&quot;}, {&quot;Fish Are Friends Not Food&quot;, &quot;http://www.roblox.com/asset/?id=8798201&quot;}, {&quot;Reading Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136349&quot;}, {&quot;Geography Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1138386&quot;}, {&quot;Biology Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136350&quot;}, {&quot;Chemistry Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1139751&quot;}, {&quot;Economics Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1143109&quot;}, {&quot;Math Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1136146&quot;}, {&quot;Music Theory Textbook&quot;, &quot;http://www.roblox.com/asset/?id=1139752&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Candle&quot;, &quot;http://www.roblox.com/asset/?id=10698598&quot;, {{&quot;Candle&quot;, &quot;http://www.roblox.com/asset/?id=10698599&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Plate&quot;, &quot;http://www.roblox.com/asset/?id=1028713&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bottle&quot;, &quot;http://www.roblox.com/asset/?id=29690481&quot;, {{&quot;Red Epic Sauce&quot;, &quot;http://www.roblox.com/asset/?id=29690498&quot;}, {&quot;Green Epic Sauce&quot;, &quot;http://www.roblox.com/asset/?id=38161930&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Ring&quot;, &quot;http://www.roblox.com/asset/?id=3270017&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Diamond&quot;, &quot;http://www.roblox.com/asset/?id=9756362&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Bullet&quot;, &quot;http://www.roblox.com/asset/?id=10207677 &quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Sword&quot;, &quot;rbxasset://fonts/sword.mesh&quot;, {{&quot;Default Sword&quot;, &quot;rbxasset://textures/SwordTexture.png&quot;}, {&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Stack of Disks&quot;, &quot;http://www.roblox.com/asset/?id=15720044&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
{&quot;Custom&quot;, &quot;&quot;, {{&quot;Blank&quot;, &quot;&quot;}, {&quot;White&quot;, &quot;http://www.roblox.com/asset/?id=43391269&quot;},{&quot;Custom&quot;, &quot;&quot;}}},
};
meta={
__index=function(t, i)
while i&gt;#t do
i=i-#t;
end
while i&lt;1 do
i=i+#t;
end
return t[i];
end};
setmetatable(meshes, meta);
for i,v in pairs(meshes) do
setmetatable(v[3], meta);
end


obj40=Instance.new(&quot;Frame&quot;) obj40.Position=UDim2.new(0,253,1,-200) obj40.Size=UDim2.new(0,94,0,92)
obj41=Instance.new(&quot;TextButton&quot;) obj41.Name=&quot;Insert&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,90,0,16) obj41.Text=&quot;Insert Mesh&quot; obj41.FontSize=Enum.FontSize.Size9
obj42=Instance.new(&quot;TextButton&quot;) obj42.Name=&quot;Remove&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,20) obj42.Size=UDim2.new(0,90,0,16) obj42.Text=&quot;Remove Mesh&quot; obj42.FontSize=Enum.FontSize.Size9
obj43=Instance.new(&quot;TextButton&quot;) obj43.Name=&quot;Resize&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,38) obj43.Size=UDim2.new(0,90,0,16) obj43.Text=&quot;Scale Mesh&quot; obj43.FontSize=Enum.FontSize.Size9
obj44=Instance.new(&quot;TextButton&quot;) obj44.Name=&quot;Texture&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,56) obj44.Size=UDim2.new(0,90,0,16) obj44.Text=&quot;Texture&quot; obj44.FontSize=Enum.FontSize.Size9
obj45=Instance.new(&quot;TextButton&quot;) obj45.Name=&quot;VertexColor&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,74) obj45.Size=UDim2.new(0,90,0,16) obj45.Text=&quot;VertexColor&quot; obj45.FontSize=Enum.FontSize.Size9
obj40.Parent=obj1;

obj40.BackgroundColor3=Options.MainColor;
obj41.BackgroundColor3=Options.ButtonColor;
obj42.BackgroundColor3=Options.ButtonColor;
obj43.BackgroundColor3=Options.ButtonColor;
obj44.BackgroundColor3=Options.ButtonColor;
obj45.BackgroundColor3=Options.ButtonColor;

function Active(p)
&#9;c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40:remove();
&#9;&#9;if obj46~=nil then obj46.Parent=nil; end
&#9;&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;&#9;TB.remove(obj48);
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

--Adjust VertexColor
obj45.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
vertexColor=nil;
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil and v.Mesh:IsA(&quot;SpecialMesh&quot;) then
vertexColor=v.Mesh.VertexColor;
end
end
if vertexColor~=nil then
obj46=Instance.new(&quot;Frame&quot;) obj46.Name=&quot;VertexColorAdjuster&quot; obj46.Position=UDim2.new(0,350,1,-200) obj46.Size=UDim2.new(0,100,0,35)
obj47=Instance.new(&quot;TextLabel&quot;) obj47.Active=false obj47.BackgroundTransparency=1 obj47.Name=&quot;Label&quot; obj47.Parent=obj46 obj47.Position=UDim2.new(0,0,0,0) obj47.Size=UDim2.new(1,0,0,12) obj47.Text=&quot;Input VertexColor&quot; obj47.FontSize=Enum.FontSize.Size9
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;Button&quot; obj48.Parent=obj46 obj48.Position=UDim2.new(0,2,0,15) obj48.Size=UDim2.new(1,-4,0,18) obj48.Text=&quot;&quot; obj48.FontSize=Enum.FontSize.Size9 obj48.ZIndex=1;
obj49=Instance.new(&quot;TextBox&quot;) obj49.Name=&quot;TextBox&quot; obj49.Parent=obj46 obj49.Position=UDim2.new(0,2,0,15) obj49.Size=UDim2.new(1,-4,0,18) obj49.Text=&quot;&quot; obj49.ZIndex=2 obj49.FontSize=Enum.FontSize.Size9; obj49.Visible=false;
obj46.BackgroundColor3=Options.MainColor;
obj48.BackgroundColor3=Options.ButtonColor;
obj49.BackgroundColor3=Options.ButtonColor;
OriginalText=tostring(vertexColor*255);
obj48.Text=OriginalText;
obj49.Text=OriginalText;
TB.insert(obj49, obj48);
obj46.Parent=obj1;
local container=obj46;
obj48.Changed:connect(function()
if obj48.Text~=OriginalText then
entry=obj48.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
vertexColor=Vector3.new(x/255,y/255,z/255);
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
v.Mesh.VertexColor=vertexColor;
end
end
end
end
container.Parent=nil;
end
end)
end
end)

--Adjust texture
obj44.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
&#9;mesh=&quot;&quot;;
&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;if v:findFirstChild(&quot;Mesh&quot;) and v.Mesh:IsA(&quot;SpecialMesh&quot;) and v.Mesh.MeshType==Enum.MeshType.FileMesh then
&#9;&#9;&#9;mesh=v.Mesh.MeshId;
&#9;&#9;end
&#9;end
&#9;if mesh~=&quot;&quot; then
&#9;&#9;ind=0;
&#9;&#9;for i,v in pairs(meshes) do
&#9;&#9;&#9;if v[2]==mesh then
&#9;&#9;&#9;&#9;ind=i;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if ind==0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55=Instance.new(&quot;Frame&quot;) obj55.Name=&quot;CustomTexture&quot; obj55.Position=UDim2.new(0,obj40.AbsolutePosition.x+obj40.AbsoluteSize.x+5,0,-200) obj55.Size=UDim2.new(0,124,0,76); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;TextLabel&quot;) obj56.Active=false obj56.Name=&quot;Label&quot; obj56.Parent=obj55 obj56.Position=UDim2.new(0.5,0,0,6) obj56.Size=UDim2.new(0,0,0,0) obj56.Text=&quot;Custom Texture&quot; obj56.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextBox&quot;) obj57.Name=&quot;InputBox&quot; obj57.Parent=obj55 obj57.Position=UDim2.new(0,2,0,14) obj57.Size=UDim2.new(1,-4,0,16) obj57.Text=&quot;&lt;Texture URL&gt;&quot; obj57.FontSize=Enum.FontSize.Size9; obj57.ZIndex=2; obj57.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MaskButton&quot; obj58.Parent=obj55 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextLabel&quot;) obj59.Active=false obj59.BackgroundTransparency=1 obj59.Name=&quot;Description&quot; obj59.Parent=obj55 obj59.Position=UDim2.new(0,2,0,32) obj59.Size=UDim2.new(1,-4,0,42) obj59.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj59.TextWrap=true obj59.TextYAlignment=Enum.TextYAlignment.Top obj59.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj57, obj58);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj58.Text or &quot; &quot;)==nil and obj58.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj58.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;obj46=Instance.new(&quot;Frame&quot;); obj46.Size=UDim2.new(0, 124, 0, 18*8+2); obj46.Position=UDim2.new(0, 352, 0, -200); obj46.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;index=0;
&#9;&#9;&#9;for i=1,8 do
&#9;&#9;&#9;&#9;if i==1 or i==8 then
&#9;&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;&#9;button.Text=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;&#9;button.Name=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;button.Parent=obj46;
&#9;&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;index=index+(button.Name==&quot;Previous&quot; and -1 or 1);
&#9;&#9;&#9;&#9;&#9;&#9;for v=1,6 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;text=obj46:findFirstChild(tostring(v));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;text.Text=meshes[ind][index+v];
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;&#9;button.Text=meshes[ind][3][i+index-1][1];
&#9;&#9;&#9;&#9;&#9;button.Name=i-1;
&#9;&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;button.Parent=obj46;
&#9;&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;if meshes[ind][3][index+tonumber(button.Name)][1]==&quot;Custom&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55=Instance.new(&quot;Frame&quot;) obj55.Name=&quot;CustomTexture&quot; obj55.Position=UDim2.new(0,obj46.AbsolutePosition.x+obj46.AbsoluteSize.x+5,0,-200) obj55.Size=UDim2.new(0,124,0,76); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;TextLabel&quot;) obj56.Active=false obj56.Name=&quot;Label&quot; obj56.Parent=obj55 obj56.Position=UDim2.new(0.5,0,0,6) obj56.Size=UDim2.new(0,0,0,0) obj56.Text=&quot;Custom Texture&quot; obj56.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextBox&quot;) obj57.Name=&quot;InputBox&quot; obj57.Parent=obj55 obj57.Position=UDim2.new(0,2,0,14) obj57.Size=UDim2.new(1,-4,0,16) obj57.Text=&quot;&lt;Texture URL&gt;&quot; obj57.FontSize=Enum.FontSize.Size9; obj57.ZIndex=2; obj57.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MaskButton&quot; obj58.Parent=obj55 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextLabel&quot;) obj59.Active=false obj59.BackgroundTransparency=1 obj59.Name=&quot;Description&quot; obj59.Parent=obj55 obj59.Position=UDim2.new(0,2,0,32) obj59.Size=UDim2.new(1,-4,0,42) obj59.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj59.TextWrap=true obj59.TextYAlignment=Enum.TextYAlignment.Top obj59.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj57, obj58);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj58.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj58.Text or &quot; &quot;)==nil and obj58.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj58.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=obj1;
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=meshes[ind][3][index+tonumber(button.Name)][2];
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;obj46.Parent=obj1;
&#9;&#9;end
&#9;end
end)

--Rescale
obj43.MouseButton1Down:connect(function()
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
scale=nil;
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
scale=v.Mesh.Scale;
end
end
if scale~=nil then
obj46=Instance.new(&quot;Frame&quot;) obj46.Name=&quot;ScaleAdjuster&quot; obj46.Position=UDim2.new(0,350,1,-200) obj46.Size=UDim2.new(0,100,0,35)
obj47=Instance.new(&quot;TextLabel&quot;) obj47.Active=false obj47.BackgroundTransparency=1 obj47.Name=&quot;Label&quot; obj47.Parent=obj46 obj47.Position=UDim2.new(0,0,0,0) obj47.Size=UDim2.new(1,0,0,12) obj47.Text=&quot;Input New Scale&quot; obj47.FontSize=Enum.FontSize.Size9
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;Button&quot; obj48.Parent=obj46 obj48.Position=UDim2.new(0,2,0,15) obj48.Size=UDim2.new(1,-4,0,18) obj48.Text=&quot;Type Scale Here&quot; obj48.FontSize=Enum.FontSize.Size9
obj49=Instance.new(&quot;TextBox&quot;) obj49.Name=&quot;TextBox&quot; obj49.Parent=obj46 obj49.Position=UDim2.new(0,2,0,15) obj49.Size=UDim2.new(1,-4,0,18) obj49.Text=&quot;Scale&quot; obj49.ZIndex=2 obj49.FontSize=Enum.FontSize.Size9
obj46.BackgroundColor3=Options.MainColor;
obj48.BackgroundColor3=Options.ButtonColor;
obj49.BackgroundColor3=Options.ButtonColor;
OriginalText=tostring(scale);
obj49.Text=OriginalText;
TB.insert(obj49, obj48);
obj46.Parent=obj1;
local container=obj46;
obj48.Changed:connect(function()
if obj48.Text~=OriginalText then
entry=obj48.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
scale=Vector3.new(x,y,z);
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
if v:findFirstChild(&quot;Mesh&quot;)~=nil then
v.Mesh.Scale=scale;
end
end
end
end
container.Parent=nil;
end
end)

end
end)

--Remove Hit
obj42.MouseButton1Down:connect(function()
--clear out old guis;
if obj46~=nil then obj46.Parent=nil; end
if obj55~=nil then obj55.Parent=nil; end
for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
for _,a in pairs(v:GetChildren()) do
if a:IsA(&quot;DataModelMesh&quot;) then
a:remove();
end
end
end
end)

--Insert Hit
obj41.MouseButton1Down:connect(function()
&#9;if obj46~=nil then obj46.Parent=nil; end
&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;obj46=Instance.new(&quot;Frame&quot;); obj46.Name=&quot;InsertChange&quot;; obj46.Position=UDim2.new(0,352,0,-200); obj46.Size=UDim2.new(0,100,0,146);
&#9;obj47=Instance.new(&quot;TextButton&quot;); obj47.Name=&quot;BlockMesh&quot;; obj47.Parent=obj46; obj47.Position=UDim2.new(0,2,0,2); obj47.Size=UDim2.new(1,-4,0,16); obj47.Text=&quot;Block Mesh&quot;; obj47.FontSize=Enum.FontSize.Size9;
&#9;obj48=Instance.new(&quot;TextButton&quot;); obj48.Name=&quot;CylinderMesh&quot;; obj48.Parent=obj46; obj48.Position=UDim2.new(0,2,0,20); obj48.Size=UDim2.new(1,-4,0,16); obj48.Text=&quot;Cylinder Mesh&quot;; obj48.FontSize=Enum.FontSize.Size9;
&#9;obj49=Instance.new(&quot;TextButton&quot;); obj49.Name=&quot;SphereMesh&quot;; obj49.Parent=obj46; obj49.Position=UDim2.new(0,2,0,38); obj49.Size=UDim2.new(1,-4,0,16); obj49.Text=&quot;Sphere Mesh&quot;; obj49.FontSize=Enum.FontSize.Size9;
&#9;obj50=Instance.new(&quot;TextButton&quot;); obj50.Name=&quot;BrickMesh&quot;; obj50.Parent=obj46; obj50.Position=UDim2.new(0,2,0,56); obj50.Size=UDim2.new(1,-4,0,16); obj50.Text=&quot;Brick Mesh&quot;; obj50.FontSize=Enum.FontSize.Size9;
&#9;obj51=Instance.new(&quot;TextButton&quot;); obj51.Name=&quot;HeadMesh&quot;; obj51.Parent=obj46; obj51.Position=UDim2.new(0,2,0,74); obj51.Size=UDim2.new(1,-4,0,16); obj51.Text=&quot;Head Mesh&quot;; obj51.FontSize=Enum.FontSize.Size9;
&#9;obj52=Instance.new(&quot;TextButton&quot;); obj52.Name=&quot;TorsoMesh&quot;; obj52.Parent=obj46; obj52.Position=UDim2.new(0,2,0,92); obj52.Size=UDim2.new(1,-4,0,16); obj52.Text=&quot;Torso Mesh&quot;; obj52.FontSize=Enum.FontSize.Size9;
&#9;obj53=Instance.new(&quot;TextButton&quot;); obj53.Name=&quot;WedgeMesh&quot;; obj53.Parent=obj46; obj53.Position=UDim2.new(0,2,0,110); obj53.Size=UDim2.new(1,-4,0,16); obj53.Text=&quot;Wedge Mesh&quot;; obj53.FontSize=Enum.FontSize.Size9;
&#9;obj54=Instance.new(&quot;TextButton&quot;); obj54.Name=&quot;FileMesh&quot;; obj54.Parent=obj46; obj54.Position=UDim2.new(0,2,0,128); obj54.Size=UDim2.new(1,-4,0,16); obj54.Text=&quot;File Mesh&quot;; obj54.FontSize=Enum.FontSize.Size9;
&#9;obj46.BackgroundColor3=Options.MainColor;
&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;obj48.BackgroundColor3=Options.ButtonColor;
&#9;obj49.BackgroundColor3=Options.ButtonColor;
&#9;obj50.BackgroundColor3=Options.ButtonColor;
&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;obj54.BackgroundColor3=Options.ButtonColor;
&#9;obj46.Parent=obj1;
&#9;obj47.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;BlockMesh&quot;, v); m.Scale=scale; end obj46.Parent=nil; end)
&#9;obj48.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;CylinderMesh&quot;, v); m.Scale=scale; end obj46.Parent=nil; end)
&#9;obj49.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Sphere; end obj46.Parent=nil; end)
&#9;obj50.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Brick; end obj46.Parent=nil; end)
&#9;obj51.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Head; end obj46.Parent=nil; end)
&#9;obj52.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Torso; end obj46.Parent=nil; end)
&#9;obj53.MouseButton1Down:connect(function() for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do local m=v:findFirstChild(&quot;Mesh&quot;); local scale=Vector3.new(1,1,1); if m~=nil then scale=m.Scale; m:remove(); end m=Instance.new(&quot;SpecialMesh&quot;, v); m.Scale=scale; m.MeshType=Enum.MeshType.Wedge; end obj46.Parent=nil; end)
&#9;obj54.MouseButton1Down:connect(function()
&#9;&#9;if obj55~=nil then obj55.Parent=nil; end
&#9;&#9;obj55=Instance.new(&quot;Frame&quot;); obj55.Size=UDim2.new(0, 124, 0, 18*8+2); obj55.Position=UDim2.new(0, 457, 0, -200); obj55.BackgroundColor3=Options.MainColor;
&#9;&#9;index=0;
&#9;&#9;for i=1,8 do
&#9;&#9;&#9;if i==1 or i==8 then
&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;button.Text=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;button.Name=(i==1 and &quot;Previous&quot; or &quot;Next&quot;);
&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;button.Parent=obj55;
&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;index=index+(button.Name==&quot;Previous&quot; and -1 or 1);
&#9;&#9;&#9;&#9;for v=1,6 do
&#9;&#9;&#9;&#9;text=obj55:findFirstChild(tostring(v));
&#9;&#9;&#9;&#9;text.Text=meshes[v+index][1];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;&#9;button.Text=meshes[i+index-1][1];
&#9;&#9;&#9;&#9;button.Name=i-1;
&#9;&#9;&#9;&#9;button.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;button.Size=UDim2.new(1, -4, 0, 16);
&#9;&#9;&#9;&#9;button.Position=UDim2.new(0, 2, 0, 2+18*(i-1));
&#9;&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;button.Parent=obj55;
&#9;&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;if meshes[index+tonumber(button.Name)][1]==&quot;Custom&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;if obj56~=nil then obj56.Parent=nil; end
&#9;&#9;&#9;&#9;&#9;&#9;obj56=Instance.new(&quot;Frame&quot;) obj56.Name=&quot;CustomTexture&quot; obj56.Position=UDim2.new(0,obj55.AbsolutePosition.x+obj55.AbsoluteSize.x+5,0,-200) obj56.Size=UDim2.new(0,124,0,76); obj56.BackgroundColor3=Options.MainColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj57=Instance.new(&quot;TextLabel&quot;) obj57.Active=false obj57.Name=&quot;Label&quot; obj57.Parent=obj56 obj57.Position=UDim2.new(0.5,0,0,6) obj57.Size=UDim2.new(0,0,0,0) obj57.Text=&quot;Custom Texture&quot; obj57.FontSize=Enum.FontSize.Size9;
&#9;&#9;&#9;&#9;&#9;&#9;obj58=Instance.new(&quot;TextBox&quot;) obj58.Name=&quot;InputBox&quot; obj58.Parent=obj56 obj58.Position=UDim2.new(0,2,0,14) obj58.Size=UDim2.new(1,-4,0,16) obj58.Text=&quot;&lt;Texture URL&gt;&quot; obj58.FontSize=Enum.FontSize.Size9; obj58.ZIndex=2; obj58.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj59=Instance.new(&quot;TextButton&quot;) obj59.Name=&quot;MaskButton&quot; obj59.Parent=obj56 obj59.Position=UDim2.new(0,2,0,14) obj59.Size=UDim2.new(1,-4,0,16) obj59.Text=&quot;&lt;Texture URL&gt;&quot; obj59.FontSize=Enum.FontSize.Size9; obj59.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;&#9;&#9;&#9;obj60=Instance.new(&quot;TextLabel&quot;) obj60.Active=false obj60.BackgroundTransparency=1 obj60.Name=&quot;Description&quot; obj60.Parent=obj56 obj60.Position=UDim2.new(0,2,0,32) obj60.Size=UDim2.new(1,-4,0,42) obj60.Text=&quot;Enter the URL or asset ID of the texture above.&quot; obj60.TextWrap=true obj60.TextYAlignment=Enum.TextYAlignment.Top obj60.FontSize=Enum.FontSize.Size9
&#9;&#9;&#9;&#9;&#9;&#9;TB.insert(obj58, obj59);
&#9;&#9;&#9;&#9;&#9;&#9;obj59.Changed:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if obj58.Text~=&quot;&lt;Texture URL&gt;&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil and m:IsA(&quot;SpecialMesh&quot;) and m.MeshId==mesh then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=tonumber(obj59.Text or &quot; &quot;)==nil and obj59.Text or &quot;http://www.roblox.com/asset/?id=&quot;..obj59.Text;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;obj56.Parent=obj1;
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(HasPermission(GetParts(Selection.Get()), &quot;owner_only&quot;)) do
&#9;&#9;&#9;&#9;&#9;&#9;local m=v:findFirstChild(&quot;Mesh&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;local scale=Vector3.new(1,1,1);
&#9;&#9;&#9;&#9;&#9;&#9;if m~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;scale=m.Scale; m:remove();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;m=Instance.new(&quot;SpecialMesh&quot;, v);
&#9;&#9;&#9;&#9;&#9;&#9;m.Scale=scale;
&#9;&#9;&#9;&#9;&#9;&#9;m.MeshType=Enum.MeshType.FileMesh;
&#9;&#9;&#9;&#9;&#9;&#9;m.MeshId=meshes[index+tonumber(button.Name)][2];
&#9;&#9;&#9;&#9;&#9;&#9;m.TextureId=meshes[index+tonumber(button.Name)][3][1][2];
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;obj46.Parent=nil;
&#9;&#9;&#9;&#9;&#9;&#9;obj55.Parent=nil;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;obj55.Parent=obj1;
&#9;end)
end)
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX473">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Utility:Music Composer_Script</string>
							<ProtectedString name="Source">--[[ Musical Composer Kit ]]

--[[ Note that this isn&apos;t complete. You can use it, just don&apos;t expect everything to work ]]

AllNotes={}; --default sound sequence

NoteLength=1;
Snap=1;
Volume=8;
Tempo=60;

obj54=Instance.new(&quot;ScreenGui&quot;);

round=function(number,multiple)
return math.floor(number/multiple+.5)*multiple
end

CurrentMusicMode=&quot;Place&quot;;

obj40=Instance.new(&quot;TextButton&quot;); obj40.Position=UDim2.new(0,10,0.5,-150); obj40.Size=UDim2.new(1,-20,0,300); obj40.Text=&quot;&quot;; obj40.AutoButtonColor=false;
obj41=Instance.new(&quot;Frame&quot;); obj41.BackgroundTransparency=1; obj41.Name=&quot;CurrentStream&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,0,0,60); obj41.Size=UDim2.new(1,0,0,160);
obj42=Instance.new(&quot;Frame&quot;); obj42.Name=&quot;CurrentBass&quot;; obj42.Parent=obj41; obj42.Position=UDim2.new(0,5,0.57142859697342,0); obj42.Size=UDim2.new(1,-10,0.28571429848671,0);
obj43=Instance.new(&quot;Frame&quot;); obj43.Name=&quot;D_Line&quot;; obj43.Parent=obj42; obj43.Position=UDim2.new(0,0,0.5,0); obj43.Size=UDim2.new(1,0,0,0);
obj44=Instance.new(&quot;Frame&quot;); obj44.Name=&quot;F_Line&quot;; obj44.Parent=obj42; obj44.Position=UDim2.new(0,0,0.25,0); obj44.Size=UDim2.new(1,0,0,0);
obj45=Instance.new(&quot;Frame&quot;); obj45.Name=&quot;B_Line&quot;; obj45.Parent=obj42; obj45.Position=UDim2.new(0,0,0.75,0); obj45.Size=UDim2.new(1,0,0,0);
--obj46=Instance.new(&quot;ImageLabel&quot;); obj46.BackgroundTransparency=1; obj46.Image=&quot;http://www.roblox.com/asset/?id=43646119&quot;; obj46.Name=&quot;Clef&quot;; obj46.Parent=obj42; obj46.Position=UDim2.new(0,3,0,-17); obj46.Size=UDim2.new(0,34,0,82);
obj47=Instance.new(&quot;Frame&quot;); obj47.Name=&quot;CurrentTreble&quot;; obj47.Parent=obj41; obj47.Position=UDim2.new(0,5,0.14285714924335,0); obj47.Size=UDim2.new(1,-10,0.28571429848671,0);
obj48=Instance.new(&quot;Frame&quot;); obj48.Name=&quot;D_Line&quot;; obj48.Parent=obj47; obj48.Position=UDim2.new(0,0,0.25,0); obj48.Size=UDim2.new(1,0,0,0);
obj49=Instance.new(&quot;Frame&quot;); obj49.Name=&quot;B_Line&quot;; obj49.Parent=obj47; obj49.Position=UDim2.new(0,0,0.5,0); obj49.Size=UDim2.new(1,0,0,0);
obj50=Instance.new(&quot;Frame&quot;); obj50.Name=&quot;G_Line&quot;; obj50.Parent=obj47; obj50.Position=UDim2.new(0,0,0.75,0); obj50.Size=UDim2.new(1,0,0,0);
--obj51=Instance.new(&quot;ImageLabel&quot;); obj51.BackgroundTransparency=1; obj51.Image=&quot;http://www.roblox.com/asset/?id=43646107&quot;; obj51.Name=&quot;Clef&quot;; obj51.Parent=obj47; obj51.Position=UDim2.new(0,0,0,-20); obj51.Size=UDim2.new(0,34,0,82);
obj52=Instance.new(&quot;TextButton&quot;); obj52.Name=&quot;Rename&quot;; obj52.Parent=obj41; obj52.Position=UDim2.new(0,5,0,-8); obj52.Size=UDim2.new(0,8,0,8); obj52.Text=&quot;.     Button&quot;; obj52.TextXAlignment=Enum.TextXAlignment.Left;
obj53=Instance.new(&quot;TextLabel&quot;); obj53.Active=false; obj53.BackgroundTransparency=1; obj53.Parent=obj40; obj53.Position=UDim2.new(0,5,0,5); obj53.Size=UDim2.new(1,-10,0,20); obj53.Text=&quot;Music Composer, v1.0&quot;; obj53.FontSize=Enum.FontSize.Size10;
obj40.BackgroundColor3=Options.MainColor;
obj42.BackgroundColor3=Color3.new(1,1,1);
obj47.BackgroundColor3=Color3.new(1,1,1);
obj52.BackgroundColor3=Options.ButtonColor;
buttons={
{{Name=&quot;Note&quot;, BarLength=.4, Refresh=function(button) button.Text=&quot;Current Note Length: &quot; .. tostring(NoteLength); end,},
{Name=&quot;Snap&quot;, BarLength=.2, Refresh=function(button) button.Text=&quot;Snap to: &quot; .. tostring(Snap); end,},
{Name=&quot;Volume&quot;,BarLength=.2, Refresh=function(button) button.Text=&quot;Volume: &quot; .. tostring(Volume); end,},
{Name=&quot;Tempo&quot;, BarLength=.2, Refresh=function(button) button.Text=&quot;Tempo: &quot; .. tostring(Tempo); end,},},
{{Name=&quot;Raise note&quot;,BarLength=.3,Refresh=function(button) button.Text=&quot;Raise Pitch (1 octave)&quot;; end},
{Name=&quot;Lower note&quot;,BarLength=.3,Refresh=function(button) button.Text=&quot;Lower Pitch (1 octave)&quot;; end},
{Name=&quot;Sharp&quot;,BarLength=.2,Refresh=function(button) button.Text=&quot;Sharp&quot;; end},
{Name=&quot;Flat&quot;,BarLength=.2,Refresh=function(button) button.Text=&quot;Flat&quot;; end},},
{{Name=&quot;NewStream&quot;, BarLength=0.217391304,Refresh=function(button) button.Text=&quot;New Stream&quot;; end,},
{Name=&quot;Previous Stream&quot;,BarLength=0.260869565,Refresh=function(button) button.Text=&quot;Previous Stream&quot;; end,},
{Name=&quot;Next Stream&quot;,BarLength=0.260869565,Refresh=function(button) button.Text=&quot;Next Stream&quot;; end,},
{Name=&quot;Backward&quot;,BarLength=0.130434783,Refresh=function(button) button.Text=&quot;&lt;&quot;; end,},
{Name=&quot;Forward&quot;,BarLength=0.130434783,Refresh=function(button) button.Text=&quot;&gt;&quot;; end,},},
{{Name=&quot;Place&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Place&quot;; end,},
{Name=&quot;Move&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Move&quot;; end,},
{Name=&quot;Delete&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Delete&quot;; end,},
{Name=&quot;Clone&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Clone&quot;; end,},
{Name=&quot;Play&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Play&quot;; end,},
{Name=&quot;Print&quot;, BarLength=0.166666667,Refresh=function(button) button.Text=&quot;Print&quot;; end,},}}

buttons[4][6].Click=function(button)
Streams[ActiveStream]=AllNotes;
main_tab={};

--consolidate all notes into one table, and organize them by time they get played.
for _,CurrentStream in pairs(Streams) do
for _,v in pairs(CurrentStream) do
local index=1;
for i=1,#main_tab do
if main_tab[i][2]&lt;=v[2] then
index=i+1;
end
end
table.insert(main_tab, index, v);
end

end

string=&quot;SONG={&quot;;
for i,v in pairs(main_tab) do
string = string .. [[{&quot;]]..v[1]..[[&quot;, ]]..tostring(v[2])..&quot;, &quot;..tostring(v[3])..[[, &quot;]]..v[4]..[[&quot;},]]
end
string=string..&quot;};&quot;;
script.ErrorMsg.Text.Value=string;
s=script.ErrorMsg:clone(); s.Disabled=false; s.Parent=player.Backpack;
end;
buttons[4][5].Click=function(button)



end;
buttons[4][4].Click=function(button)
Streams.Untitled1={};
button.Text=&quot;Done!&quot;;
Delay(1, function() buttons[4][3].Refresh(button); end)
end;
buttons[4][4].Click=function(button)
CurrentMusicMode=&quot;Clone&quot;;
end;
buttons[4][3].Click=function(button)
CurrentMusicMode=&quot;Delete&quot;;
end;
buttons[4][2].Click=function(button)
CurrentMusicMode=&quot;Move&quot;;
end;
buttons[4][1].Click=function(button)
CurrentMusicMode=&quot;Place&quot;;
end;
buttons[3][1].Click=function(button)
--new stream
Streams[ActiveStream]=AllNotes; --save the current stream
i=1;
while Streams[&quot;Untitled&quot;..i]~=nil do
i=i+1;
end
AllNotes={};
Streams[&quot;Untitled&quot;..tostring(i)]={};
ActiveStream=&quot;Untitled&quot;..tostring(i);
RefreshStaff();
end;
buttons[3][2].Click=function(button)
&#9;Streams[ActiveStream]=AllNotes;
&#9;OriginalStream=ActiveStream;
&#9;PreviousIndex=nil;
&#9;for i,v in pairs(Streams) do
&#9;&#9;if i==OriginalStream and PreviousIndex~=nil then
&#9;&#9;&#9;ActiveStream=PreviousIndex;
&#9;&#9;end
&#9;&#9;PreviousIndex=i;
&#9;end
&#9;if ActiveStream==OriginalStream then
&#9;&#9;ActiveStream=PreviousStream;
&#9;end
&#9;AllNotes=Streams[ActiveStream];
&#9;RefreshStaff()
end;
buttons[3][3].Click=function(button)
&#9;Streams[ActiveStream]=AllNotes;
&#9;OriginalStream=ActiveStream;
&#9;PrepStreamSet=false;
&#9;for i,v in pairs(Streams) do
&#9;&#9;if PrepStreamSet then
&#9;&#9;&#9;ActiveStream=i;
&#9;&#9;&#9;PrepStreamSet=false;
&#9;&#9;end
&#9;&#9;if i==OriginalStream then
&#9;&#9;&#9;ActiveStream=PreviousIndex;
&#9;&#9;&#9;PrepStreamSet=true;
&#9;&#9;end
&#9;end
&#9;if PrepStreamSet then
&#9;&#9;for i,v in pairs(Streams) do
&#9;&#9;&#9;if PrepStreamSet then
&#9;&#9;&#9;&#9;ActiveStream=i;
&#9;&#9;&#9;&#9;PrepStreamSet=false;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;AllNotes=Streams[ActiveStream];
&#9;RefreshStaff()
end;
buttons[3][4].Click=function(button)
&#9;PositionIndex=PositionIndex-2;
&#9;RefreshStaff();
end;
buttons[3][5].Click=function(button)
&#9;PositionIndex=PositionIndex+2;
&#9;RefreshStaff();
end;
buttons[2][1].Click=function(button)
CurrentMusicMode=&quot;Raise&quot;;
end;
buttons[2][2].Click=function(button)
CurrentMusicMode=&quot;Lower&quot;;
end;
buttons[2][3].Click=function(button)
CurrentMusicMode=&quot;Sharp&quot;;
end;
buttons[2][4].Click=function(button)
CurrentMusicMode=&quot;Flat&quot;;
end;
buttons[1][1].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new note length.&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
NoteLength=tostring(obj55.Text) or 1;
buttons[1][1].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][2].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter increment to snap notes to.&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Snap=tostring(obj55.Text) or 1;
buttons[1][2].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][3].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new volume (value from 0 to 11).&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Volume=math.min(11, math.max(0, tonumber(obj55.Text) or 8));
buttons[1][3].Refresh(button);
obj54.Parent=nil;
end)
end;
buttons[1][4].Click=function(button)
obj54.Parent=nil;
obj54=Instance.new(&quot;Frame&quot;); obj54.Size=UDim2.new(0, 120, 0, 80); obj54.Position=UDim2.new(.5, -60, .5, -40); obj54.BackgroundColor3=Options.MainColor;
obj55=Instance.new(&quot;TextBox&quot;); obj55.Name=&quot;Entry&quot;; obj55.Size=UDim2.new(1, -4, 0, 16); obj55.BackgroundColor3=Options.ButtonColor; obj55.Position=UDim2.new(0, 2, 0, 2); obj55.Parent=obj54;
obj56=Instance.new(&quot;TextButton&quot;); obj56.Name=&quot;Enter&quot;; obj56.Size=UDim2.new(1, -4, 0, 14); obj56.BackgroundColor3=Options.ButtonColor; obj56.Position=UDim2.new(0, 2, 0, 20); obj56.Parent=obj54; obj56.Text=&quot;Submit&quot;;
obj57=Instance.new(&quot;TextLabel&quot;); obj57.Name=&quot;Label&quot;; obj57.Parent=obj54; obj57.Size=UDim2.new(1, -4, 0, 40); obj57.BackgroundTransparency=1; obj57.Position=UDim2.new(0, 2, 1, -38); obj57.TextWrap=true;
obj57.Text=&quot;Enter new tempo (any value greater than 0).&quot;;
obj54.Parent=gui;
obj56.MouseButton1Down:connect(function()
Tempo=(tonumber(obj55.Text) or 60)&lt;=0 and 60 or (tonumber(obj55.Text) or 60);
buttons[1][4].Refresh(button);
obj54.Parent=nil;
end)
end;


top=24;
for x=1,#buttons do
Across=0;
for y=1,#buttons[x] do
local button=Instance.new(&quot;TextButton&quot;);
button.Name=buttons[x][y].Name;
button.Position=UDim2.new(Across, 2, 0, top+(x-1)*18);
button.Size=UDim2.new(buttons[x][y].BarLength, y==#buttons[x] and -4 or -2, 0, 16);
Across=Across+buttons[x][y].BarLength;
buttons[x][y].Refresh(button);
button.BackgroundColor3=Options.ButtonColor;
button.Parent=obj40;
button.MouseButton1Down:connect(function()
buttons[x][y].Click(button);
end)
end
end
DescriptionLabel=Instance.new(&quot;TextLabel&quot;); DescriptionLabel.Size=UDim2.new(1, -4, 0, 16); DescriptionLabel.Position=UDim2.new(0, 2, 0, #buttons*18+top); DescriptionLabel.BackgroundColor3=Options.ButtonColor; DescriptionLabel.Parent=obj40;
obj41.Position=UDim2.new(0, 0, 0, #buttons*18+top+14+16);
obj40.Parent=gui;

function Active(p)
&#9;c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40:remove();
&#9;&#9;obj54.Parent=nil;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

player.Chatted:connect(function(msg)
&#9;if string.sub(msg:lower(), 1, 10)==&quot;load song/&quot; or string.sub(msg:lower(), 1, 9)==&quot;loadsong/&quot; or string.sub(msg:lower(), 1, 10)==&quot;load song?&quot; or string.sub(msg:lower(), 1, 9)==&quot;loadsong?&quot; then
&#9;&#9;string=string.sub(msg, math.min(string.find(msg, &quot;/&quot;), string.find(msg, &quot;?&quot;))+1);
&#9;&#9;--parse &apos;string&apos; to load the song.
&#9;end
end)

Streams={Main={}};
ActiveStream=&quot;Main&quot;;
Frames={};

DisplayMode=&quot;Bars&quot;;
PositionIndex=0;
Scale=25; --100 pixels per measure.
Frames={};
RefreshStaff=function()
&#9;obj52.Text=&quot;.    &quot;..ActiveStream;
&#9;for i,v in pairs(Frames) do v.Parent=nil; end
&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;if DisplayMode==&quot;Bars&quot; then
&#9;&#9;for i,v in pairs(AllNotes) do
&#9;&#9;&#9;if v[2]+v[3]&gt;PositionIndex and v[2]&lt;HighPos then
&#9;&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*v[3], (HighPos-v[2])*Scale), 1/14, 0);
&#9;&#9;&#9;&#9;f.Position=UDim2.new(0,math.max(0, (v[2]-PositionIndex))*Scale+5, 4/14-LetterToNumber(v[1], v[4])*1/28,0);
&#9;&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;&#9;f.Parent=obj41;
&#9;&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end;

function LetterToNumber(letter, config)
letter, up_scale = string.gsub(letter, &quot;%+&quot;, &quot;&quot;);
void, up2 = string.gsub(config, &quot;%+&quot;, &quot;&quot;);
up_scale=up_scale+up2;
letter, down_scale = string.gsub(letter, &quot;%-&quot;, &quot;&quot;);
void, down2 = string.gsub(config, &quot;%-&quot;, &quot;&quot;);
down_scale=down_scale+down2;
letter=string.gsub(letter, &quot;%#&quot;, &quot;&quot;);
letter=string.gsub(letter, &quot;b&quot;, &quot;&quot;);
base=0+up_scale*7-down_scale*7;
if letter==&quot;A&quot; then return base; end
if letter==&quot;B&quot; then return base+1; end
if letter==&quot;C&quot; then return base+2; end
if letter==&quot;D&quot; then return base+3; end
if letter==&quot;E&quot; then return base+4; end
if letter==&quot;F&quot; then return base+5; end
if letter==&quot;G&quot; then return base+6; end
end

RefreshStaff();

CurrentNote=nil;
obj40.MouseButton1Down:connect(function(x,y)
&#9;obj54.Parent=nil;
&#9;if CurrentMusicMode==&quot;Place&quot; then
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;if y&gt;=0 and y&lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 then
&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*NoteLength, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;f.Parent=obj41;
&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;length=NoteLength;
&#9;&#9;&#9;extra_info=&quot;&quot;;
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Clone&quot; then
&#9;&#9;local x1=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y1=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;length=0;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;if y1&gt;pos and y1&lt;pos+1/14 and x1&gt;AllNotes[i][2] and x1&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;length=AllNotes[i][3];
&#9;&#9;&#9;&#9;extra_info=AllNotes[i][4];
&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;print(y, length);
&#9;&#9;if y&gt;=0 and y&lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 and length&gt;0 then
&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Move&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;length=AllNotes[i][3];
&#9;&#9;&#9;&#9;&#9;extra_info=AllNotes[i][4];
&#9;&#9;&#9;&#9;&#9;table.remove(AllNotes,i);
&#9;&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;&#9;RefreshStaff();
&#9;&#9;&#9;&#9;&#9;local HighPos=PositionIndex+obj47.AbsoluteSize.x/Scale;
&#9;&#9;&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;&#9;&#9;local f=Instance.new(&quot;Frame&quot;);
&#9;&#9;&#9;&#9;&#9;f.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;&#9;&#9;f.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;&#9;&#9;f.BackgroundColor3=Color3.new(.2,.2,.2);
&#9;&#9;&#9;&#9;&#9;CurrentNote=f;
&#9;&#9;&#9;&#9;&#9;Frames[#Frames+1]=f;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Delete&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;table.remove(AllNotes,i);
&#9;&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;RefreshStaff();
&#9;elseif CurrentMusicMode==&quot;Sharp&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;if string.find(AllNotes[i][1], &quot;b&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.gsub(AllNotes[i][1], &quot;b&quot;, &quot;&quot;); --destroy flat sign
&#9;&#9;&#9;&#9;&#9;elseif string.find(AllNotes[i][1], &quot;#&quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;#&quot;; --add sharp sign.
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Flat&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;if string.find(AllNotes[i][1], &quot;#&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.gsub(AllNotes[i][1], &quot;#&quot;, &quot;&quot;); --destroy sharp sign
&#9;&#9;&#9;&#9;&#9;elseif string.find(AllNotes[i][1], &quot;b&quot;)==nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;b&quot;; --add flat sign.
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Raise&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][1], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.sub(AllNotes[i][1], 1, f-1)..string.sub(AllNotes[i][1], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;-&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;-&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif CurrentMusicMode==&quot;Lower&quot; then
&#9;&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;&#9;for i=#AllNotes,1,-1 do
&#9;&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][1], &quot;+&quot;);
&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;--remove the plus sign, add a plus sign in extra
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=string.sub(AllNotes[i][1], 1, f-1)..string.sub(AllNotes[i][1], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- found a minus sign in extra. Remove that.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- no minus sign in extra. Add a plus sign.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;-- no plus sign in main. Add a minus sign.
&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][1]=AllNotes[i][1]..&quot;-&quot;; --add minus sign in main.
&#9;&#9;&#9;&#9;&#9;&#9;local f=string.find(AllNotes[i][4], &quot;-&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;if f~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- found a minus sign in extra. Remove that.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=string.sub(AllNotes[i][4], 1, f-1)..string.sub(AllNotes[i][4], f+1)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- no minus sign in extra. Add a plus sign.
&#9;&#9;&#9;&#9;&#9;&#9;&#9;AllNotes[i][4]=AllNotes[i][4]..&quot;+&quot;;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)
obj40.MouseButton1Up:connect(function(x,y)
&#9;if CurrentNote~=nil then
&#9;&#9;position=PositionIndex+(CurrentNote.Position.X.Offset-5)/Scale;
&#9;&#9;height=standardize(round(((0.50-CurrentNote.Position.Y.Scale-1/28)*28), 1));
&#9;&#9;AllNotes[#AllNotes+1]={toletter(height),position, length, extra_info}
&#9;end
&#9;CurrentNote=nil;
end)
obj40.MouseMoved:connect(function(x,y)
&#9;if CurrentNote~=nil then
&#9;&#9;local y=round((y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y-1/56, 1/28);
&#9;&#9;if y&gt;=0 and y &lt;=1 and x&lt;obj41.AbsolutePosition.x+obj41.AbsoluteSize.x-10 then
&#9;&#9;&#9;local x=round(x-obj41.AbsolutePosition.x-5, Snap*Scale);
&#9;&#9;&#9;CurrentNote.Size=UDim2.new(0, math.min(Scale*length, obj41.AbsoluteSize.x-x-10), 1/14, 0);
&#9;&#9;&#9;CurrentNote.Position=UDim2.new(0, x+5, y, 0);
&#9;&#9;&#9;CurrentNote.Parent=obj41;
&#9;&#9;end
&#9;end
&#9;local x=(x-obj41.AbsolutePosition.x-10)/Scale+PositionIndex;
&#9;local y=(y-obj41.AbsolutePosition.y)/obj41.AbsoluteSize.y;
&#9;local FoundNote=false;
&#9;for i=#AllNotes,1,-1 do
&#9;&#9;if x&gt;AllNotes[i][2] and x&lt;AllNotes[i][2]+AllNotes[i][3] then
&#9;&#9;&#9;local pos=4/14-LetterToNumber(AllNotes[i][1], AllNotes[i][4])*1/28;
&#9;&#9;&#9;if y&gt;pos and y&lt;pos+1/14 then
&#9;&#9;&#9;&#9;DescriptionLabel.Text=&quot;Note: &quot; .. AllNotes[i][1]..&quot; - Position: &quot; .. AllNotes[i][2] .. &quot; - Length: &quot; .. AllNotes[i][3];
&#9;&#9;&#9;&#9;i=0;
&#9;&#9;&#9;&#9;FoundNote=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;if not FoundNote then
&#9;&#9;DescriptionLabel.Text=&quot;&quot;;
&#9;end
end)

function standardize(height)
&#9;local nh=40;
&#9;while height&lt;0 do height=height+7; nh=nh-12; end
&#9;while height&gt;=7 do height=height-7; nh=nh+12; end
&#9;if height==6 then nh=nh+11; end
&#9;if height==5 then nh=nh+9; end
&#9;if height==4 then nh=nh+7; end
&#9;if height==3 then nh=nh+5; end
&#9;if height==2 then nh=nh+4; end
 &#9;if height==1 then nh=nh+2; end
&#9;return nh;
end

function toletter(num)
&#9;num=num-49;
&#9;local case=num&gt;0 and 1 or -1;
&#9;local octave_change=&quot;&quot;;
&#9;while num&lt;0 do num=num+12; octave_change=octave_change..&quot;-&quot;; end
&#9;while num&gt;=12 do num=num-12; octave_change=octave_change..&quot;+&quot;; end
&#9;if num==0 then return &quot;A&quot; .. octave_change; end
&#9;if num==1 then return &quot;A#&quot; .. octave_change; end
&#9;if num==2 then return &quot;B&quot; .. octave_change; end
&#9;if num==3 then return &quot;C&quot; .. octave_change; end
&#9;if num==4 then return &quot;C#&quot; .. octave_change; end
&#9;if num==5 then return &quot;D&quot; .. octave_change; end
&#9;if num==6 then return &quot;D#&quot; .. octave_change; end
&#9;if num==7 then return &quot;E&quot; .. octave_change; end
&#9;if num==8 then return &quot;F&quot; .. octave_change; end
&#9;if num==9 then return &quot;F#&quot; .. octave_change; end
&#9;if num==10 then return &quot;G&quot; .. octave_change; end
&#9;if num==11 then return &quot;G#&quot; .. octave_change; end
end

</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX474">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Velocity_Script</string>
							<ProtectedString name="Source">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Velocity()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Velocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Velocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Velocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Velocity.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Velocity.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Velocity.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;velocity&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Velocity;
&#9;&#9;&#9;v.Velocity=Vector3.new(FunctionData.Velocity.x, FunctionData.Velocity.y, FunctionData.Velocity.z);
&#9;&#9;end
&#9;&#9;History.Action(&quot;Velocity&quot;, parts, prior, Vector3.new(FunctionData.Velocity.x, FunctionData.Velocity.y, FunctionData.Velocity.z));
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Velocity = FunctionData.Velocity or {};
FunctionData.Velocity.x = FunctionData.Velocity.x or 0;
FunctionData.Velocity.y = FunctionData.Velocity.y or 0;
FunctionData.Velocity.z = FunctionData.Velocity.z or 0;


obj40=Instance.new(&quot;Frame&quot;); obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255); obj40.BorderColor3=Color3.new(27/255,42/255,53/255); obj40.Name=&quot;Velocity&quot;; obj40.Position=UDim2.new(0,243,1,-62); obj40.Size=UDim2.new(0,84,0,62);
obj41=Instance.new(&quot;TextBox&quot;); obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255); obj41.BorderColor3=Color3.new(27/255,42/255,53/255); obj41.Name=&quot;xBox&quot;; obj41.Parent=obj40; obj41.Position=UDim2.new(0,2,0,2); obj41.Size=UDim2.new(0,80,0,18); obj41.Text=&quot;X&quot;; obj41.TextColor3=Color3.new(27/255,42/255,53/255); obj41.Visible=false; obj41.ZIndex=2;
obj42=Instance.new(&quot;TextButton&quot;); obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255); obj42.BorderColor3=Color3.new(27/255,42/255,53/255); obj42.Name=&quot;xButton&quot;; obj42.Parent=obj40; obj42.Position=UDim2.new(0,2,0,2); obj42.Size=UDim2.new(0,80,0,18); obj42.Text=&quot;X&quot;; obj42.TextColor3=Color3.new(27/255,42/255,53/255);
obj43=Instance.new(&quot;TextBox&quot;); obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255); obj43.BorderColor3=Color3.new(27/255,42/255,53/255); obj43.Name=&quot;yBox&quot;; obj43.Parent=obj40; obj43.Position=UDim2.new(0,2,0,22); obj43.Size=UDim2.new(0,80,0,18); obj43.Text=&quot;Y&quot;; obj43.TextColor3=Color3.new(27/255,42/255,53/255); obj43.Visible=false; obj43.ZIndex=2;
obj44=Instance.new(&quot;TextButton&quot;); obj44.BackgroundColor3=Color3.new(157/255,255/255,255/255); obj44.BorderColor3=Color3.new(27/255,42/255,53/255); obj44.Name=&quot;yButton&quot;; obj44.Parent=obj40; obj44.Position=UDim2.new(0,2,0,22); obj44.Size=UDim2.new(0,80,0,18); obj44.Text=&quot;Y&quot;; obj44.TextColor3=Color3.new(27/255,42/255,53/255);
obj45=Instance.new(&quot;TextBox&quot;); obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255); obj45.BorderColor3=Color3.new(27/255,42/255,53/255); obj45.Name=&quot;zBox&quot;; obj45.Parent=obj40; obj45.Position=UDim2.new(0,2,0,42); obj45.Size=UDim2.new(0,80,0,18); obj45.Text=&quot;Z&quot;; obj45.TextColor3=Color3.new(27/255,42/255,53/255); obj45.Visible=false; obj45.ZIndex=2;
obj46=Instance.new(&quot;TextButton&quot;); obj46.BackgroundColor3=Color3.new(255/255,149/255,255/255); obj46.BorderColor3=Color3.new(27/255,42/255,53/255); obj46.Name=&quot;zButton&quot;; obj46.Parent=obj40; obj46.Position=UDim2.new(0,2,0,42); obj46.Size=UDim2.new(0,80,0,18); obj46.Text=&quot;Z&quot;; obj46.TextColor3=Color3.new(27/255,42/255,53/255);
obj42.Text=FunctionData.Velocity.x;
obj44.Text=FunctionData.Velocity.y;
obj46.Text=FunctionData.Velocity.z;
obj40.Parent=obj1;

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX475">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">class Drag_Script</string>
							<ProtectedString name="Source">Drag={};

Drag.Dragging=false;
Drag.Main=nil;
Drag.Offset=Vector3.new();
Drag.Parts={};

Drag.Dragger=Instance.new(&quot;Dragger&quot;);

Drag.Down=function(main, offset, parts)
&#9;if not Drag.Dragging then
&#9;&#9;Drag.OriginalPositions={};
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;Drag.OriginalPositions[#Drag.OriginalPositions+1]=v.CFrame;
&#9;&#9;end
&#9;&#9;Drag.Dragger:MouseDown(main, offset, parts);
&#9;&#9;Drag.Dragging=true;
&#9;&#9;Drag.Main=main;
&#9;&#9;Drag.Offset=offset;
&#9;&#9;Drag.Parts=parts;
&#9;end
end;

Drag.Up=function()
&#9;if Drag.Dragging then
&#9;&#9;local change=false;
&#9;&#9;local FinalPositions={};
&#9;&#9;for i,v in pairs(Drag.Parts) do
&#9;&#9;&#9;FinalPositions[#FinalPositions+1]=v.CFrame;
&#9;&#9;&#9;if Drag.OriginalPositions[i]~=v.CFrame then
&#9;&#9;&#9;&#9;change=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if change then
&#9;&#9;&#9;History.Action(&quot;Move&quot;, Drag.Parts, Drag.OriginalPositions, FinalPositions);
&#9;&#9;end
&#9;&#9;Drag.Dragger:MouseUp();
&#9;&#9;Drag.Dragging=false;
&#9;&#9;Drag.Main=nil;
&#9;&#9;Drag.Offset=Vector3.new();
&#9;&#9;Drag.Parts={};
&#9;end
end

Drag.Move=function(unitray)
&#9;if Drag.Dragging then
&#9;&#9;Drag.Dragger:MouseMove(unitray);
&#9;end
end

Drag.Rotate=function(axis)
&#9;if Drag.Dragging then
&#9;&#9;Drag.Dragger:AxisRotate(axis)
&#9;end
end
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX476">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">function GetIcon_Script</string>
							<ProtectedString name="Source">CloneOver=&quot;http://www.roblox.com/asset/?id=37596643&quot;;
Draggable=&quot;http://www.roblox.com/asset/?id=37596643&quot;;
Dragging=&quot;http://www.roblox.com/asset/?id=37596650&quot;;
Default=&quot;http://www.roblox.com/asset/?id=37596618&quot;;
Selectable=&quot;http://www.roblox.com/asset/?id=37596643&quot;;

function GetIcon(part)
if Drag.Dragging then
return Dragging;
end
if part~=nil then
if Selection.Check(part) and Permission(part, &quot;drag&quot;) then
return Draggable;
elseif not Selection.Check(part) and Permission(part, &quot;select&quot;) then
return Selectable;
elseif Permission(part, &quot;clone&quot;) then
return CloneOver;
end
end
return Default;
end;
</ProtectedString>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX477">
						<Properties>
							<bool name="Archivable">true</bool>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">function GetParts_Script</string>
							<ProtectedString name="Source">--[[ GetParts ]]

function Recurse(t)
local p={}
for i,v in pairs(t) do
if v:IsA(&quot;BasePart&quot;) then table.insert(p,v); end
if #v:GetChildren()&gt;0 then
local parts=Recurse(v:GetChildren(),p);
for a,b in pairs(parts) do
table.insert(p,b);
end
end
end
return p;
end

function GetParts(t)
p=Recurse(t)
return p;
end
</ProtectedString>
						</Properties>
					</Item>
				</Item>
				<Item class="StringValue" referent="RBX478">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">function GetIcon</string>
						<string name="Value">CloneOver=&quot;http://www.roblox.com/asset/?id=37596643&quot;;
Draggable=&quot;http://www.roblox.com/asset/?id=37596643&quot;;
Dragging=&quot;http://www.roblox.com/asset/?id=37596650&quot;;
Default=&quot;http://www.roblox.com/asset/?id=37596618&quot;;
Selectable=&quot;http://www.roblox.com/asset/?id=37596643&quot;;

function GetIcon(part)
if Drag.Dragging then
return Dragging;
end
if part~=nil then
if Selection.Check(part) and Permission(part, &quot;drag&quot;) then
return Draggable;
elseif not Selection.Check(part) and Permission(part, &quot;select&quot;) then
return Selectable;
elseif Permission(part, &quot;clone&quot;) then
return CloneOver;
end
end
return Default;
end;
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX479">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Anchor</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Anchor()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;anchor&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]={v.Anchored, v.Parent, v.CFrame};
&#9;&#9;&#9;v.Anchored=FunctionData.Anchor.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Anchor&quot;, parts, prior, FunctionData.Anchor.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Anchor = FunctionData.Anchor or {};
FunctionData.Anchor.Mode = FunctionData.Anchor.Mode or true;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(212/255,244/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Anchor&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;true&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;Anchor Parts&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;false&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;Unanchor Parts&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.Anchor.Mode = true;
&#9;obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.Anchor.Mode = false;
&#9;obj41.BackgroundColor3 = FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Anchor.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX480">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Permission</string>
						<string name="Value">function Permission(part,case)
&#9;if OnlineMode then
&#9;&#9;if #part.Name&gt;16 and string.sub(part.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;&#9;local owner=game.Players:findFirstChild(string.sub(part.Name,17))
&#9;&#9;&#9;if not owner then
&#9;&#9;&#9;&#9;if case~=&quot;select&quot; or not part.Locked or (keys.check(51) or keys.check(52)) then
&#9;&#9;&#9;&#9;&#9;return true; --player left the game
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;local bp=owner:findFirstChild(&quot;BuildPermissions&quot;);
&#9;&#9;&#9;&#9;if bp~=nil then
&#9;&#9;&#9;&#9;&#9;if bp:findFirstChild(player.Name..&quot;_&quot;..case) then
&#9;&#9;&#9;&#9;&#9;&#9;if bp[player.Name..&quot;_&quot;..case].Value then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if case~=&quot;select&quot; or not part.Locked or (keys.check(51) or keys.check(52)) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return true; --player gave permission
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif not part.Locked and case==&quot;clone&quot; then
&#9;&#9;&#9;return true --return true for cloning a starter part
&#9;&#9;end
&#9;else
--for offline build, return true for everything except selecting and dragging locked parts (without alt selected).
&#9;&#9;if case==&quot;drag&quot; or case==&quot;select&quot; then
&#9;&#9;&#9;if (keys.check(51) or keys.check(52)) or not part.Locked then
&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;return false
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false;
end

function HasPermission(table_of_parts, case)
&#9;local t={};
&#9;for i,v in pairs(table_of_parts) do
&#9;&#9;if Permission(v,case) then
&#9;&#9;&#9;t[#t+1]=v;
&#9;&#9;end
&#9;end
&#9;return t;
end

function UserPermission(LocalUser, TargetUser, case)
&#9;local bp=TargetUser:findFirstChild(&quot;BuildPermissions&quot;);
&#9;if bp~=nil then
&#9;&#9;if bp:findFirstChild(LocalUser.Name..&quot;_&quot;..case) then
&#9;&#9;&#9;if bp[LocalUser.Name..&quot;_&quot;..case].Value then
&#9;&#9;&#9;&#9;return true; --player gave permission
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

_possible_permissions={&quot;select&quot;,&quot;drag&quot;,&quot;clone&quot;,&quot;handles_drag&quot;,&quot;move&quot;,&quot;handles_resize&quot;,&quot;resize&quot;,&quot;handles_rotate&quot;,&quot;rotate&quot;,&quot;lock&quot;,&quot;color&quot;,&quot;material&quot;,&quot;transparency&quot;,&quot;reflectance&quot;,&quot;anchor&quot;,&quot;cancollide&quot;,&quot;formfactor&quot;,&quot;shape&quot;,&quot;surface&quot;,&quot;velocity&quot;,&quot;rotvelocity&quot;,&quot;friction&quot;,&quot;delete&quot;,&quot;save&quot;, &quot;elasticity&quot;,&quot;owner_only&quot;}

--Give all permissions to every player for themself.
if player:findFirstChild(&quot;BuildPermissions&quot;)==nil then
local m=Instance.new(&quot;Model&quot;);
m.Name=&quot;BuildPermissions&quot;;
for i,v in pairs(_possible_permissions) do
local q=Instance.new(&quot;BoolValue&quot;);
q.Name=player.Name..&quot;_&quot;..v;
q.Value=true;
q.Parent=m;
end
m.Parent=player;
end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX481">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Utility:Cutscene Maker</string>
						<string name="Value"></string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX482">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Options</string>
						<string name="Value">--[[Options]]

PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Options()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;&#9;if f~=nil then f.Parent=nil; end
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if obj66~=nil and obj66.Name==&quot;ToolTipDisplay&quot; then obj66.Visible=false; end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(163/255,162/255,165/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Options&quot; obj40.Position=UDim2.new(0.5,-183,0.5,-115) obj40.Size=UDim2.new(0,366,0,230) obj40.BackgroundColor3=Options.MainColor;
obj41=Instance.new(&quot;TextLabel&quot;) obj41.Active=false obj41.BackgroundColor3=Color3.new(163/255,162/255,165/255) obj41.BackgroundTransparency=1 obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Parent=obj40 obj41.Position=UDim2.new(0,0,0,0) obj41.Size=UDim2.new(1,0,0,30) obj41.Text=&quot;Options&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.FontSize=Enum.FontSize.Size18
obj42=Instance.new(&quot;TextButton&quot;) obj42.Name=&quot;RepeatDelay&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,32) obj42.Size=UDim2.new(0.5,-3,0,20) obj42.Text=&quot;Repeat Delay: 1&quot; obj42.TextXAlignment=Enum.TextXAlignment.Left; obj42.BackgroundColor3=Options.ButtonColor;
obj43=Instance.new(&quot;TextButton&quot;) obj43.Name=&quot;RepeatRate&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,54) obj43.Size=UDim2.new(0.5,-3,0,20) obj43.Text=&quot;Repeat Rate: 0.03&quot; obj43.TextXAlignment=Enum.TextXAlignment.Left; obj43.BackgroundColor3=Options.ButtonColor;
obj44=Instance.new(&quot;TextButton&quot;) obj44.Name=&quot;DoubleClickSpeed&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,76) obj44.Size=UDim2.new(0.5,-3,0,20) obj44.Text=&quot;Double Click Speed: 0.03&quot; obj44.TextXAlignment=Enum.TextXAlignment.Left; obj44.BackgroundColor3=Options.ButtonColor;
obj45=Instance.new(&quot;TextButton&quot;) obj45.Name=&quot;BoundingBoxColor&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,98) obj45.Size=UDim2.new(0.5,-3,0,20) obj45.Text=&quot;Bounding Box Color: Cyan&quot; obj45.TextXAlignment=Enum.TextXAlignment.Left; obj45.BackgroundColor3=Options.ButtonColor;
obj46=Instance.new(&quot;TextButton&quot;) obj46.Name=&quot;ActiveSelectionBoxColor&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,120) obj46.Size=UDim2.new(0.5,-3,0,20) obj46.Text=&quot;Active Selection Color: Really red&quot; obj46.TextXAlignment=Enum.TextXAlignment.Left; obj46.BackgroundColor3=Options.ButtonColor;
obj47=Instance.new(&quot;TextButton&quot;) obj47.Name=&quot;DragHandlesColor&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,142) obj47.Size=UDim2.new(0.5,-3,0,20) obj47.Text=&quot;Drag Handles Color: Bright orange&quot; obj47.TextXAlignment=Enum.TextXAlignment.Left; obj47.BackgroundColor3=Options.ButtonColor;
obj48=Instance.new(&quot;TextButton&quot;) obj48.Name=&quot;RotateHandlesColor&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,164) obj48.Size=UDim2.new(0.5,-3,0,20) obj48.Text=&quot;Rotate Handles Color: Bright red&quot; obj48.TextXAlignment=Enum.TextXAlignment.Left; obj48.BackgroundColor3=Options.ButtonColor;
obj49=Instance.new(&quot;TextButton&quot;) obj49.Name=&quot;ResizeHandlesColor&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,2,0,186) obj49.Size=UDim2.new(0.5,-3,0,20) obj49.Text=&quot;Resize Handles Color: Bright blue&quot; obj49.TextXAlignment=Enum.TextXAlignment.Left; obj49.BackgroundColor3=Options.ButtonColor;
obj50=Instance.new(&quot;TextButton&quot;) obj50.Name=&quot;SurfaceSelectionColor&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,2,0,208) obj50.Size=UDim2.new(0.5,-3,0,20) obj50.Text=&quot;Surface Selection Color: Bright violet&quot; obj50.TextXAlignment=Enum.TextXAlignment.Left; obj50.BackgroundColor3=Options.ButtonColor;
obj51=Instance.new(&quot;TextButton&quot;) obj51.Name=&quot;SmallestSize&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0.5,1,0,98) obj51.Size=UDim2.new(0.5,-3,0,20) obj51.Text=&quot;Smallest Part Size: 1, 1, 1&quot; obj51.TextXAlignment=Enum.TextXAlignment.Left; obj51.BackgroundColor3=Options.ButtonColor;
obj52=Instance.new(&quot;TextButton&quot;) obj52.Name=&quot;CloneShift&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0.5,1,0,120) obj52.Size=UDim2.new(0.5,-3,0,20) obj52.Text=&quot;Clone Shift: true&quot; obj52.TextXAlignment=Enum.TextXAlignment.Left; obj52.BackgroundColor3=Options.ButtonColor;
obj53=Instance.new(&quot;TextButton&quot;) obj53.Name=&quot;Permissions&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0.5,1,0,208) obj53.Size=UDim2.new(0.5,-3,0,20) obj53.Text=&quot;Permissions Editor&quot; obj53.TextXAlignment=Enum.TextXAlignment.Left; obj53.BackgroundColor3=Options.ButtonColor;
obj54=Instance.new(&quot;TextButton&quot;) obj54.Name=&quot;DockVisible&quot; obj54.Parent=obj40 obj54.Position=UDim2.new(0.5,1,0,186) obj54.Size=UDim2.new(0.5,-3,0,20) obj54.Text=&quot;Dock Visible: true&quot; obj54.TextXAlignment=Enum.TextXAlignment.Left; obj54.BackgroundColor3=Options.ButtonColor;
obj55=Instance.new(&quot;TextButton&quot;) obj55.Name=&quot;ToolTip&quot; obj55.Parent=obj40 obj55.Position=UDim2.new(0.5,1,0,164) obj55.Size=UDim2.new(0.5,-3,0,20) obj55.Text=&quot;ToolTipText: on&quot; obj55.TextXAlignment=Enum.TextXAlignment.Left; obj55.BackgroundColor3=Options.ButtonColor;
obj56=Instance.new(&quot;TextButton&quot;) obj56.Name=&quot;ThreeAxes&quot; obj56.Parent=obj40 obj56.Position=UDim2.new(0.5,1,0,142) obj56.Size=UDim2.new(0.5,-3,0,20) obj56.Text=&quot;Three Axes: on&quot; obj56.TextXAlignment=Enum.TextXAlignment.Left; obj56.BackgroundColor3=Options.ButtonColor;
obj57=Instance.new(&quot;TextButton&quot;) obj57.Name=&quot;ResizeDragIntervals&quot; obj57.Parent=obj40 obj57.Position=UDim2.new(0.5,1,0,76) obj57.Size=UDim2.new(0.5,-3,0,20) obj57.Text=&quot;Resize Increments: 1&quot; obj57.TextXAlignment=Enum.TextXAlignment.Left; obj57.BackgroundColor3=Options.ButtonColor;
obj58=Instance.new(&quot;TextButton&quot;) obj58.Name=&quot;MoveDragIntervals&quot; obj58.Parent=obj40 obj58.Position=UDim2.new(0.5,1,0,32) obj58.Size=UDim2.new(0.5,-3,0,20) obj58.Text=&quot;Move Increments: 0.5&quot; obj58.TextXAlignment=Enum.TextXAlignment.Left; obj58.BackgroundColor3=Options.ButtonColor;
obj59=Instance.new(&quot;TextButton&quot;) obj59.Name=&quot;RotateDragIntervals&quot; obj59.Parent=obj40 obj59.Position=UDim2.new(0.5,1,0,54) obj59.Size=UDim2.new(0.5,-3,0,20) obj59.Text=&quot;Rotate Increments: 5&quot; obj59.TextXAlignment=Enum.TextXAlignment.Left; obj59.BackgroundColor3=Options.ButtonColor;
obj40.Parent=gui;

brickcolors={
{obj45, &quot;Bounding Box Color&quot;, &quot;BoundingBoxColor&quot;, &quot;Determines the color of the selection boxes that surround selected parts.&quot;},
{obj46, &quot;Active Selection Color&quot;, &quot;ActiveSelectionBoxColor&quot;, &quot;Determines the color of the selection box that is used when choosing a part.&quot;},
{obj47, &quot;Drag Handles Color&quot;, &quot;DragHandlesColor&quot;, &quot;Determines the color of the dragging handles for movement.&quot;},
{obj48, &quot;Rotate Handles Color&quot;, &quot;RotateHandlesColor&quot;, &quot;Determines the color of the dragging handles for rotation.&quot;},
{obj49, &quot;Resize Handles Color&quot;, &quot;ResizeHandlesColor&quot;, &quot;Determines the color of the dragging handles for resizing.&quot;},
{obj50, &quot;Surface Selection Color&quot;, &quot;SurfaceSelectionColor&quot;, &quot;Determines the color of the selection panel that is used when selecting a surface of a part.&quot;},
}
all_colors = {&quot;Institutional white&quot;,&quot;White&quot;,&quot;Phosph. White&quot;,&quot;Transparent&quot;,&quot;Light stone grey&quot;,&quot;Mid gray&quot;,&quot;Light grey&quot;,&quot;Tr. Brown&quot;,&quot;Light grey metallic&quot;,&quot;Medium stone grey&quot;,&quot;Silver&quot;,&quot;Grey&quot;,&quot;Silver flip/flop&quot;,&quot;Gun metallic&quot;,&quot;Dark grey&quot;,&quot;Dark stone grey&quot;,&quot;Dark grey metallic&quot;,&quot;Black metallic&quot;,&quot;Black&quot;,&quot;Really black&quot;,&quot;Light red&quot;,&quot;Pastel orange&quot;,&quot;Tr. Flu. Reddish orange&quot;,&quot;Medium red&quot;,&quot;Tr. Red&quot;,&quot;Bright red&quot;,&quot;Really red&quot;,&quot;Dusty Rose&quot;,&quot;Dark red&quot;,&quot;Red flip/flop&quot;,&quot;Sand red&quot;,&quot;Light orange&quot;,&quot;Medium orange&quot;,&quot;Warm yellowish orange&quot;,&quot;Bright orange&quot;,&quot;Deep orange&quot;,&quot;Neon orange&quot;,&quot;Flame reddish orange&quot;,&quot;CGA brown&quot;,&quot;Dark orange&quot;,&quot;Br. yellowish orange&quot;,&quot;Br. reddish orange&quot;,&quot;Med. yellowish orange&quot;,&quot;Curry&quot;,&quot;Dark Curry&quot;,&quot;Light orange brown&quot;,&quot;Pastel brown&quot;,&quot;Yellow flip/flop&quot;,&quot;Light brick yellow&quot;,&quot;Brown&quot;,&quot;Nougat&quot;,&quot;Dark nougat&quot;,&quot;Earth orange&quot;,&quot;Reddish brown&quot;,&quot;Rust&quot;,&quot;Gold&quot;,&quot;Earth yellow&quot;,&quot;Brick yellow&quot;,&quot;Lig. Yellowich orange&quot;,&quot;Pastel yellow&quot;,&quot;Light yellow&quot;,&quot;Cool yellow&quot;,&quot;Tr. Yellow&quot;,&quot;Tr. Flu. Green&quot;,&quot;Tr. Flu. Yellow&quot;,&quot;Flame yellowish orange&quot;,&quot;Fire Yellow&quot;,&quot;Bright yellow&quot;,&quot;New Yeller&quot;,&quot;Sand yellow&quot;,&quot;Sand yellow metallic&quot;,&quot;Lig. yellowish green&quot;,&quot;Med. yellowish green&quot;,&quot;Olive&quot;,&quot;Grime&quot;,&quot;Faded green&quot;,&quot;Neon green&quot;,&quot;Light green (Mint)&quot;,&quot;Br. yellowish green&quot;,&quot;Lime green&quot;,&quot;Bright green&quot;,&quot;Camo&quot;,&quot;Dark green&quot;,&quot;Earth green&quot;,&quot;Pastel green&quot;,&quot;Medium green&quot;,&quot;Sand green&quot;,&quot;Tr. Green&quot;,&quot;Lemon metalic&quot;,&quot;Light blue&quot;,&quot;Tr. Lg blue&quot;,&quot;Tr. Flu. Blue&quot;,&quot;Light bluish green&quot;,&quot;Light Royal blue&quot;,&quot;Pastel light blue&quot;,&quot;Light bluish violet&quot;,&quot;Pastel blue-green&quot;,&quot;Pastel Blue&quot;,&quot;Turquoise&quot;,&quot;Med. bluish green&quot;,&quot;Medium blue&quot;,&quot;Dove blue&quot;,&quot;Tr. Blue&quot;,&quot;Toothpaste&quot;,&quot;Teal&quot;,&quot;Cyan&quot;,&quot;Bright bluish green&quot;,&quot;Bright blue&quot;,&quot;Really blue&quot;,&quot;Navy blue&quot;,&quot;Earth blue&quot;,&quot;Medium Royal blue&quot;,&quot;Medium bluish violet&quot;,&quot;Royal blue&quot;,&quot;Bright bluish violet&quot;,&quot;Deep blue&quot;,&quot;Dark Royal blue&quot;,&quot;Sand blue metallic&quot;,&quot;Sand blue&quot;,&quot;Tr. Bright bluish violet&quot;,&quot;Pastel violet&quot;,&quot;Light lilac&quot;,&quot;Alder&quot;,&quot;Lilac&quot;,&quot;Reddish lilac&quot;,&quot;Lavender&quot;,&quot;Royal purple&quot;,&quot;Bright violet&quot;,&quot;Tr. Medi. reddish violet&quot;,&quot;Light reddish violet&quot;,&quot;Light purple&quot;,&quot;Tr. Flu. Red&quot;,&quot;Light pink&quot;,&quot;Pink&quot;,&quot;Hot pink&quot;,&quot;Magenta&quot;,&quot;Bright purple&quot;,&quot;Med. reddish violet&quot;,&quot;Bright reddish lilac&quot;,&quot;Bright reddish violet&quot;,&quot;Medium lilac&quot;,&quot;Sand violet metallic&quot;,&quot;Sand violet&quot;};
numbers={
{obj42, &quot;Repeat Delay&quot;, &quot;RepeatDelay&quot;, &quot;The amount of time that elapses before the tab button begins to repeat.&quot;},
{obj43, &quot;Repeat Rate&quot;, &quot;RepeatRate&quot;, &quot;The amount of time between tab hits.&quot;},
{obj44, &quot;Double Click Speed&quot;, &quot;DoubleClickSpeed&quot;, &quot;How quickly you have to double click in order to select the target&apos;s parent.&quot;},
{obj57, &quot;Resize Increments&quot;, &quot;ResizeDragIntervals&quot;, &quot;The factor by which you&apos;ll resize when clicking and dragging on a handle.&quot;},
{obj58, &quot;MoveIncrements&quot;, &quot;MoveDragIntervals&quot;, &quot;The factor by which you&apos;ll move when clicking and dragging on a handle.&quot;},
{obj59, &quot;RotateIncrements&quot;, &quot;RotateDragIntervals&quot;, &quot;The factor by which you&apos;ll rotate when clicking and dragging on a handle.&quot;},
}
boolean={
{obj52, &quot;Clone Shift&quot;, function(bool) return (bool and &quot;true&quot; or &quot;false&quot;); end, &quot;CloneShift&quot;, &quot;Determines whether cloned parts get moved above the old part, or whether they remain in the same location.&quot;},
{obj54, &quot;Dock Visible&quot;, function(bool) return (bool and &quot;true&quot; or &quot;false&quot;); end, &quot;DockVisible&quot;, &quot;Whether or not the dock above the main tool window is visible.&quot;},
{obj56, &quot;Three Axes&quot;, function(bool) return (bool and &quot;on&quot; or &quot;off&quot;); end, &quot;ThreeAxes&quot;, &quot;Determines if the three axes indicators are turned on.&quot;},
}
--toggle is used for text properties that have a select series of values.
toggle={
{obj55, &quot;Tool Tip Text&quot;, &quot;ToolTipText&quot;, &quot;Determines if you can hover over colors and materials to identify their name.&quot;, {&quot;off&quot;, &quot;on&quot;, &quot;immediate&quot;}},
}
vector3={
{obj51, &quot;Smallest Size&quot;, &quot;SmallestSize&quot;, &quot;The smallest size you can resize a part to when dragging. Type in 3 numbers separated by commas.&quot;},
}

UpdateButtons=function()
for i,v in pairs(vector3) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
end
for i,v in pairs(numbers) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]]);
end
for i,v in pairs(toggle) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]];
end
for i,v in pairs(brickcolors) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]].Name;
end
for i,v in pairs(boolean) do
v[1].Text=v[2] .. &quot;: &quot; .. v[3](Options[v[4]]);
end
end;

for i,v in pairs(vector3) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextBox&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor;
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=tostring(Options[v[3]].x) .. &quot;, &quot; .. tostring(Options[v[3]].y) .. &quot;, &quot; .. tostring(Options[v[3]].z);
obj62.Text=v[2];
obj63.Text=v[4];
obj64.MouseButton1Down:connect(function()
entry=obj61.Text;
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
x=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); x=tonumber(x) or 1;
entry=string.sub(entry, f1+1);
f1=string.find(entry, &quot;,&quot;);
if f1~=nil then
y=string.gsub(string.sub(entry, 1, f1-1), &quot; &quot;, &quot;&quot;); y=tonumber(y) or 1;
z=string.gsub(string.sub(entry, f1+1), &quot; &quot;, &quot;&quot;); z=tonumber(z) or 1;
Options[v[3]]=Vector3.new(x,y,z);
else
Options[v[3]]=Vector3.new(1,x,1);
end
else
Options[v[3]]=Vector3.new(1,1,1);
end
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(numbers) do
v[1].Text=v[2] .. &quot;: &quot; .. tostring(Options[v[3]]);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextBox&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor;
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=Options[v[3]];
obj62.Text=v[2];
obj63.Text=v[4];
obj64.MouseButton1Down:connect(function()
Options[v[3]]=math.abs(tonumber(obj61.Text==&quot;&quot; and &quot;0&quot; or obj61.Text) or 0);
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(boolean) do
v[1].Text=v[2] .. &quot;: &quot; .. v[3](Options[v[4]]);
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=v[3](Options[v[4]]);
obj62.Text=v[2];
obj63.Text=v[5];
obj61.MouseButton1Down:connect(function()
Options[v[4]]=not Options[v[4]]
obj61.Text=v[3](Options[v[4]]);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(toggle) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]];
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=(Options[v[3]]);
obj62.Text=v[2];
obj63.Text=v[4];
obj61.MouseButton1Down:connect(function()
for a,b in pairs(v[5]) do
if b==Options[v[3]] then
index=a;
end
end
index=index+1;
if v[5][index]==nil then index=1 end
Options[v[3]]=v[5][index];
obj61.Text=(Options[v[3]]);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

for i,v in pairs(brickcolors) do
v[1].Text=v[2]..&quot;: &quot;..Options[v[3]].Name;
v[1].MouseButton1Down:connect(function()
if obj60~=nil then obj60.Parent=nil; end
obj60=Instance.new(&quot;Frame&quot;) obj60.Name=&quot;Choice&quot; obj60.Position=UDim2.new(0.5,-100,0.5,-40) obj60.Size=UDim2.new(0,200,0,80) obj60.BackgroundColor3=Options.MainColor;
obj61=Instance.new(&quot;TextButton&quot;) obj61.Name=&quot;Entry&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,20) obj61.Size=UDim2.new(1,-4,0,16) obj61.BackgroundColor3=Options.ButtonColor
obj62=Instance.new(&quot;TextLabel&quot;) obj62.Active=false obj62.Name=&quot;Name&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,2) obj62.Size=UDim2.new(1,-4,0,16) obj62.BackgroundTransparency=1;
obj63=Instance.new(&quot;TextLabel&quot;) obj63.Active=false obj63.Name=&quot;Description&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,2,0,56) obj63.Size=UDim2.new(1,-4,1,-40) obj63.TextWrap=true; obj63.BackgroundTransparency=1;
obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;Submit&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,2,0,38) obj64.Size=UDim2.new(1,-4,0,16) obj64.BackgroundColor3=Options.ButtonColor; obj64.Text=&quot;Submit&quot;;
obj60.Parent=gui;
obj61.Text=Options[v[3]].Name;
obj62.Text=v[2];
obj63.Text=v[4];
obj61.MouseButton1Down:connect(function(x,y)
f=Instance.new(&quot;Frame&quot;);
f.Size=UDim2.new(0, 13*(15)+2*(13+1), 0, 11*(15)+2*(11+1)); --number of tiles wide: 13, number of tiles tall: 11, spacing: 2, width and heightof each tile: 15
f.Position=UDim2.new(0, x, 0, y);
f.Parent=gui;
for i=0,142,1 do
local tile=Instance.new(&quot;TextButton&quot;)
tile.BorderColor3=Color3.new(8/255,8/255,8/255)
tile.Name=tostring(i+1)
tile.Position=UDim2.new(0,2+(i%13)*17,0,2+(math.floor(i/13))*17)
tile.Size=UDim2.new(0,19,0,19)
tile.Text=&quot;&quot;
tile.BackgroundColor3=BrickColor.new(all_colors[i+1]).Color
tile.MouseButton1Down:connect(function()
Options[v[3]]=BrickColor.new(all_colors[tonumber(tile.Name)]);
f.Parent=nil;
end)
tile.Parent=f
end
obj61.Text=(Options[v[3]].Name);
end)
obj64.MouseButton1Down:connect(function()
UpdateButtons();
if obj60~=nil then obj60.Parent=nil; end
end)
end)
end

obj53.MouseButton1Down:connect(function()
&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;PermissionsIndex=1;
&#9;PermissionsGiven=true;
&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;obj60=Instance.new(&quot;Frame&quot;) obj60.Position=UDim2.new(0.5,-57,0.5,-35) obj60.Size=UDim2.new(0,130,0,78)
&#9;obj61=Instance.new(&quot;TextLabel&quot;) obj61.Active=false obj61.Name=&quot;PlayerName&quot; obj61.Parent=obj60 obj61.Position=UDim2.new(0,2,0,2) obj61.Size=UDim2.new(1,-4,0,12)
&#9;obj62=Instance.new(&quot;TextButton&quot;) obj62.Name=&quot;Previous&quot; obj62.Parent=obj60 obj62.Position=UDim2.new(0,2,0,64) obj62.Size=UDim2.new(0,16,0,12) obj62.Text=&quot;&lt;&quot;
&#9;obj63=Instance.new(&quot;TextButton&quot;) obj63.Name=&quot;Next&quot; obj63.Parent=obj60 obj63.Position=UDim2.new(0,20,0,64) obj63.Size=UDim2.new(0,16,0,12) obj63.Text=&quot;&gt;&quot;
&#9;obj64=Instance.new(&quot;TextButton&quot;) obj64.Name=&quot;SwapMode&quot; obj64.Parent=obj60 obj64.Position=UDim2.new(0,38,0,64) obj64.Size=UDim2.new(0,48,0,12) obj64.Text=&quot;Given&quot;
&#9;obj65=Instance.new(&quot;TextButton&quot;) obj65.Name=&quot;Submit&quot; obj65.Parent=obj60 obj65.Position=UDim2.new(0,88,0,64) obj65.Size=UDim2.new(0,40,0,12) obj65.Text=&quot;Submit&quot;
&#9;obj66=Instance.new(&quot;TextLabel&quot;); obj66.Size=UDim2.new(0, 140, 0, 80); obj66.Parent=obj60; obj66.Visible=false; obj66.BackgroundColor3=Options.ToolTipColor; obj66.Text=&quot;&quot;; obj66.TextWrap=true; obj66.ZIndex=2; obj66.Name=&quot;ToolTipDisplay&quot;;
&#9;obj60.BackgroundColor3=Options.MainColor;
&#9;obj61.BackgroundColor3=Options.ButtonColor;
&#9;obj62.BackgroundColor3=Options.ButtonColor;
&#9;obj63.BackgroundColor3=Options.ButtonColor;
&#9;obj64.BackgroundColor3=Options.ButtonColor;
&#9;obj65.BackgroundColor3=Options.ButtonColor;
&#9;local buttons={};
&#9;local Refresh=function()
&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;&#9;obj61.Text=permissionsTarget.Name;
&#9;&#9;if PermissionsGiven then
&#9;&#9;&#9;for i,v in pairs(buttons) do
&#9;&#9;&#9;&#9;v.Text=UserPermission(permissionsTarget, game.Players.LocalPlayer, _possible_permissions[tonumber(v.Name)]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;v.Text=UserPermission(game.Players.LocalPlayer, permissionsTarget, _possible_permissions[tonumber(v.Name)]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;end
&#9;end;
&#9;local descriptions={&quot;Allow player to select your parts&quot;, &quot;Allow player to drag your parts around&quot;, &quot;Allow player to clone your parts&quot;, &quot; Allow player to drag your parts around via movement handles&quot;, &quot;Allow player to move your parts via Apply button.&quot;, &quot;Allow player to resize your parts via resize handles&quot;, &quot;Allow player to resize your parts via Apply button&quot;, &quot;Allow player to rotate your parts via rotational handles&quot;, &quot;Allow player to rotate your parts via Apply button&quot;, &quot;Allow player to lock your parts&quot;, &quot;Allow player to color your parts&quot;, &quot;Allow player to change the material of your parts&quot;, &quot;Allow player to change transparency of your parts&quot;, &quot;Allow player to change reflectance of your parts&quot;, &quot;Allow player to anchor/unanchor your parts&quot;, &quot;Allow player to change CanCollide of your parts&quot;, &quot;Allow player to change the form factor of your parts&quot;, &quot;Allow player to change the shape of your parts&quot;, &quot;Allow player to change the surface of your parts&quot;, &quot;Allow player to change the velocity of your parts&quot;, &quot;Allow player to change the rotational velocity of your parts&quot;, &quot;Allow player to change the friction of your parts&quot;, &quot;Allow player to delete your parts&quot;, &quot;Allow player to save your parts&quot;};
&#9;for x=1,8 do
&#9;&#9;for y=1,3 do
&#9;&#9;&#9;local button=Instance.new(&quot;TextButton&quot;);
&#9;&#9;&#9;button.Name=tostring((y-1)*8+x);
&#9;&#9;&#9;button.Position=UDim2.new(0,2+(x-1)*16,0,16+(y-1)*16);
&#9;&#9;&#9;button.Size=UDim2.new(0,14,0,14);
&#9;&#9;&#9;button.BackgroundColor3=Options.ButtonColor;
&#9;&#9;&#9;button.Parent=obj60;
&#9;&#9;&#9;button.Text=UserPermission(permissionsTarget, game.Players.LocalPlayer, _possible_permissions[(y-1)*8+x]) and &quot;X&quot; or &quot; &quot;;
&#9;&#9;&#9;buttons[#buttons+1]=button;
&#9;&#9;&#9;button.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;&#9;&#9;obj66.Text=descriptions[tonumber(button.Name)];
&#9;&#9;&#9;&#9;obj66.Visible=true;
&#9;&#9;&#9;end)
&#9;&#9;&#9;button.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;if not PermissionsGiven then
&#9;&#9;&#9;&#9;&#9;PermissionsGiven=true;
&#9;&#9;&#9;&#9;&#9;obj64.Text=PermissionsGiven and &quot;Given&quot; or &quot;Recieved&quot;;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;&#9;&#9;permissionsTarget=game.Players:GetChildren()[PermissionsIndex];
&#9;&#9;&#9;&#9;if obj61.Text==permissionsTarget.Name then --just to make sure nothing unexpected is going on
&#9;&#9;&#9;&#9;&#9;permissions=game.Players.LocalPlayer:findFirstChild(&quot;BuildPermissions&quot;);
&#9;&#9;&#9;&#9;&#9;if permissions~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;if permissions:findFirstChild(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)]) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;permissions[(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)])].Value=not permissions[(permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)])].Value;
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local q=Instance.new(&quot;BoolValue&quot;);
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Name=permissionsTarget.Name..&quot;_&quot;.._possible_permissions[tonumber(button.Name)];
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Value=true;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;q.Parent=permissions;
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Refresh();
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
&#9;obj60.Parent=gui;
&#9;obj62.MouseButton1Down:connect(function()
&#9;&#9;PermissionsIndex=PermissionsIndex-1;
&#9;&#9;if PermissionsIndex&lt;1 then PermissionsIndex=#game.Players:GetChildren(); end
&#9;&#9;Refresh();
&#9;end)
&#9;obj62.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Previous Player&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj63.MouseButton1Down:connect(function()
&#9;&#9;PermissionsIndex=PermissionsIndex+1;
&#9;&#9;if PermissionsIndex&gt;#game.Players:GetChildren() then PermissionsIndex=1; end
&#9;&#9;Refresh();
&#9;end)
&#9;obj63.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Next Player&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj64.MouseButton1Down:connect(function()
&#9;&#9;PermissionsGiven=not PermissionsGiven;
&#9;&#9;obj64.Text=PermissionsGiven and &quot;Given&quot; or &quot;Recieved&quot;;
&#9;end)
&#9;obj64.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Currently displaying: &quot; .. (PermissionsGiven and &quot;Permissions given to other players&quot; or &quot;Permissions other players have given you&quot;);
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;obj65.MouseButton1Down:connect(function()
&#9;&#9;if obj60~=nil then obj60.Parent=nil; end
&#9;end)
&#9;obj62.MouseMoved:connect(function(x,y)
&#9;&#9;obj66.Position=UDim2.new(0, x-obj60.AbsolutePosition.x, 0, y-obj60.AbsolutePosition.y-obj66.AbsoluteSize.y);
&#9;&#9;obj66.Text=&quot;Submit changes and close this window.&quot;;
&#9;&#9;obj66.Visible=true;
&#9;end)
&#9;Refresh();
end)

end


</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX483">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">class Drag</string>
						<string name="Value">Drag={};

Drag.Dragging=false;
Drag.Main=nil;
Drag.Offset=Vector3.new();
Drag.Parts={};

Drag.Dragger=Instance.new(&quot;Dragger&quot;);

Drag.Down=function(main, offset, parts)
&#9;if not Drag.Dragging then
&#9;&#9;Drag.OriginalPositions={};
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;Drag.OriginalPositions[#Drag.OriginalPositions+1]=v.CFrame;
&#9;&#9;end
&#9;&#9;Drag.Dragger:MouseDown(main, offset, parts);
&#9;&#9;Drag.Dragging=true;
&#9;&#9;Drag.Main=main;
&#9;&#9;Drag.Offset=offset;
&#9;&#9;Drag.Parts=parts;
&#9;end
end;

Drag.Up=function()
&#9;if Drag.Dragging then
&#9;&#9;local change=false;
&#9;&#9;local FinalPositions={};
&#9;&#9;for i,v in pairs(Drag.Parts) do
&#9;&#9;&#9;FinalPositions[#FinalPositions+1]=v.CFrame;
&#9;&#9;&#9;if Drag.OriginalPositions[i]~=v.CFrame then
&#9;&#9;&#9;&#9;change=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if change then
&#9;&#9;&#9;History.Action(&quot;Move&quot;, Drag.Parts, Drag.OriginalPositions, FinalPositions);
&#9;&#9;end
&#9;&#9;Drag.Dragger:MouseUp();
&#9;&#9;Drag.Dragging=false;
&#9;&#9;Drag.Main=nil;
&#9;&#9;Drag.Offset=Vector3.new();
&#9;&#9;Drag.Parts={};
&#9;end
end

Drag.Move=function(unitray)
&#9;if Drag.Dragging then
&#9;&#9;Drag.Dragger:MouseMove(unitray);
&#9;end
end

Drag.Rotate=function(axis)
&#9;if Drag.Dragging then
&#9;&#9;Drag.Dragger:AxisRotate(axis)
&#9;end
end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX484">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">HookUpGuis</string>
						<string name="Value">--[[ Hook Up Guis ]]
PaletteMode=1;
PaletteImages={
{36663907,36662758,36662760,36662767,36662771},
{0,36681404,36681442,36681517,36681469},
{0,36681389,36681397,36681413,36681490},
{0,36681506,36681529,36681480,36681419},
{0,36681407,36681526,36681456,36681429},
};
PaletteFunctions = PaletteFunctions or {};
PaletteFunctions={

Move=PaletteFunctions.Move or (function() end),
Resize=PaletteFunctions.Resize or (function() end),
Rotate=PaletteFunctions.Rotate or (function() end),
Lock=PaletteFunctions.Lock or (function() end),
Color=PaletteFunctions.Color or (function() end),
Material=PaletteFunctions.Material or (function() end),
Transparency=PaletteFunctions.Transparency or (function() end),
Reflectance=PaletteFunctions.Reflectance or (function() end),
Anchor=PaletteFunctions.Anchor or (function() end),
CanCollide=PaletteFunctions.CanCollide or (function() end),
FormFactor=PaletteFunctions.FormFactor or (function() end),
Shape=PaletteFunctions.Shape or (function() end),
Surface=PaletteFunctions.Surface or (function() end),
Velocity=PaletteFunctions.Velocity or (function() end),
RotVelocity=PaletteFunctions.RotVelocity or (function() end),
Friction=PaletteFunctions.Friction or (function() end),
Elasticity=PaletteFunctions.Elasticity or (function() end),
Utilities=PaletteFunctions.Utilities or (function() end),

Options=PaletteFunctions.Options or (function() end),
Help=PaletteFunctions.Help or (function() end),
};
FunctionData={};

function RefreshPalette()
obj3.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][2]);
obj4.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][4]);
obj5.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][5]);
obj6.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[PaletteMode][3]);
end
function ActivateFunction(index)
input(&quot;Unload&quot;);
if PaletteMode==1 and index==1 then
PaletteFunctions.Move();
elseif PaletteMode==1 and index==2 then
PaletteFunctions.Resize();
elseif PaletteMode==1 and index==3 then
PaletteFunctions.Rotate();
elseif PaletteMode==1 and index==4 then
PaletteFunctions.Lock();
elseif PaletteMode==2 and index==1 then
PaletteFunctions.Color();
elseif PaletteMode==2 and index==2 then
PaletteFunctions.Material();
elseif PaletteMode==2 and index==3 then
PaletteFunctions.Transparency();
elseif PaletteMode==2 and index==4 then
PaletteFunctions.Reflectance();
elseif PaletteMode==3 and index==1 then
PaletteFunctions.Anchor();
elseif PaletteMode==3 and index==2 then
PaletteFunctions.CanCollide();
elseif PaletteMode==3 and index==3 then
PaletteFunctions.FormFactor();
elseif PaletteMode==3 and index==4 then
PaletteFunctions.Shape();
elseif PaletteMode==4 and index==1 then
PaletteFunctions.Surface();
elseif PaletteMode==4 and index==2 then
PaletteFunctions.Velocity();
elseif PaletteMode==4 and index==3 then
PaletteFunctions.RotVelocity();
elseif PaletteMode==4 and index==4 then
PaletteFunctions.Friction();
elseif PaletteMode==5 and index==1 then
PaletteFunctions.Elasticity();
elseif PaletteMode==5 and index==2 then
PaletteFunctions.Utilities();
elseif PaletteMode==5 and index==3 then
PaletteFunctions.Options();
elseif PaletteMode==5 and index==4 then
PaletteFunctions.Help();
end
end

obj7.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[1][1]);
obj8.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[2][1]);
obj9.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[3][1]);
obj10.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[4][1]);
obj11.Image=&quot;http://www.roblox.com/asset/?id=&quot;..tostring(PaletteImages[5][1]);

function HitButton(obj)
if obj==obj3 then
ActivateFunction(1);
elseif obj==obj4 then
ActivateFunction(3);
elseif obj==obj5 then
ActivateFunction(4);
elseif obj==obj6 then
ActivateFunction(2);
elseif obj==obj7 then
PaletteMode=1;
RefreshPalette();
elseif obj==obj8 then
PaletteMode=2;
RefreshPalette();
elseif obj==obj9 then
PaletteMode=3;
RefreshPalette();
elseif obj==obj10 then
PaletteMode=4;
RefreshPalette();
elseif obj==obj11 then
PaletteMode=5;
RefreshPalette();
elseif obj==gui24 then
input(&quot;Group&quot;);
elseif obj==gui25 then
input(&quot;Ungroup&quot;);
elseif obj==gui26 then
input(&quot;Apply&quot;);
elseif obj==gui27 then
input(&quot;Undo&quot;);
elseif obj==gui28 then
input(&quot;Redo&quot;);
elseif obj==gui29 then
input(&quot;Clone&quot;);
elseif obj==gui30 then
input(&quot;Delete&quot;);
elseif obj==gui31 then
input(&quot;Save&quot;);
end
end

obj3.MouseButton1Down:connect(function() HitButton(obj3); end);
obj4.MouseButton1Down:connect(function() HitButton(obj4); end);
obj5.MouseButton1Down:connect(function() HitButton(obj5); end);
obj6.MouseButton1Down:connect(function() HitButton(obj6); end);

obj7.MouseButton1Down:connect(function() HitButton(obj7); end);
obj8.MouseButton1Down:connect(function() HitButton(obj8); end);
obj9.MouseButton1Down:connect(function() HitButton(obj9); end);
obj10.MouseButton1Down:connect(function() HitButton(obj10); end);
obj11.MouseButton1Down:connect(function() HitButton(obj11); end);

gui24.MouseButton1Down:connect(function() HitButton(gui24); end);
gui25.MouseButton1Down:connect(function() HitButton(gui25); end);
gui26.MouseButton1Down:connect(function() HitButton(gui26); end);
gui27.MouseButton1Down:connect(function() HitButton(gui27); end);
gui28.MouseButton1Down:connect(function() HitButton(gui28); end);
gui29.MouseButton1Down:connect(function() HitButton(gui29); end);
gui30.MouseButton1Down:connect(function() HitButton(gui30); end);
gui31.MouseButton1Down:connect(function() HitButton(gui31); end);

RefreshPalette();

--[[gui_drag=nil;
dragger_gui.BackgroundTransparency=.5;
dragger_gui.Parent=obj1;
GuiDrag={
function Down(gui)
dragger_gui.Size=gui.Size;
dragger_gui.BackgroundColor3=gui.BackgroundColor3;
end,
}
gui2.MouseButton1Down:connect(function() gui_drag=gui2; end)
gui4.MouseButton1Down:connect(function() gui_drag=gui2; end)
gui5.MouseButton1Down:connect(function() gui_drag=gui2; end)
]]
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX485">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Reflectance</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Reflectance()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;FunctionData.Reflectance.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;reflectance&quot;);
&#9;&#9;FunctionData.Reflectance.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Reflectance;
&#9;&#9;&#9;if FunctionData.Reflectance.Relative then
&#9;&#9;&#9;&#9;v.Reflectance=math.min(1e8, math.max(0, v.Reflectance+FunctionData.Reflectance.Value));
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;v.Reflectance=math.min(1e8, math.max(0, FunctionData.Reflectance.Value));
&#9;&#9;&#9;end
&#9;&#9;&#9;after[i]=v.Reflectance;
&#9;&#9;end
&#9;&#9;pass_action=false;
&#9;&#9;for i,v in pairs(prior) do
&#9;&#9;&#9;if prior[i]~=after[i] then
&#9;&#9;&#9;&#9;pass_action=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if pass_action then
&#9;&#9;&#9;History.Action(&quot;Reflectance&quot;, parts, prior, after);
&#9;&#9;end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index=0;

FunctionData.Reflectance = FunctionData.Reflectance or {};
FunctionData.Reflectance.Relative = FunctionData.Reflectance.Relative or false;
FunctionData.Reflectance.Value = FunctionData.Reflectance.Value or 0.5;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(214/255,246/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Reflectance&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(227/255,227/255,227/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;RelativeConstant&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,16) obj43.Text=&quot;Constant&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)

obj42.Text = tostring(FunctionData.Reflectance.Value);
obj40.Parent=obj1;
TB.insert(obj41, obj42);

function RefreshButtons()
obj43.Text = FunctionData.Reflectance.Relative and &quot;Relative&quot; or &quot;Constant&quot;;
end

obj43.MouseButton1Down:connect(function()
FunctionData.Reflectance.Relative = not FunctionData.Reflectance.Relative;
RefreshButtons();
end)

RefreshButtons();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX486">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Move</string>
						<string name="Value">function PaletteFunctions.Move()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Move.x = tonumber(obj42.Text) or 0;
&#9;&#9;FunctionData.Move.y = tonumber(obj44.Text) or 0;
&#9;&#9;FunctionData.Move.z = tonumber(obj46.Text) or 0;
&#9;&#9;TB.remove(obj41);
&#9;&#9;TB.remove(obj43);
&#9;&#9;TB.remove(obj45);
&#9;&#9;aabb.Parent=nil;
&#9;&#9;handles.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if pending_target then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;else
&#9;&#9;&#9;Passive(p);
&#9;&#9;end
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if pending_target then
&#9;&#9;&#9;FunctionData.Move.TargetAxis = p[2].Target;
&#9;&#9;&#9;pending_target=false;
&#9;&#9;&#9;if pending_target then
&#9;&#9;&#9;&#9;obj51.Text = &quot;Pending Selection...&quot;;
&#9;&#9;&#9;elseif FunctionData.Move.TargetAxis then
&#9;&#9;&#9;&#9;obj51.Text = &quot;Axes Alignment Chosen&quot;;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;obj51.Text = &quot;No Reference Part&quot;;
&#9;&#9;&#9;end
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;else
&#9;&#9;&#9;aabb.Parent=nil;
&#9;&#9;&#9;handles.Visible=false;
&#9;&#9;&#9;axes_x.Parent=nil;
&#9;&#9;&#9;axes_y.Parent=nil;
&#9;&#9;&#9;axes_z.Parent=nil;
&#9;&#9;&#9;Passive(p);
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;end
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;move&quot;);
&#9;&#9;if FunctionData.Move.TargetAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(((FunctionData.Move.TargetAxis.CFrame - FunctionData.Move.TargetAxis.Position) * CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z)).p) * v.CFrame;
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;elseif FunctionData.Move.WorldAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z) * v.CFrame;
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;elseif not FunctionData.Move.WorldAxis then
&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;prior[i]=v.CFrame;
&#9;&#9;&#9;&#9;v.CFrame = v.CFrame * CFrame.new(FunctionData.Move.x, FunctionData.Move.y, FunctionData.Move.z);
&#9;&#9;&#9;&#9;after[i]=v.CFrame;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Action(&quot;Move&quot;, p, prior, after);
&#9;&#9;pending_target=false;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;aabb.Parent=LocalBin;
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;HandlesUp();
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;&#9;handles.Visible=true;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index = 0;

FunctionData.Move = FunctionData.Move or {};

FunctionData.Move.x = FunctionData.Move.x or 0;
FunctionData.Move.y = FunctionData.Move.y or 0;
FunctionData.Move.z = FunctionData.Move.z or 0;
if FunctionData.Move.WorldAxis==nil then
FunctionData.Move.WorldAxis = true;
end

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(207/255,239/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Move&quot; obj40.Position=UDim2.new(0,243,1,-110) obj40.Size=UDim2.new(0,114,0,110) obj40.Visible=true
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,110,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,110,0,18) obj42.Text=tonumber(FunctionData.Move.x) or 0; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,110,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(151/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,110,0,18) obj44.Text=tonumber(FunctionData.Move.y) or 0; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,110,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,143/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,110,0,18) obj46.Text=tonumber(FunctionData.Move.z) or 0; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;WorldObjAxis&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,110,0,14) obj47.Text=FunctionData.Move.WorldAxis and &quot;World Axis&quot; or &quot;Object Axis&quot;; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;TargetAxis&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,2,0,78) obj51.Size=UDim2.new(0,110,0,14) obj51.Text=FunctionData.Move.TargetAxis and &quot;Axes Alignment Chosen&quot; or &quot;No Reference Part&quot;; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Neg&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,0,94) obj48.Size=UDim2.new(0,35,0,14) obj48.Text=&quot;* -1&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Doub&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,39,0,94) obj49.Size=UDim2.new(0,36,0,14) obj49.Text=&quot;* 2&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Half&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,77,0,94) obj50.Size=UDim2.new(0,35,0,14) obj50.Text=&quot;* .5&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
obj40.Parent=obj1;

obj48.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * -1;
FunctionData.Move.y = (FunctionData.Move.y or 0) * -1;
FunctionData.Move.z = (FunctionData.Move.z or 0) * -1;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * 2;
FunctionData.Move.y = (FunctionData.Move.y or 0) * 2;
FunctionData.Move.z = (FunctionData.Move.z or 0) * 2;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)
obj50.MouseButton1Down:connect(function()
FunctionData.Move.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Move.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Move.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Move.x = (FunctionData.Move.x or 0) * 0.5;
FunctionData.Move.y = (FunctionData.Move.y or 0) * 0.5;
FunctionData.Move.z = (FunctionData.Move.z or 0) * 0.5;
obj42.Text = FunctionData.Move.x;
obj44.Text = FunctionData.Move.y;
obj46.Text = FunctionData.Move.z;
end)

sb=Instance.new(&quot;SelectionBox&quot;);
sb.Name=&quot;PendingDistinguisher&quot;;
sb.Color=Options.ActiveSelectionBoxColor;
sb.Visible=false;
sb.Parent=obj1;
handles=Instance.new(&quot;Handles&quot;);
handles.Color=Options.DragHandlesColor;
handles.Parent=obj1;
aabb=Instance.new(&quot;Part&quot;);
aabb.Anchored=true;
aabb.CanCollide=false;
aabb.Transparency=1;
aabb.Parent=LocalBin;
aabb.Name=&quot;AABB&quot;;

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_x&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_x&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

function UpdateHandles()
&#9;if #HasPermission(GetParts(Selection.Get()),&quot;handles_drag&quot;)==1 and not FunctionData.Move.WorldAxis and not FunctionData.Move.TargetAxis then
&#9;&#9;local p=HasPermission(GetParts(Selection.Get()),&quot;handles_drag&quot;)[1];
&#9;&#9;handles.Adornee=p;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=p.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, p.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=p.CFrame*CFrame.new(0, p.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=p.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, p.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;elseif #Selection.Get()==0 then
&#9;&#9;handles.Adornee=nil;
&#9;&#9;axes_x.Transparency=1;
&#9;&#9;axes_y.Transparency=1;
&#9;&#9;axes_z.Transparency=1;
&#9;elseif FunctionData.Move.TargetAxis then
&#9;&#9;min, max, _min, _max = angledAABB(GetParts(Selection.Get()), FunctionData.Move.TargetAxis.CFrame);
&#9;&#9;aabb.Size = _max - _min;
&#9;&#9;aabb.CFrame = CFrame.new(min:lerp(max, .5)) * (FunctionData.Move.TargetAxis.CFrame - FunctionData.Move.TargetAxis.Position);
&#9;&#9;handles.Adornee=aabb;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=aabb.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, aabb.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=aabb.CFrame*CFrame.new(0, aabb.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=aabb.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, aabb.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;else
&#9;&#9;min, max = getAABB(GetParts(Selection.Get()));
&#9;&#9;aabb.Size = max - min;
&#9;&#9;aabb.CFrame = CFrame.new(min:lerp(max, .5));
&#9;&#9;handles.Adornee=aabb;
&#9;&#9;if Options.ThreeAxes then
&#9;&#9;&#9;axes_x.Transparency=0;
&#9;&#9;&#9;axes_y.Transparency=0;
&#9;&#9;&#9;axes_z.Transparency=0;
&#9;&#9;&#9;axes_x.CFrame=aabb.CFrame*CFrame.Angles(0, 0, -math.pi/2)*CFrame.new(0, aabb.Size.x/2+axes_x.Size.y/2,0);
&#9;&#9;&#9;axes_y.CFrame=aabb.CFrame*CFrame.new(0, aabb.Size.y/2+axes_y.Size.y/2,0);
&#9;&#9;&#9;axes_z.CFrame=aabb.CFrame*CFrame.Angles(math.pi/2, 0, 0)*CFrame.new(0, aabb.Size.z/2+axes_x.Size.y/2,0);
&#9;&#9;end
&#9;end
end;
UpdateHandles();

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

function HandlesUp()
if #original_locations&gt;0 and handles_dragging_parts then
final_locations={};
for i,v in pairs(handles_dragging_parts) do
final_locations[#final_locations + 1] = v.CFrame;
end
History.Action(&quot;Move&quot;, handles_dragging_parts, original_locations, final_locations);
original_locations={};
end
end;

handles_dragging_parts={};
old_distance=0;
original_locations={};
final_locations={};
handles.MouseButton1Down:connect(function()
handles_dragging_parts=HasPermission(GetParts(Selection.Get()), &quot;handles_drag&quot;)
original_locations={};
for i,v in pairs(handles_dragging_parts) do
original_locations[#original_locations + 1] = v.CFrame;
end
old_distance = 0;
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
new_distance = round(dist - old_distance, Options.MoveDragIntervals);
old_distance = old_distance + new_distance;
if new_distance~=0 then
local faces=Vector3.new();
if face==Enum.NormalId.Left then
faces=Vector3.new(-1, 0, 0);
elseif face==Enum.NormalId.Right then
faces=Vector3.new(1, 0, 0);
elseif face==Enum.NormalId.Top then
faces=Vector3.new(0, 1, 0);
elseif face==Enum.NormalId.Bottom then
faces=Vector3.new(0, -1, 0);
elseif face==Enum.NormalId.Front then
faces=Vector3.new(0, 0, -1);
elseif face==Enum.NormalId.Back then
faces=Vector3.new(0, 0, 1);
end
if handles.Adornee==aabb then
for i,v in pairs(handles_dragging_parts) do
v.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(v.CFrame);
end
axes_x.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_x.CFrame);
axes_y.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_y.CFrame);
axes_z.CFrame=CFrame.new(((aabb.CFrame-aabb.Position)*CFrame.new(faces * new_distance)).p)*(axes_z.CFrame);
aabb.CFrame=aabb.CFrame*CFrame.new(faces * new_distance);
else
for i,v in pairs(handles_dragging_parts) do
v.CFrame=v.CFrame*CFrame.new(faces * new_distance);
end
UpdateHandles();
end
end
end)

TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);

obj47.MouseButton1Down:connect(function()
FunctionData.Move.WorldAxis = not FunctionData.Move.WorldAxis;
obj47.Text=FunctionData.Move.WorldAxis and &quot;World Axis&quot; or &quot;Object Axis&quot;;
end)
pending_target = false;
obj51.MouseButton1Down:connect(function()
pending_target = not pending_target;
if pending_target then
sb.Visible=true;
obj51.Text = &quot;Pending Selection...&quot;;
else
sb.Visible=false;
FunctionData.Move.TargetAxis = nil;
obj51.Text = &quot;No Reference Part&quot;;
end
end)

function angledAABB(parts, cframe)
if type(parts)~=&quot;table&quot; then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
if #parts==0 then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
--local min=parts[1].Position
--local max=parts[1].Position
local min=Vector3.new(math.huge, math.huge, math.huge);
local max=Vector3.new(-math.huge, -math.huge, -math.huge);
for i,v in pairs(parts) do
for x=-1,1,2 do
for y=-1,1,2 do
for z=-1,1,2 do
local s=v.Size/2;
local p = (v.CFrame * CFrame.new(x*s.x, y*s.y, z*s.z)).p;
min=Vector3.new(math.min(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(0,math.pi/2,0)).lookVector, p), min.x),math.min(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(math.pi/2,0,0)).lookVector, p), min.y),math.min(DistanceAlongLine(Vector3.new(0,0,0), cframe.lookVector, p), min.z))
max=Vector3.new(math.max(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(0,math.pi/2,0)).lookVector, p), max.x),math.max(DistanceAlongLine(Vector3.new(0,0,0), (cframe*CFrame.Angles(math.pi/2,0,0)).lookVector, p), max.y),math.max(DistanceAlongLine(Vector3.new(0,0,0), cframe.lookVector, p), max.z))
end
end
end
end
return min.x*(cframe*CFrame.Angles(0,math.pi/2,0)).lookVector+min.y*(cframe*CFrame.Angles(math.pi/2,0,0)).lookVector+min.z*cframe.lookVector,max.x*(cframe*CFrame.Angles(0,math.pi/2,0)).lookVector+max.y*(cframe*CFrame.Angles(math.pi/2,0,0)).lookVector+max.z*cframe.lookVector, min, max
end

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX487">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Color</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Color()

mouse_colorCopy = nil;

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;if obj40~=nil then obj40.Parent=nil; end
&#9;&#9;if sb~=nil then sb.Parent=nil; end
&#9;&#9;return;
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;if sb.Visible then
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;for i,v in pairs(FunctionData.Color.ColorList) do
&#9;&#9;&#9;&#9;if v==p[2].Target.BrickColor.Name then
&#9;&#9;&#9;&#9;&#9;FunctionData.Color.Choice = i;
&#9;&#9;&#9;&#9;&#9;RefreshColors();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Passive(p);
&#9;&#9;end
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;mouse_colorCopy = mouse_colorCopy or p[2];
&#9;&#9;if sb.Visible then
&#9;&#9;&#9;sb.Adornee=p[2].Target;
&#9;&#9;end
&#9;&#9;local obj45=obj45;
&#9;&#9;Spawn(function()
&#9;&#9;&#9;mouse_over=mouse_over+1;
&#9;&#9;&#9;obj45.BackgroundTransparency=1;
&#9;&#9;&#9;obj45.TextTransparency=1;
&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;local mo=mouse_over;
&#9;&#9;&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;wait(.75)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj45.Text=p[2].Target.BrickColor.Name;
&#9;&#9;&#9;&#9;&#9;obj45.Position=UDim2.new(0,p[2].X-obj40.AbsolutePosition.x,0,p[2].Y-obj40.AbsolutePosition.y-obj45.AbsoluteSize.y);
&#9;&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;obj45.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj45.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;new={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;color&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.BrickColor;
&#9;&#9;&#9;if FunctionData.Color.Choice&lt;=143 then
&#9;&#9;&#9;&#9;v.BrickColor=BrickColor.new(FunctionData.Color.ColorList[FunctionData.Color.Choice or 10])
&#9;&#9;&#9;elseif FunctionData.Color.Choice==144 then
&#9;&#9;&#9;&#9;--painting a brick while the eyedropper is selected? Using the current mouseOver would be nice...
&#9;&#9;&#9;&#9;if mouse_colorCopy~=nil then
&#9;&#9;&#9;&#9;&#9;if mouse_colorCopy.Target then
&#9;&#9;&#9;&#9;&#9;&#9;v.BrickColor=mouse_colorCopy.Target.BrickColor;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Color.Choice==145 then
&#9;&#9;&#9;&#9;v.BrickColor=BrickColor.new(FunctionData.Color.ColorList[math.random(143)]);
&#9;&#9;&#9;end
&#9;&#9;&#9;new[i]=v.BrickColor;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Color&quot;, parts, prior, new);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

function RefreshColors()
&#9;for i=1,145 do
&#9;&#9;if i~=FunctionData.Color.Choice then
&#9;&#9;&#9;obj41:findFirstChild(i).BorderColor3=Color3.new(0,0,0);
&#9;&#9;else
&#9;&#9;&#9;obj41:findFirstChild(FunctionData.Color.Choice).BorderColor3=Options.SelectedColor;
&#9;&#9;end
&#9;end&#9;
end

FunctionData.Color = FunctionData.Color or {};
FunctionData.Color.ColorList=FunctionData.Color.ColorList or {&quot;Institutional white&quot;,&quot;White&quot;,&quot;Phosph. White&quot;,&quot;Transparent&quot;,&quot;Light stone grey&quot;,&quot;Mid gray&quot;,&quot;Light grey&quot;,&quot;Tr. Brown&quot;,&quot;Light grey metallic&quot;,&quot;Medium stone grey&quot;,&quot;Silver&quot;,&quot;Grey&quot;,&quot;Silver flip/flop&quot;,&quot;Gun metallic&quot;,&quot;Dark grey&quot;,&quot;Dark stone grey&quot;,&quot;Dark grey metallic&quot;,&quot;Black metallic&quot;,&quot;Black&quot;,&quot;Really black&quot;,&quot;Light red&quot;,&quot;Pastel orange&quot;,&quot;Tr. Flu. Reddish orange&quot;,&quot;Medium red&quot;,&quot;Tr. Red&quot;,&quot;Bright red&quot;,&quot;Really red&quot;,&quot;Dusty Rose&quot;,&quot;Dark red&quot;,&quot;Red flip/flop&quot;,&quot;Sand red&quot;,&quot;Light orange&quot;,&quot;Medium orange&quot;,&quot;Warm yellowish orange&quot;,&quot;Bright orange&quot;,&quot;Deep orange&quot;,&quot;Neon orange&quot;,&quot;Flame reddish orange&quot;,&quot;CGA brown&quot;,&quot;Dark orange&quot;,&quot;Br. yellowish orange&quot;,&quot;Br. reddish orange&quot;,&quot;Med. yellowish orange&quot;,&quot;Curry&quot;,&quot;Dark Curry&quot;,&quot;Light orange brown&quot;,&quot;Pastel brown&quot;,&quot;Yellow flip/flop&quot;,&quot;Light brick yellow&quot;,&quot;Brown&quot;,&quot;Nougat&quot;,&quot;Dark nougat&quot;,&quot;Earth orange&quot;,&quot;Reddish brown&quot;,&quot;Rust&quot;,&quot;Gold&quot;,&quot;Earth yellow&quot;,&quot;Brick yellow&quot;,&quot;Lig. Yellowich orange&quot;,&quot;Pastel yellow&quot;,&quot;Light yellow&quot;,&quot;Cool yellow&quot;,&quot;Tr. Yellow&quot;,&quot;Tr. Flu. Green&quot;,&quot;Tr. Flu. Yellow&quot;,&quot;Flame yellowish orange&quot;,&quot;Fire Yellow&quot;,&quot;Bright yellow&quot;,&quot;New Yeller&quot;,&quot;Sand yellow&quot;,&quot;Sand yellow metallic&quot;,&quot;Lig. yellowish green&quot;,&quot;Med. yellowish green&quot;,&quot;Olive&quot;,&quot;Grime&quot;,&quot;Faded green&quot;,&quot;Neon green&quot;,&quot;Light green (Mint)&quot;,&quot;Br. yellowish green&quot;,&quot;Lime green&quot;,&quot;Bright green&quot;,&quot;Camo&quot;,&quot;Dark green&quot;,&quot;Earth green&quot;,&quot;Pastel green&quot;,&quot;Medium green&quot;,&quot;Sand green&quot;,&quot;Tr. Green&quot;,&quot;Lemon metalic&quot;,&quot;Light blue&quot;,&quot;Tr. Lg blue&quot;,&quot;Tr. Flu. Blue&quot;,&quot;Light bluish green&quot;,&quot;Light Royal blue&quot;,&quot;Pastel light blue&quot;,&quot;Light bluish violet&quot;,&quot;Pastel blue-green&quot;,&quot;Pastel Blue&quot;,&quot;Turquoise&quot;,&quot;Med. bluish green&quot;,&quot;Medium blue&quot;,&quot;Dove blue&quot;,&quot;Tr. Blue&quot;,&quot;Toothpaste&quot;,&quot;Teal&quot;,&quot;Cyan&quot;,&quot;Bright bluish green&quot;,&quot;Bright blue&quot;,&quot;Really blue&quot;,&quot;Navy blue&quot;,&quot;Earth blue&quot;,&quot;Medium Royal blue&quot;,&quot;Medium bluish violet&quot;,&quot;Royal blue&quot;,&quot;Bright bluish violet&quot;,&quot;Deep blue&quot;,&quot;Dark Royal blue&quot;,&quot;Sand blue metallic&quot;,&quot;Sand blue&quot;,&quot;Tr. Bright bluish violet&quot;,&quot;Pastel violet&quot;,&quot;Light lilac&quot;,&quot;Alder&quot;,&quot;Lilac&quot;,&quot;Reddish lilac&quot;,&quot;Lavender&quot;,&quot;Royal purple&quot;,&quot;Bright violet&quot;,&quot;Tr. Medi. reddish violet&quot;,&quot;Light reddish violet&quot;,&quot;Light purple&quot;,&quot;Tr. Flu. Red&quot;,&quot;Light pink&quot;,&quot;Pink&quot;,&quot;Hot pink&quot;,&quot;Magenta&quot;,&quot;Bright purple&quot;,&quot;Med. reddish violet&quot;,&quot;Bright reddish lilac&quot;,&quot;Bright reddish violet&quot;,&quot;Medium lilac&quot;,&quot;Sand violet metallic&quot;,&quot;Sand violet&quot;,&quot;Eyedropper&quot;,&quot;Random Color&quot;}
FunctionData.Color.Choice = FunctionData.Color.Choice or 10;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Color&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,583,0,103)
obj41=Instance.new(&quot;Frame&quot;) obj41.BackgroundColor3=Color3.new(255/255,176/255,0/255) obj41.BackgroundTransparency=1 obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;Palette&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,-3,0,-3) obj41.Size=UDim2.new(0,590,0,110)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(180/255,179/255,182/255) obj42.Image=&quot;http://www.roblox.com/asset/?id=34254577&quot; obj42.Name=&quot;145&quot; obj42.Parent=obj41 obj42.Position=UDim2.new(0,565,0,85) obj42.Size=UDim2.new(0,19,0,19)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(179/255,178/255,181/255) obj43.Image=&quot;http://www.roblox.com/asset/?id=34254562&quot; obj43.Name=&quot;144&quot; obj43.Parent=obj41 obj43.Position=UDim2.new(0,545,0,85) obj43.Size=UDim2.new(0,19,0,19)
obj45=Instance.new(&quot;TextLabel&quot;); obj45.BackgroundColor3=Options.ToolTipColor; obj45.Size=UDim2.new(0, 140, 0, 30); obj45.TextWrap=true; obj45.BackgroundTransparency=1; obj45.TextTransparency=1; obj45.Parent=obj40

obj42.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj42.Name);
RefreshColors();
end)
obj43.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj43.Name);
sb.Visible=true;
RefreshColors();
end)

sb=Instance.new(&quot;SelectionBox&quot;);
sb.Name=&quot;ColorEyedropper&quot;;
sb.Color=Options.ActiveSelectionBoxColor;
sb.Visible=false;
sb.Parent=obj1;

mouse_over=0;

for i=0,142,1 do
local obj44=Instance.new(&quot;TextButton&quot;)
obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255)
obj44.BorderColor3=Color3.new(8/255,8/255,8/255)
obj44.Name=tostring(i+1)
obj44.Position=UDim2.new(0,5+(i%29)*20,0,5+(math.floor(i/29))*20)
obj44.Size=UDim2.new(0,19,0,19)
obj44.Text=&quot;&quot;
obj44.BackgroundColor3=BrickColor.new(FunctionData.Color.ColorList[i+1]).Color
obj44.MouseButton1Down:connect(function()
FunctionData.Color.Choice=tonumber(obj44.Name);
RefreshColors()
end)
obj44.MouseMoved:connect(function(x, y)
mouse_over=mouse_over+1;
obj45.BackgroundTransparency=1;
obj45.TextTransparency=1;
local mo=mouse_over;
if Options.ToolTipText==&quot;on&quot; then
wait(.75)
end
if mo==mouse_over then
obj45.Text=FunctionData.Color.ColorList[tonumber(obj44.Name)];
obj45.Position=UDim2.new(0,x-obj40.AbsolutePosition.x,0,y-obj40.AbsolutePosition.y-obj45.AbsoluteSize.y);
if Options.ToolTipText==&quot;immediate&quot; then
obj45.BackgroundTransparency=0;
obj45.TextTransparency=0;
end
end
if Options.ToolTipText==&quot;on&quot; then
for transparency=1,0,-.05 do
if mo==mouse_over then
obj45.BackgroundTransparency=transparency;
obj45.TextTransparency=transparency;
wait();
end
end
if mo==mouse_over then
obj45.BackgroundTransparency=0;
obj45.TextTransparency=0;
end
end
end)
obj44.Parent=obj41
end
obj40.Parent=obj1;

RefreshColors();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX488">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Passive</string>
						<string name="Value">--[[ Passive ]]

Shortcuts={
}

LastClick=tick();
Click=1;
PartClicked=nil;
SelectedPart=2;
LassoSelect=false;

lasso=Instance.new(&quot;Frame&quot;, gui);
lasso.BackgroundColor3=Color3.new(.2, .6, 1);
lasso.BorderColor3=Color3.new(0, 0, 0);
lasso.BackgroundTransparency=.8;
lasso.Visible=false;

function Passive(p)
&#9;c=p[1];
&#9;if c==&quot;KeyDown&quot; then
&#9;&#9;keys.down(string.byte(p[3]));
&#9;&#9;if string.byte(p[3])==13 then
&#9;&#9;&#9;TB.enter();
&#9;&#9;end
&#9;&#9;if p[3]==&quot;r&quot; and not keys.check(48) then
&#9;&#9;&#9;Drag.Rotate(Enum.Axis.Y);
&#9;&#9;elseif p[3]==&quot;t&quot; and not keys.check(48) then
&#9;&#9;&#9;Drag.Rotate(Enum.Axis.X);
&#9;&#9;end
&#9;&#9;if p[3]==&quot;z&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui27);
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;&#9;HitButton(obj4);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;r&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui28);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;g&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui24);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;u&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui25);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;c&quot; then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui29);
&#9;&#9;&#9;end
&#9;&#9;elseif string.byte(p[3])==8 then
&#9;&#9;&#9;if keys.check(48) then
&#9;&#9;&#9;&#9;HitButton(gui30);
&#9;&#9;&#9;end
&#9;&#9;elseif p[3]==&quot;q&quot; then
&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;HitButton(obj3);
&#9;&#9;elseif p[3]==&quot;e&quot; then
&#9;&#9;&#9;HitButton(obj7);
&#9;&#9;&#9;HitButton(obj6);
&#9;&#9;end
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;keys.up(string.byte(p[3]));
&#9;elseif c==&quot;Button1Down&quot; then
&#9;&#9;TB.enter();
&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;if tick()-LastClick&gt;Options.DoubleClickSpeed or PartClicked==nil or p[2].Target~=PartClicked then
&#9;&#9;&#9;&#9;if not Selection.Check(p[2].Target) and keys.check(48) and Permission(p[2].Target, &quot;select&quot;) then
&#9;&#9;&#9;&#9;&#9;Selection.Add(p[2].Target);
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=1;
&#9;&#9;&#9;&#9;elseif Selection.Check(p[2].Target) and keys.check(48) then
&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[2].Target);
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=0;
&#9;&#9;&#9;&#9;elseif Selection.Check(p[2].Target) and not keys.check(48) and Permission(p[2].Target, &quot;drag&quot;) then
&#9;&#9;&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;&#9;&#9;&#9;SelectedPart=2;
&#9;&#9;&#9;&#9;&#9;Drag.Down(p[2].Target, (p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p, HasPermission(GetParts(Selection.Get()), &quot;drag&quot;));
&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;elseif not Selection.Check(p[2].Target) and not keys.check(48) and Permission(p[2].Target, &quot;select&quot;) then
&#9;&#9;&#9;&#9;&#9;PartClicked=p[2].Target;
&#9;&#9;&#9;&#9;&#9;SelectedPart=1;
&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;Selection.Add(p[2].Target);
&#9;&#9;&#9;&#9;&#9;if Permission(p[2].Target, &quot;drag&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;Drag.Down(p[2].Target, (p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p, HasPermission(GetParts(Selection.Get()), &quot;drag&quot;));
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;elseif not Selection.Check(p[2].Target) and not p[2].Target.Locked and Permission(p[2].Target, &quot;clone&quot;) then
&#9;&#9;&#9;&#9;&#9;--clone the part.
&#9;&#9;&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;&#9;&#9;local offset=(p[2].Target.CFrame:inverse()*CFrame.new(p[2].Hit.p)).p;
&#9;&#9;&#9;&#9;&#9;&#9;local k=p[2].Target:clone();
&#9;&#9;&#9;&#9;&#9;&#9;k.Name=&quot;BlobbyblobBuild_&quot;..player.Name;
&#9;&#9;&#9;&#9;&#9;&#9;if Options.CloneShift then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;x=math.abs((k.CFrame*CFrame.Angles(0,math.pi/2,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;y=math.abs((k.CFrame*CFrame.Angles(math.pi/2,0,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;z=math.abs(k.CFrame.lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (y &gt;= x and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.y,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif (x &gt;= y and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.x,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;elseif (z &gt;= x and z &gt;= y) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;k.CFrame=CFrame.new(0,k.Size.z,0)*k.CFrame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;k.Parent=workspace;
&#9;&#9;&#9;&#9;&#9;&#9;History.Action(&quot;Clone&quot;, {k}, {{k, k.CFrame}}); --send a copy so that if I end up deleting it (via undo), I can pull up another copy.
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(k);
&#9;&#9;&#9;&#9;&#9;&#9;Drag.Down(k, offset, {k});
&#9;&#9;&#9;&#9;&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;&#9;&#9;lasso.Size=UDim2.new(0,0,0,0);
&#9;&#9;&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;&#9;&#9;&#9;lasso.Visible=true;
&#9;&#9;&#9;&#9;&#9;start_pos=Vector2.new(p[2].X, p[2].Y);
&#9;&#9;&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p
&#9;&#9;&#9;&#9;&#9;slope1=Vector2.new(rel.x/-rel.z, rel.y/-rel.z)
&#9;&#9;&#9;&#9;&#9;LassoSelect=true;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Click=1;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;--A double click! :o
&#9;&#9;&#9;&#9;Click=Click+1;
&#9;&#9;&#9;&#9;if SelectedPart==1 and PartClicked~=nil then
&#9;&#9;&#9;&#9;&#9;Targ=PartClicked;
&#9;&#9;&#9;&#9;&#9;i=1; while i&lt;Click and Targ.Parent~=workspace do i=i+1; Targ=Targ.Parent; end
&#9;&#9;&#9;&#9;&#9;Selection.Add(Targ);
&#9;&#9;&#9;&#9;elseif SelectedPart==0 then
&#9;&#9;&#9;&#9;&#9;Targ=PartClicked;
&#9;&#9;&#9;&#9;&#9;for i=2,Click do Targ=Targ.Parent; end
&#9;&#9;&#9;&#9;&#9;Selection.Remove(Targ);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;lasso.Size=UDim2.new(0,0,0,0);
&#9;&#9;&#9;lasso.Visible=true;
&#9;&#9;&#9;start_pos=Vector2.new(p[2].X, p[2].Y);
&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p
&#9;&#9;&#9;slope1=Vector2.new(rel.x/-rel.z, rel.y/-rel.z)
&#9;&#9;&#9;LassoSelect=true;
&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;Click=1;
&#9;&#9;&#9;PartClicked=nil;
&#9;&#9;end
&#9;&#9;LastClick=tick();
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;Drag.Move(p[2].UnitRay);
&#9;&#9;if p[3]==nil then p[2].Icon=GetIcon(p[2].Target); end
&#9;&#9;if lasso.Visible then
&#9;&#9;&#9;lasso.Position=UDim2.new(0, math.min(p[2].X, start_pos.x), 0, math.min(p[2].Y, start_pos.y));
&#9;&#9;&#9;lasso.Size=UDim2.new(0, math.abs(p[2].X-start_pos.x), 0, math.abs(p[2].Y-start_pos.y));
&#9;&#9;end
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;Drag.Up();
&#9;&#9;p[2].Icon=GetIcon(p[2].Target);&#9;
&#9;&#9;if LassoSelect then
&#9;&#9;&#9;lasso.Visible=false;
&#9;&#9;&#9;LassoSelect=false;
&#9;&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(p[2].Hit.p)).p 
&#9;&#9;&#9;search(slope1, Vector2.new(rel.x/-rel.z, rel.y/-rel.z), p[2]);
&#9;&#9;end
&#9;elseif c==&quot;Undo&quot; then
&#9;&#9;History.Undo();
&#9;elseif c==&quot;Redo&quot; then
&#9;&#9;History.Redo();
&#9;elseif c==&quot;Group&quot; then
&#9;&#9;if #Selection.Get()&gt;1 then
&#9;&#9;&#9;local max_parent=Selection.Get()[1];
&#9;&#9;&#9;local g=Instance.new(&quot;Model&quot;);
&#9;&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;&#9;if v.Parent:IsAncestorOf(max_parent) then
&#9;&#9;&#9;&#9;&#9;max_parent = v.Parent;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;v.Parent=g;
&#9;&#9;&#9;end
&#9;&#9;&#9;g.Parent=max_parent;
&#9;&#9;&#9;Selection.Clear();
&#9;&#9;&#9;Selection.Add(g);
&#9;&#9;end
&#9;elseif c==&quot;Ungroup&quot; then
&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;if v:IsA(&quot;Model&quot;) then
&#9;&#9;&#9;&#9;for a,b in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;b.Parent=v.Parent;
&#9;&#9;&#9;&#9;&#9;Selection.Add(b);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif c==&quot;Delete&quot; then
&#9;&#9;parents={};
&#9;&#9;items=HasPermission(GetParts(Selection.Get()), &quot;delete&quot;);
&#9;&#9;for i,v in pairs(items) do
&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;parents[#parents+1]=v.Parent;
&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Delete&quot;, items, parents);
&#9;elseif c==&quot;Clone&quot; then
&#9;&#9;local items={};
&#9;&#9;local refs={};
&#9;&#9;upward=0;
&#9;&#9;if Options.CloneShift then
&#9;&#9;&#9;for i,p in pairs(GetParts(Selection.Get())) do
&#9;&#9;&#9;&#9;x=math.abs((p.CFrame*CFrame.Angles(0,math.pi/2,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;y=math.abs((p.CFrame*CFrame.Angles(math.pi/2,0,0)).lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;z=math.abs(p.CFrame.lookVector:Dot(Vector3.new(0,1,0)));
&#9;&#9;&#9;&#9;if (y &gt;= x and y &gt;= z) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.y);
&#9;&#9;&#9;&#9;elseif (x &gt;= y and x &gt;= z) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.x);
&#9;&#9;&#9;&#9;elseif (z &gt;= x and z &gt;= y) then
&#9;&#9;&#9;&#9;&#9;upward=math.max(upward, p.Size.z);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i,v in pairs(Selection.Get()) do
&#9;&#9;&#9;local p=v:clone();
&#9;&#9;&#9;p.Parent=workspace;
&#9;&#9;&#9;items[#items+1]=p;
&#9;&#9;end
&#9;&#9;for i,v in pairs(GetParts(items)) do
&#9;&#9;&#9;v.CFrame = CFrame.new(0, upward, 0) * v.CFrame;
&#9;&#9;&#9;v.Name=&quot;BlobbyblobBuild_&quot;..player.Name;
&#9;&#9;&#9;refs[#refs+1]={v, v.CFrame};
&#9;&#9;end
&#9;&#9;Selection.Clear()
&#9;&#9;for i,v in pairs(items) do
&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;end
&#9;&#9;History.Action(&quot;Clone&quot;, items, refs);
&#9;elseif c==&quot;Save&quot; then
&#9;&#9;local s=script:findFirstChild(&quot;Save&quot;);
&#9;&#9;if s~=nil then
&#9;&#9;&#9;local s=s:clone();
&#9;&#9;&#9;s.Disabled=false;
&#9;&#9;&#9;s.Parent=game.Players.LocalPlayer.Backpack;
&#9;&#9;end
&#9;end

local round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end
&#9;--Almost a function: Refresh Dock.
&#9;if Options.DockVisible then
&#9;&#9;gui1.Visible=true;
&#9;&#9;if #GetParts(Selection.Get())==1 then
&#9;&#9;part=GetParts(Selection.Get())[1];
&#9;&#9;local x,y,z,r00,r01,r02,r10,r11,r12,r20,r21,r22=part.CFrame:components();
&#9;&#9;gui2.Text=round(x, 1e-6);
&#9;&#9;gui4.Text=round(y, 1e-6);
&#9;&#9;gui5.Text=round(z, 1e-6);
&#9;&#9;gui7.Text=part.Size.x;
&#9;&#9;gui8.Text=part.Size.y;
&#9;&#9;gui9.Text=part.Size.z;
&#9;&#9;gui11.Text=round(r00, 1e-5);
&#9;&#9;gui12.Text=round(r01, 1e-5);
&#9;&#9;gui13.Text=round(r02, 1e-5);
&#9;&#9;gui14.Text=round(r10, 1e-5);
&#9;&#9;gui15.Text=round(r11, 1e-5);
&#9;&#9;gui16.Text=round(r12, 1e-5);
&#9;&#9;gui17.Text=round(r20, 1e-5);
&#9;&#9;gui18.Text=round(r21, 1e-5);
&#9;&#9;gui19.Text=round(r22, 1e-5);
&#9;&#9;x,y,z=part.CFrame:toEulerAnglesXYZ();
&#9;&#9;gui21.Text=round(math.deg(x), 1e-5);
&#9;&#9;gui22.Text=round(math.deg(y), 1e-5);
&#9;&#9;gui23.Text=round(math.deg(z), 1e-5);
&#9;&#9;else
&#9;&#9;&#9;gui2.Text=&quot;&quot;;
&#9;&#9;&#9;gui4.Text=&quot;&quot;;
&#9;&#9;&#9;gui5.Text=&quot;&quot;;
&#9;&#9;&#9;gui7.Text=&quot;&quot;;
&#9;&#9;&#9;gui8.Text=&quot;&quot;;
&#9;&#9;&#9;gui9.Text=&quot;&quot;;
&#9;&#9;&#9;gui11.Text=&quot;&quot;;
&#9;&#9;&#9;gui12.Text=&quot;&quot;;
&#9;&#9;&#9;gui13.Text=&quot;&quot;;
&#9;&#9;&#9;gui14.Text=&quot;&quot;;
&#9;&#9;&#9;gui15.Text=&quot;&quot;;
&#9;&#9;&#9;gui16.Text=&quot;&quot;;
&#9;&#9;&#9;gui17.Text=&quot;&quot;;
&#9;&#9;&#9;gui18.Text=&quot;&quot;;
&#9;&#9;&#9;gui19.Text=&quot;&quot;;
&#9;&#9;&#9;gui21.Text=&quot;&quot;;
&#9;&#9;&#9;gui22.Text=&quot;&quot;;
&#9;&#9;&#9;gui23.Text=&quot;&quot;;
&#9;&#9;end
&#9;else
&#9;&#9;gui1.Visible=false
&#9;end
end


--The two following functions were made by weaselman50. Don&apos;t ask me how they work. :P
function check(rel, slope1, slope2, Axis)
&#9;if rel[Axis]&gt;slope2[Axis]*-rel.z and slope1[Axis]&gt;slope2[Axis] then 
&#9;&#9;return rel[Axis]&lt;slope1[Axis]*-rel.z
&#9;elseif slope1[Axis]&lt;slope2[Axis] and rel[Axis]&lt;slope2[Axis]*-rel.z then
&#9;&#9;return rel[Axis]&gt;slope1[Axis]*-rel.z
&#9;else
&#9;&#9;return false
&#9;end
end
function search(slope1, slope2, mouse)
&#9;print(&quot;Search called&quot;);
&#9;print(&quot;Slope1: &quot;, slope1, &quot; - Slope2: &quot;, slope2);
&#9;parts=HasPermission(GetParts(workspace:GetChildren()), &quot;select&quot;);
&#9;for i, v in pairs(parts) do
&#9;&#9;local rel=(workspace.CurrentCamera.CoordinateFrame:inverse()*CFrame.new(v.Position)).p
&#9;&#9;if rel.z&lt;0 and check(rel, slope1, slope2, &quot;x&quot;) and check(rel, slope1, slope2, &quot;y&quot;) then
&#9;&#9;&#9;Selection.Add(v)
&#9;&#9;end
&#9;end
end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX489">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Material</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Material()

mouse_over=0;
function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;local obj50=obj50;
&#9;&#9;Spawn(function()
&#9;&#9;&#9;mouse_over=mouse_over+1;
&#9;&#9;&#9;obj50.BackgroundTransparency=1;
&#9;&#9;&#9;obj50.TextTransparency=1;
&#9;&#9;&#9;if p[2].Target~=nil then
&#9;&#9;&#9;&#9;local mo=mouse_over;
&#9;&#9;&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;wait(.75)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj50.Text=string.sub(tostring(p[2].Target.Material), 15);
&#9;&#9;&#9;&#9;&#9;obj50.Position=UDim2.new(0,p[2].X-obj40.AbsolutePosition.x,0,p[2].Y-obj40.AbsolutePosition.y-obj50.AbsoluteSize.y);
&#9;&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;new=nil;
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;material&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Material;
&#9;&#9;&#9;v.Material = FunctionData.Material.Choice;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Material&quot;, parts, prior, FunctionData.Material.Choice);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Material = FunctionData.Material or {};
FunctionData.Material.Choice = FunctionData.Material.Choice or Enum.Material.Plastic;
obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Material&quot; obj40.Position=UDim2.new(0,243,1,-200) obj40.Size=UDim2.new(0,344,0,40)
obj41=Instance.new(&quot;ImageButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Image=&quot;http://www.roblox.com/Asset/?ID=16170001&quot; obj41.Name=&quot;Concrete&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,192,0,2) obj41.Size=UDim2.new(0,36,0,36)
obj42=Instance.new(&quot;ImageButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Image=&quot;http://www.roblox.com/Asset/?ID=16169978&quot; obj42.Name=&quot;CorrodedMetal&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,116,0,2) obj42.Size=UDim2.new(0,36,0,36)
obj43=Instance.new(&quot;ImageButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Image=&quot;http://www.roblox.com/Asset/?ID=16169998&quot; obj43.Name=&quot;DiamondPlate&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,230,0,2) obj43.Size=UDim2.new(0,36,0,36)
obj44=Instance.new(&quot;ImageButton&quot;) obj44.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Image=&quot;http://www.roblox.com/Asset/?ID=16169991&quot; obj44.Name=&quot;Foil&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,78,0,2) obj44.Size=UDim2.new(0,36,0,36)
obj45=Instance.new(&quot;ImageButton&quot;) obj45.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Image=&quot;http://www.roblox.com/Asset/?ID=16169988&quot; obj45.Name=&quot;Grass&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,2) obj45.Size=UDim2.new(0,36,0,36)
obj46=Instance.new(&quot;ImageButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Image=&quot;http://www.roblox.com/Asset/?ID=16169985&quot; obj46.Name=&quot;Ice&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,306,0,2) obj46.Size=UDim2.new(0,36,0,36)
obj47=Instance.new(&quot;ImageButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Image=&quot;http://www.roblox.com/Asset/?ID=16169981&quot; obj47.Name=&quot;Plastic&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,40,0,2) obj47.Size=UDim2.new(0,36,0,36)
obj48=Instance.new(&quot;ImageButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Image=&quot;http://www.roblox.com/Asset/?ID=16169975&quot; obj48.Name=&quot;Slate&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,268,0,2) obj48.Size=UDim2.new(0,36,0,36)
obj49=Instance.new(&quot;ImageButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Image=&quot;http://www.roblox.com/Asset/?ID=16169971&quot; obj49.Name=&quot;Wood&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,154,0,2) obj49.Size=UDim2.new(0,36,0,36)
obj40.Parent=obj1;
obj50=Instance.new(&quot;TextLabel&quot;); obj50.BackgroundColor3=Options.ToolTipColor; obj50.Size=UDim2.new(0, 140, 0, 30); obj50.TextWrap=true; obj50.BackgroundTransparency=1; obj50.TextTransparency=1; obj50.Parent=obj40

function RefreshMaterials()
for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48, obj49}) do
if Enum.Material[v.Name] == FunctionData.Material.Choice then
v.BorderColor3=Options.SelectedColor;
else
v.BorderColor3=Color3.new(0,0,0);
end
end
end

for i,v in pairs({obj41, obj42, obj43, obj44, obj45, obj46, obj47, obj48, obj49}) do
v.MouseButton1Down:connect(function()
FunctionData.Material.Choice = Enum.Material[v.Name];
RefreshMaterials();
end)
v.MouseMoved:connect(function(x,y)
&#9;local obj50=obj50;
&#9;mouse_over=mouse_over+1;
&#9;obj50.BackgroundTransparency=1;
&#9;obj50.TextTransparency=1;
&#9;if true then
&#9;&#9;local mo=mouse_over;
&#9;&#9;if mo==mouse_over and Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;wait(.75)
&#9;&#9;end
&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;obj50.Text=v.Name;
&#9;&#9;&#9;obj50.Position=UDim2.new(0,x-obj40.AbsolutePosition.x,0,y-obj40.AbsolutePosition.y-obj50.AbsoluteSize.y);
&#9;&#9;&#9;if Options.ToolTipText==&quot;immediate&quot; then
&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if Options.ToolTipText==&quot;on&quot; then
&#9;&#9;&#9;for transparency=1,0,-.05 do
&#9;&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;obj50.TextTransparency=transparency;
&#9;&#9;&#9;&#9;&#9;wait();
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if mo==mouse_over then
&#9;&#9;&#9;&#9;obj50.BackgroundTransparency=0;
&#9;&#9;&#9;&#9;obj50.TextTransparency=0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)
end

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX490">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">TextBoxOOP</string>
						<string name="Value">--[[
void TB.insert(textbox as TextBox, textbutton as TextButton)
void TB.enter()
void TB.remove(item as TextBox, item as TextButton)
void TB.clean()
]]

TB={
&#9;insert=function(textbox,textbutton)
&#9;&#9;local cxn1=textbutton.MouseEnter:connect(function()
&#9;&#9;&#9;textbox.Visible=true;
&#9;&#9;&#9;TB.current=textbutton;
&#9;&#9;end);
&#9;&#9;local cxn2=textbutton.MouseLeave:connect(function()
&#9;&#9;wait()
&#9;&#9;textbox.Visible=false;
&#9;&#9;&#9;if TB.current==textbutton then
&#9;&#9;&#9;&#9;TB.current=nil;
&#9;&#9;&#9;end
&#9;&#9;end);
&#9;&#9;local cxn3=textbutton.MouseButton1Down:connect(function()
&#9;&#9;&#9;TB.enter();
&#9;&#9;end);
&#9;&#9;table.insert(TB.items,{textbox,textbutton,cxn1,cxn2,cxn3});
&#9;end,

&#9;enter=function()
&#9;&#9;for i,v in pairs(TB.items) do
&#9;&#9;&#9;if v[2]==TB.current then
&#9;&#9;&#9;&#9;TB.current.Text=v[1].Text;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;remove=function(item)
&#9;&#9;for i,v in pairs(TB.items) do
&#9;&#9;&#9;if item==v[1] or item==v[2] then
&#9;&#9;&#9;&#9;v[3]:disconnect();
&#9;&#9;&#9;&#9;v[4]:disconnect();
&#9;&#9;&#9;&#9;v[5]:disconnect();
&#9;&#9;&#9;&#9;table.remove(TB.items,i);
&#9;&#9;&#9;&#9;if TB.current==v[2] then
&#9;&#9;&#9;&#9;&#9;TB.current=nil;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;clean=function()
&#9;&#9;for i=#TB.items,1,-1 do
&#9;&#9;&#9;if TB.items[i][1].Parent==nil and TB.items[i][2].Parent==nil then
&#9;&#9;&#9;&#9;TB.items[i][3]:disconnect();
&#9;&#9;&#9;&#9;TB.items[i][4]:disconnect();
&#9;&#9;&#9;&#9;TB.items[i][5]:disconnect();
&#9;&#9;&#9;&#9;table.remove(TB.items,i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;current=nil,

&#9;items={},
};

</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX491">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">SelectionOOP</string>
						<string name="Value">--[[ Selection

void Selection.Add(p as Part)
void Selection.Remove(p as Part)
bool Selection.Check(p as Part)
void Selection.Clear()
table Selection.Get() --returns all selected parts

]]

function getAABB(parts)
if type(parts)~=&quot;table&quot; then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
if #parts==0 then return Vector3.new(0,0,0), Vector3.new(0,0,0) end
local min=parts[1].Position
local max=parts[1].Position
for i,v in pairs(parts) do
for x=-1,1,2 do
for y=-1,1,2 do
for z=-1,1,2 do
local s=v.Size/2;
local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
min=Vector3.new(math.min(p.x,min.x),math.min(p.y,min.y),math.min(p.z,min.z));
max=Vector3.new(math.max(p.x,max.x),math.max(p.y,max.y),math.max(p.z,max.z));
end
end
end
end
return min,max
end

function DistanceAlongLine(lineStart, lineDirection, point) 
return ((point - lineStart):Dot(lineDirection))  / (lineDirection:Dot(lineDirection)) --(lineStart + distanceAlongLine * lineDirection) 
end 

Selx={part, box, bb};
Selx.Remove=function(self)
&#9;if self.box~=nil then
&#9;&#9;self.box.Parent=nil;
&#9;end
&#9;if self.bb~=nil then
&#9;&#9;self.bb.Parent=nil;
&#9;end
end;
Selx.new=function()
local o={};
setmetatable(o, {__index = Selx});
return o;
end;

Selection={Parts={},};
Selection.Add=function(p)
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;if v.part==p or v.part:IsAncestorOf(p) then
&#9;&#9;&#9;return nil;
&#9;&#9;end
&#9;end
&#9;for i=#Selection.Parts, 1, -1 do
&#9;&#9;if Selection.Parts[i].part:IsDescendantOf(p) then
&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;end
&#9;end
&#9;e=Selx.new();
&#9;e.part = p;
&#9;e.box = Instance.new(&quot;SelectionBox&quot;);
&#9;e.box.Adornee = p;
&#9;e.box.Color = Options.BoundingBoxColor;
&#9;e.box.Parent = gui;
&#9;Selection.Parts[#Selection.Parts+1] = e;
end;
Selection.Remove=function(p)
&#9;done = false;
&#9;while not done do
&#9;&#9;done = true;
&#9;&#9;for i = #Selection.Parts, 1, -1 do
&#9;&#9;&#9;if Selection.Parts[i].part==p then
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;&#9;done=true;
&#9;&#9;&#9;&#9;i = 0;
&#9;&#9;&#9;elseif Selection.Parts[i].part:IsAncestorOf(p) then
&#9;&#9;&#9;&#9;for a,v in pairs(Selection.Parts[i].part:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;e=Selx.new();
&#9;&#9;&#9;&#9;&#9;e.part = v;
&#9;&#9;&#9;&#9;&#9;e.box = Instance.new(&quot;SelectionBox&quot;);
&#9;&#9;&#9;&#9;&#9;e.box.Adornee = v;
&#9;&#9;&#9;&#9;&#9;e.box.Color = Options.BoundingBoxColor;
&#9;&#9;&#9;&#9;&#9;e.box.Parent = gui;
&#9;&#9;&#9;&#9;&#9;Selection.Parts[#Selection.Parts+1] = e;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;done=false;
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;elseif Selection.Parts[i].part:IsDescendantOf(p) then
&#9;&#9;&#9;&#9;Selection.Parts[i]:Remove();
&#9;&#9;&#9;&#9;table.remove(Selection.Parts, i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end;
Selection.Check=function(p)
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;if v.part==p or v.part:IsAncestorOf(p) then
&#9;&#9;&#9;return true;
&#9;&#9;end
&#9;end
end;
Selection.Get=function()
&#9;parts={};
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;parts[#parts+1]=v.part;
&#9;end
&#9;return parts;
end;
Selection.Clear=function()
&#9;for i,v in pairs(Selection.Parts) do
&#9;&#9;v:Remove();
&#9;end
&#9;Selection.Parts={};
end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX492">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">KeyStrokeOOP</string>
						<string name="Value">--[[

void keys.down(k as Integer)
void keys.up(k as Integer)
bool keys.check(k as Integer)

]]

keys={

&#9;down=function(k)
&#9;&#9;table.insert(keys.list,k);
&#9;end,

&#9;up=function(k)
&#9;&#9;for i=#keys.list,1,-1 do
&#9;&#9;&#9;if keys.list[i]==k then
&#9;&#9;&#9;&#9;table.remove(keys.list,i);
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end,

&#9;check=function(k)
&#9;&#9;for i,v in pairs(keys.list) do
&#9;&#9;&#9;if k==v then
&#9;&#9;&#9;&#9;return true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return false;
&#9;end,

&#9;list={}
}
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX493">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Rotate</string>
						<string name="Value">function PaletteFunctions.Rotate()

tab_index = 0;
function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Button1Down&quot; then
&#9;&#9;if pending_selection then
&#9;&#9;&#9;FunctionData.Rotate.Around = p[2].Target;
&#9;&#9;&#9;pending_selection = false;
&#9;&#9;&#9;sb.Visible=false;
&#9;&#9;&#9;HandlesUp();
&#9;&#9;&#9;UpdateButtons();
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;else
&#9;&#9;&#9;axes_x.Parent=nil;
&#9;&#9;&#9;axes_y.Parent=nil;
&#9;&#9;&#9;axes_z.Parent=nil;
&#9;&#9;&#9;aabb.Parent=nil;
&#9;&#9;&#9;handles.Visible=false;
&#9;&#9;&#9;Passive(p);
&#9;&#9;&#9;UpdateHandles();
&#9;&#9;end
&#9;elseif c==&quot;Button1Up&quot; then
&#9;&#9;HandlesUp();
&#9;&#9;axes_x.Parent=LocalBin;
&#9;&#9;axes_y.Parent=LocalBin;
&#9;&#9;axes_z.Parent=LocalBin;
&#9;&#9;aabb.Parent=LocalBin;
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Unload&quot; then
&#9;&#9;FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;obj40.Parent=nil;
&#9;&#9;handles.Parent=nil;
&#9;&#9;sb.Parent=nil;
&#9;&#9;axes_x.Parent=nil;
&#9;&#9;axes_y.Parent=nil;
&#9;&#9;axes_z.Parent=nil;
&#9;&#9;aabb.Parent=nil;
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
&#9;&#9;FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
&#9;&#9;FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
&#9;&#9;if FunctionData.Rotate.x~=0 or FunctionData.Rotate.y~=0 or FunctionData.Rotate.z~=0 then
&#9;&#9;&#9;p=HasPermission(GetParts(Selection.Get()), &quot;rotate&quot;);
&#9;&#9;&#9;old_cframe={}; for i,v in pairs(p) do old_cframe[#old_cframe+1]=v.CFrame;&#9;end
&#9;&#9;&#9;if FunctionData.Rotate.Around and FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;center=CFrame.new(FunctionData.Rotate.Around.Position);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z))
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.Around and not FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.AsWhole then

&#9;&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center = CFrame.new(center / #p);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;elseif FunctionData.Rotate.Constant then

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(v.CFrame.p)*CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;elseif FunctionData.Rotate.WorldAxis then

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = CFrame.new(v.CFrame.p) * CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z)) * (v.CFrame - v.Position);
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;else

&#9;&#9;&#9;&#9;for i,v in pairs(p) do
&#9;&#9;&#9;&#9;&#9;v.CFrame = v.CFrame * CFrame.Angles(math.rad(FunctionData.Rotate.x), math.rad(FunctionData.Rotate.y), math.rad(FunctionData.Rotate.z));
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;end
&#9;&#9;&#9;new_cframe={}; for i,v in pairs(p) do new_cframe[#new_cframe+1]=v.CFrame;&#9;end
&#9;&#9;&#9;History.Action(&quot;Rotate&quot;, p, old_cframe, new_cframe);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;elseif c==&quot;Move&quot; then
&#9;&#9;if pending_selection then
&#9;&#9;&#9;sb.Adornee = p[2].Target;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(Options.ApplyButton) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;UpdateHandles();
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Rotate=FunctionData.Rotate or {};

FunctionData.Rotate.x = FunctionData.Rotate.x or 0;
FunctionData.Rotate.y = FunctionData.Rotate.y or 0;
FunctionData.Rotate.z = FunctionData.Rotate.z or 0;
if FunctionData.Rotate.WorldAxis==nil then
FunctionData.Rotate.WorldAxis = false;
end
if FunctionData.Rotate.AsWhole==nil then
FunctionData.Rotate.AsWhole = true;
end
if FunctionData.Rotate.Constant==nil then
FunctionData.Rotate.Constant = false;
end
FunctionData.Rotate.Around = FunctionData.Rotate.Around;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Rotate&quot; obj40.Position=UDim2.new(0,243,1,-142) obj40.Size=UDim2.new(0,84,0,142)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,0/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;xBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;X&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,85/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;xButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;X&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextBox&quot;) obj43.BackgroundColor3=Color3.new(0/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;yBox&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,18) obj43.Text=&quot;Y&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255) obj43.Visible=false obj43.ZIndex=2
obj44=Instance.new(&quot;TextButton&quot;) obj44.BackgroundColor3=Color3.new(155/255,255/255,255/255) obj44.BorderColor3=Color3.new(27/255,42/255,53/255) obj44.Name=&quot;yButton&quot; obj44.Parent=obj40 obj44.Position=UDim2.new(0,2,0,22) obj44.Size=UDim2.new(0,80,0,18) obj44.Text=&quot;Y&quot; obj44.TextColor3=Color3.new(27/255,42/255,53/255)
obj45=Instance.new(&quot;TextBox&quot;) obj45.BackgroundColor3=Color3.new(255/255,0/255,255/255) obj45.BorderColor3=Color3.new(27/255,42/255,53/255) obj45.Name=&quot;zBox&quot; obj45.Parent=obj40 obj45.Position=UDim2.new(0,2,0,42) obj45.Size=UDim2.new(0,80,0,18) obj45.Text=&quot;Z&quot; obj45.TextColor3=Color3.new(27/255,42/255,53/255) obj45.Visible=false obj45.ZIndex=2
obj46=Instance.new(&quot;TextButton&quot;) obj46.BackgroundColor3=Color3.new(255/255,147/255,255/255) obj46.BorderColor3=Color3.new(27/255,42/255,53/255) obj46.Name=&quot;zButton&quot; obj46.Parent=obj40 obj46.Position=UDim2.new(0,2,0,42) obj46.Size=UDim2.new(0,80,0,18) obj46.Text=&quot;Z&quot; obj46.TextColor3=Color3.new(27/255,42/255,53/255)
obj47=Instance.new(&quot;TextButton&quot;) obj47.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj47.BorderColor3=Color3.new(27/255,42/255,53/255) obj47.Name=&quot;WorldObjAxis&quot; obj47.Parent=obj40 obj47.Position=UDim2.new(0,2,0,62) obj47.Size=UDim2.new(0,80,0,14) obj47.Text=&quot;World Axis&quot; obj47.TextColor3=Color3.new(27/255,42/255,53/255)
obj48=Instance.new(&quot;TextButton&quot;) obj48.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj48.BorderColor3=Color3.new(27/255,42/255,53/255) obj48.Name=&quot;Neg&quot; obj48.Parent=obj40 obj48.Position=UDim2.new(0,2,1,-16) obj48.Size=UDim2.new(0,25,0,14) obj48.Text=&quot;* -1&quot; obj48.TextColor3=Color3.new(27/255,42/255,53/255)
obj49=Instance.new(&quot;TextButton&quot;) obj49.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj49.BorderColor3=Color3.new(27/255,42/255,53/255) obj49.Name=&quot;Doub&quot; obj49.Parent=obj40 obj49.Position=UDim2.new(0,29,1,-16) obj49.Size=UDim2.new(0,26,0,14) obj49.Text=&quot;* 2&quot; obj49.TextColor3=Color3.new(27/255,42/255,53/255)
obj50=Instance.new(&quot;TextButton&quot;) obj50.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj50.BorderColor3=Color3.new(27/255,42/255,53/255) obj50.Name=&quot;Half&quot; obj50.Parent=obj40 obj50.Position=UDim2.new(0,57,1,-16) obj50.Size=UDim2.new(0,25,0,14) obj50.Text=&quot;* .5&quot; obj50.TextColor3=Color3.new(27/255,42/255,53/255)
obj51=Instance.new(&quot;TextButton&quot;) obj51.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj51.BorderColor3=Color3.new(27/255,42/255,53/255) obj51.Name=&quot;AsWholeIndivid&quot; obj51.Parent=obj40 obj51.Position=UDim2.new(0,2,0,78) obj51.Size=UDim2.new(0,80,0,14) obj51.Text=&quot;As Whole&quot; obj51.TextColor3=Color3.new(27/255,42/255,53/255)
obj52=Instance.new(&quot;TextButton&quot;) obj52.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj52.BorderColor3=Color3.new(27/255,42/255,53/255) obj52.Name=&quot;Constant&quot; obj52.Parent=obj40 obj52.Position=UDim2.new(0,2,0,94) obj52.Size=UDim2.new(0,80,0,14) obj52.Text=&quot;Constant&quot; obj52.TextColor3=Color3.new(27/255,42/255,53/255)
obj53=Instance.new(&quot;TextButton&quot;) obj53.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj53.BorderColor3=Color3.new(27/255,42/255,53/255) obj53.Name=&quot;Constant&quot; obj53.Parent=obj40 obj53.Position=UDim2.new(0,2,0,110) obj53.Size=UDim2.new(0,80,0,14) obj53.Text=&quot;Around Point&quot; obj53.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;
TB.insert(obj41, obj42);
TB.insert(obj43, obj44);
TB.insert(obj45, obj46);
obj42.Text=FunctionData.Rotate.x;
obj44.Text=FunctionData.Rotate.y;
obj46.Text=FunctionData.Rotate.z;

function UpdateButtons()
&#9;if FunctionData.Rotate.Around~=nil then
&#9;&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj51.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj52.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = FunctionData.Rotate.WorldAxis and &quot;World Axis&quot; or &quot;Centroid Axis&quot;;
&#9;&#9;obj51.Text = &quot;As Whole&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around Part&quot;;
&#9;elseif FunctionData.Rotate.AsWhole then
&#9;&#9;obj47.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj52.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = &quot;World Axis&quot;;
&#9;&#9;obj51.Text = &quot;As Whole&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;elseif FunctionData.Rotate.Constant then
&#9;&#9;obj47.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj51.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj53.BackgroundColor3=Options.InactiveColor;
&#9;&#9;obj47.Text = &quot;World Axis&quot;;
&#9;&#9;obj51.Text = &quot;Individually&quot;;
&#9;&#9;obj52.Text = &quot;Constant&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;else
&#9;&#9;obj47.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj51.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj52.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj53.BackgroundColor3=Options.ButtonColor;
&#9;&#9;obj47.Text = FunctionData.Rotate.WorldAxis and &quot;World Axis&quot; or &quot;Object&apos;s Axis&quot;;
&#9;&#9;obj51.Text = &quot;Individually&quot;;
&#9;&#9;obj52.Text = &quot;Relative&quot;;
&#9;&#9;obj53.Text = &quot;Around nil&quot;;
&#9;end
end

UpdateButtons();

obj47.MouseButton1Down:connect(function()
FunctionData.Rotate.WorldAxis = not FunctionData.Rotate.WorldAxis;
UpdateButtons();
UpdateHandles();
end)
obj51.MouseButton1Down:connect(function()
FunctionData.Rotate.AsWhole = not FunctionData.Rotate.AsWhole;
UpdateButtons();
UpdateHandles();
end)
obj52.MouseButton1Down:connect(function()
FunctionData.Rotate.Constant = not FunctionData.Rotate.Constant;
UpdateButtons();
UpdateHandles();
end)
pending_selection = false;
sb=Instance.new(&quot;SelectionBox&quot;);
sb.Color=Options.ActiveSelectionBoxColor;
sb.Name=&quot;PendingDistinguisher&quot;;
sb.Visible=false;
sb.Parent=obj1;
obj53.MouseButton1Down:connect(function()
&#9;if not pending_selection then
&#9;&#9;pending_selection = true;
&#9;&#9;sb.Visible=true;
&#9;else
&#9;&#9;pending_selection = false;
&#9;&#9;sb.Visible=false;
&#9;&#9;FunctionData.Rotate.Around = nil;
&#9;end
&#9;UpdateButtons();
end)

obj48.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * -1;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * -1;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * -1;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)
obj49.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * 2;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * 2;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * 2;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)
obj50.MouseButton1Down:connect(function()
FunctionData.Rotate.x = tonumber(obj42.Text == &quot;&quot; and 0 or obj42.Text) or 0;
FunctionData.Rotate.y = tonumber(obj44.Text == &quot;&quot; and 0 or obj44.Text) or 0;
FunctionData.Rotate.z = tonumber(obj46.Text == &quot;&quot; and 0 or obj46.Text) or 0;
FunctionData.Rotate.x = (FunctionData.Rotate.x or 0) * .5;
FunctionData.Rotate.y = (FunctionData.Rotate.y or 0) * .5;
FunctionData.Rotate.z = (FunctionData.Rotate.z or 0) * .5;
obj42.Text = FunctionData.Rotate.x;
obj44.Text = FunctionData.Rotate.y;
obj46.Text = FunctionData.Rotate.z;
end)

axes_x=Instance.new(&quot;Part&quot;);
axes_x.Anchored=true;
axes_x.CanCollide=false;
axes_x.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_x;
axes_x.Name=&quot;axes_x&quot;;
axes_x.formFactor=0;
axes_x.Size=Vector3.new(1, 3, 1);
axes_x.BrickColor=BrickColor.new(&quot;Bright yellow&quot;);
axes_x.Parent=LocalBin;

axes_y=Instance.new(&quot;Part&quot;);
axes_y.Anchored=true;
axes_y.CanCollide=false;
axes_y.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_y;
axes_y.Name=&quot;axes_x&quot;;
axes_y.formFactor=0;
axes_y.Size=Vector3.new(1, 3, 1);
axes_y.BrickColor=BrickColor.new(&quot;Cyan&quot;);
axes_y.Parent=LocalBin;

axes_z=Instance.new(&quot;Part&quot;);
axes_z.Anchored=true;
axes_z.CanCollide=false;
axes_z.Transparency=1;
Instance.new(&quot;CylinderMesh&quot;).Parent=axes_z;
axes_z.Name=&quot;axes_x&quot;;
axes_z.formFactor=0;
axes_z.Size=Vector3.new(1, 3, 1);
axes_z.BrickColor=BrickColor.new(&quot;Magenta&quot;);
axes_z.Parent=LocalBin;

aabb=Instance.new(&quot;Part&quot;);
aabb.Anchored=true;
aabb.CanCollide=false;
aabb.Transparency=1;
aabb.Parent=LocalBin;
handles=Instance.new(&quot;ArcHandles&quot;);
handles.Color=Options.RotateHandlesColor;
handles.Adornee=aabb;
handles.Parent=obj1;

function HandlesUp()
&#9;if #rotate_drag&gt;0 then
&#9;&#9;new_cframe={};
&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;new_cframe[#new_cframe+1]=v.CFrame;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Rotate&quot;, rotate_drag, original_cframe, new_cframe);
&#9;&#9;rotate_drag={};
&#9;end
end;

old_rotation=0;
rotate_drag={};
original_cframe={};
rotate_by=Vector3.new(0,0,0);
handles.MouseButton1Down:connect(function(axis)
&#9;if axis==Enum.Axis.X then
&#9;&#9;rotate_by=Vector3.new(1,0,0);
&#9;elseif axis==Enum.Axis.Y then
&#9;&#9;rotate_by=Vector3.new(0,1,0);
&#9;elseif axis==Enum.Axis.Z then
&#9;&#9;rotate_by=Vector3.new(0,0,1);
&#9;end
&#9;rotate_drag=HasPermission(GetParts(Selection.Get()), &quot;handles_rotate&quot;);
&#9;old_rotation=0;
&#9;original_cframe={};
&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;original_cframe[i]=v.CFrame;
&#9;end
end)
handles.MouseButton1Up:connect(HandlesUp)
handles.MouseDrag:connect(function(face, dist)
&#9;if #rotate_drag&gt;0 then
&#9;&#9;new_dist = round(dist - old_rotation, math.rad(Options.RotateDragIntervals));
&#9;&#9;if new_dist~=0 then
&#9;&#9;&#9;if FunctionData.Rotate.Around~=nil and FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;&#9;center=CFrame.new(FunctionData.Rotate.Around.Position);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif FunctionData.Rotate.Around~=nil and not FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center = CFrame.new(center / #rotate_drag);
&#9;&#9;&#9;&#9;origin={};
&#9;&#9;&#9;&#9;for i,v in pairs(rotate_drag) do
&#9;&#9;&#9;&#9;&#9;origin[v]=center:toObjectSpace(v.CFrame)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;center=center*CFrame.Angles(rotate_by.x*new_dist, rotate_by.y*new_dist, rotate_by.z*new_dist)
&#9;&#9;&#9;&#9;for i,v in pairs(origin) do
&#9;&#9;&#9;&#9;&#9;i.CFrame=center:toWorldSpace(v)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;old_rotation = old_rotation + new_dist;
&#9;end
end)

function UpdateHandles()
&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;handles_rotate&quot;);
&#9;if #parts&gt;0 then
&#9;&#9;if FunctionData.Rotate.Around~=nil and FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame.p;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = CFrame.new(center);
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;elseif FunctionData.Rotate.Around~=nil and not FunctionData.Rotate.WorldAxis then
&#9;&#9;&#9;center=FunctionData.Rotate.Around.CFrame.p;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = FunctionData.Rotate.Around.CFrame;
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;else
&#9;&#9;&#9;center = Vector3.new();
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;center = center + v.Position;
&#9;&#9;&#9;end
&#9;&#9;&#9;center = center / #parts;
&#9;&#9;&#9;max=0;
&#9;&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;&#9;for x=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;for y=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;for z=-1,1,2 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local s=v.Size/2;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local p = ((v.CFrame-v.CFrame.p) * CFrame.new(x*s.x, y*s.y, z*s.z)).p + v.Position;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;max=math.max(max, (p - center).magnitude);
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;aabb.Size=Vector3.new(max / 0.866025404, max / 0.866025404, max / 0.866025404);
&#9;&#9;&#9;aabb.CFrame = CFrame.new(center);
&#9;&#9;&#9;if aabb.Parent then handles.Visible=true; end
&#9;&#9;end
&#9;else
&#9;&#9;handles.Visible=false;
&#9;end
end

round=function(number,multiple) return math.floor(number/multiple+.5)*multiple; end;

UpdateHandles();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX494">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Lock</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Lock()

function Active(p) --p accepts a table of parameters.
&#9;local c=p[1]; --c is command.
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;lock&quot;);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Locked;
&#9;&#9;&#9;v.Locked=FunctionData.Lock.Mode;
&#9;&#9;end
&#9;&#9;History.Action(&quot;Lock&quot;, parts, prior, FunctionData.Lock.Mode);
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

FunctionData.Lock = FunctionData.Lock or {};
FunctionData.Lock.Mode = FunctionData.Lock.Mode or false;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(211/255,243/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Lock&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextButton&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;true&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,17) obj41.Text=&quot;Lock Selection&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255)
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;false&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,21) obj42.Size=UDim2.new(0,80,0,17) obj42.Text=&quot;Unlock Selection&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj40.Parent=obj1;

obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;

obj41.MouseButton1Down:connect(function()
&#9;FunctionData.Lock.Mode = true;
&#9;obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
end)
obj42.MouseButton1Down:connect(function()
&#9;FunctionData.Lock.Mode = false;
&#9;obj41.BackgroundColor3 = FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
&#9;obj42.BackgroundColor3 = not FunctionData.Lock.Mode and Options.SelectedColor or Options.ButtonColor;
end)


end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX495">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Transparency</string>
						<string name="Value">PaletteFunctions = PaletteFunctions or {};

function PaletteFunctions.Transparency()

function Active(p)
&#9;local c=p[1];
&#9;if c==&quot;Unload&quot; then
&#9;&#9;obj40.Parent=nil;
&#9;&#9;TB.remove(obj41);
&#9;&#9;FunctionData.Transparency.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;return;
&#9;elseif c==&quot;KeyDown&quot; then
&#9;&#9;if string.byte(p[3])==Options.ApplyButton then
&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;local t = tab_index;
&#9;&#9;&#9;&#9;wait(Options.RepeatDelay);
&#9;&#9;&#9;&#9;while keys.check(9) and t==tab_index do
&#9;&#9;&#9;&#9;HitButton(gui26);
&#9;&#9;&#9;&#9;wait(Options.RepeatRate);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end);
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;&#9;return;
&#9;elseif c==&quot;KeyUp&quot; then
&#9;&#9;if string.byte(p[3])==9 then
&#9;&#9;&#9;tab_index = tab_index + 1;
&#9;&#9;end
&#9;&#9;Passive(p);
&#9;elseif c==&quot;Apply&quot; then
&#9;&#9;prior={};
&#9;&#9;after={};
&#9;&#9;parts=HasPermission(GetParts(Selection.Get()), &quot;transparency&quot;);
&#9;&#9;FunctionData.Transparency.Value = (tonumber(obj42.Text==&quot;&quot; and &quot;0&quot; or obj42.Text) or 0);
&#9;&#9;for i,v in pairs(parts) do
&#9;&#9;&#9;prior[i]=v.Transparency;
&#9;&#9;&#9;if FunctionData.Transparency.Relative then
&#9;&#9;&#9;&#9;v.Transparency=math.min(1, math.max(0, v.Transparency+FunctionData.Transparency.Value));
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;v.Transparency=math.min(1, math.max(0, FunctionData.Transparency.Value));
&#9;&#9;&#9;end
&#9;&#9;&#9;after[i]=v.Transparency;
&#9;&#9;end
&#9;&#9;pass_action=false;
&#9;&#9;for i,v in pairs(prior) do
&#9;&#9;&#9;if prior[i]~=after[i] then
&#9;&#9;&#9;&#9;pass_action=true;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if pass_action then
&#9;&#9;&#9;History.Action(&quot;Transparency&quot;, parts, prior, after);
&#9;&#9;end
&#9;&#9;return;
&#9;else
&#9;&#9;Passive(p);
&#9;end
end

tab_index=0;

FunctionData.Transparency = FunctionData.Transparency or {};
FunctionData.Transparency.Relative = FunctionData.Transparency.Relative or false;
FunctionData.Transparency.Value = FunctionData.Transparency.Value or 0.5;

obj40=Instance.new(&quot;Frame&quot;) obj40.BackgroundColor3=Color3.new(213/255,245/255,255/255) obj40.BorderColor3=Color3.new(27/255,42/255,53/255) obj40.Name=&quot;Transparency&quot; obj40.Position=UDim2.new(0,243,1,-40) obj40.Size=UDim2.new(0,84,0,40)
obj41=Instance.new(&quot;TextBox&quot;) obj41.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj41.BorderColor3=Color3.new(27/255,42/255,53/255) obj41.Name=&quot;tBox&quot; obj41.Parent=obj40 obj41.Position=UDim2.new(0,2,0,2) obj41.Size=UDim2.new(0,80,0,18) obj41.Text=&quot;&quot; obj41.TextColor3=Color3.new(27/255,42/255,53/255) obj41.Visible=false obj41.ZIndex=2
obj42=Instance.new(&quot;TextButton&quot;) obj42.BackgroundColor3=Color3.new(226/255,226/255,226/255) obj42.BorderColor3=Color3.new(27/255,42/255,53/255) obj42.Name=&quot;tButton&quot; obj42.Parent=obj40 obj42.Position=UDim2.new(0,2,0,2) obj42.Size=UDim2.new(0,80,0,18) obj42.Text=&quot;.5&quot; obj42.TextColor3=Color3.new(27/255,42/255,53/255)
obj43=Instance.new(&quot;TextButton&quot;) obj43.BackgroundColor3=Color3.new(255/255,255/255,255/255) obj43.BorderColor3=Color3.new(27/255,42/255,53/255) obj43.Name=&quot;RelativeConstant&quot; obj43.Parent=obj40 obj43.Position=UDim2.new(0,2,0,22) obj43.Size=UDim2.new(0,80,0,16) obj43.Text=&quot;Constant&quot; obj43.TextColor3=Color3.new(27/255,42/255,53/255)

obj42.Text = tostring(FunctionData.Transparency.Value);
obj40.Parent=obj1;
TB.insert(obj41, obj42);

function RefreshButtons()
obj43.Text = FunctionData.Transparency.Relative and &quot;Relative&quot; or &quot;Constant&quot;;
end

obj43.MouseButton1Down:connect(function()
FunctionData.Transparency.Relative = not FunctionData.Transparency.Relative;
RefreshButtons();
end)

RefreshButtons();

end
</string>
					</Properties>
				</Item>
				<Item class="StringValue" referent="RBX496">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">HistoryOOP</string>
						<string name="Value">History={Done={}, Undone={}}

History.Action=function(...)
History.Done[#History.Done+1]={...};
History.Undone={};
end;
History.Prep=function(...)
History.Undone[#History.Undone+1]={...};
end;

History.Undo=function()
&#9;if #History.Done&gt;0 then
&#9;&#9;local p=History.Done[#History.Done];
&#9;&#9;if p[1]==&quot;Move&quot; then
&#9;&#9;&#9;for i=1,#p[2] do
&#9;&#9;&#9;&#9;p[2][i].CFrame=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Clone&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;if Selection.Check(v) then
&#9;&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Delete&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Parent=p[3][i];
&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Resize&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Size=p[3][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Move+Resize&quot; then
&#9;&#9;&#9;v=p[2];
&#9;&#9;&#9;v.Size=p[5];
&#9;&#9;&#9;v.CFrame=p[3];
&#9;&#9;elseif p[1]==&quot;Rotate&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CFrame = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Lock&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Locked = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Color&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.BrickColor = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Material&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Material = p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Transparency&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Transparency=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Reflectance&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Reflectance=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Anchor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Anchored = p[3][i][1];
&#9;&#9;&#9;&#9;v.Parent=p[3][i][2];
&#9;&#9;&#9;&#9;v.CFrame=p[3][i][3];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;CanCollide&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CanCollide = p[3][i][1];
&#9;&#9;&#9;&#9;v.Parent=p[3][i][2];
&#9;&#9;&#9;&#9;v.CFrame=p[3][i][3];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;FormFactor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.FormFactor=p[3][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Shape&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[4]~=nil and p[4][i]~=nil and p[4][i][1]~=nil then
&#9;&#9;&#9;&#9;&#9;v.Parent=p[4][i][1].Parent;
&#9;&#9;&#9;&#9;&#9;p[4][i][1].Parent=nil;
&#9;&#9;&#9;&#9;&#9;if Selection.Check(p[4][i][1]) then
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[4][i][1]);
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif p[3]~=nil and p[3][i]~=nil and p[3][i][4]~=nil and p[3][i][3]~=nil and p[3][i][2]~=nil then
&#9;&#9;&#9;&#9;&#9;v.Shape=p[3][i][4];
&#9;&#9;&#9;&#9;&#9;v.Size=p[3][i][3];
&#9;&#9;&#9;&#9;&#9;v.CFrame=p[3][i][2];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Surface&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[3]==Enum.NormalId.Left then v.LeftSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Right then v.RightSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Top then v.TopSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Bottom then v.BottomSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Front then v.FrontSurface=p[4][i];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Back then v.BackSurface=p[4][i];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Velocity&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Velocity=p[3][i];
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Undone[#History.Undone+1]=History.Done[#History.Done];
&#9;&#9;History.Done[#History.Done]=nil;
&#9;end
end

History.Redo=function()
&#9;--handle History.Undone
&#9;if #History.Undone&gt;0 then
&#9;&#9;local p=History.Undone[#History.Undone];
&#9;&#9;if p[1]==&quot;Move&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;p[2][i].CFrame=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Clone&quot; then
&#9;&#9;&#9;for i=1,#p[2] do
&#9;&#9;&#9;&#9;p[2][i].Parent=workspace;
&#9;&#9;&#9;&#9;for i,v in pairs(p[3]) do
&#9;&#9;&#9;&#9;&#9;if v[1]==p[2][i] or v[1]:IsDescendantOf(p[2][i]) then
&#9;&#9;&#9;&#9;&#9;&#9;v[1].CFrame=v[2];
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Delete&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;Selection.Remove(v);
&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Resize&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.Size=p[4][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Move+Resize&quot; then
&#9;&#9;&#9;v=p[2];
&#9;&#9;&#9;v.Size=p[6];
&#9;&#9;&#9;v.CFrame=p[4];
&#9;&#9;elseif p[1]==&quot;Rotate&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CFrame = p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Lock&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Locked = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Color&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.BrickColor = p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Material&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Material = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Transparency&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Transparency=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Reflectance&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Reflectance=p[4][i];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Anchor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Anchored = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;CanCollide&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.CanCollide = p[4];
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;FormFactor&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;local cf=v.CFrame;
&#9;&#9;&#9;&#9;v.FormFactor=p[4][i];
&#9;&#9;&#9;&#9;v.CFrame=cf;
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Shape&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[4][i][1]~=nil then
&#9;&#9;&#9;&#9;&#9;p[4][i][1].Parent=v.Parent;
&#9;&#9;&#9;&#9;&#9;v.Parent=nil;
&#9;&#9;&#9;&#9;&#9;if Selection.Check(p[4][i][1]) then
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Add(v);
&#9;&#9;&#9;&#9;&#9;&#9;Selection.Remove(p[4][i][1]);
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;v.Shape=p[4][i][2];
&#9;&#9;&#9;&#9;&#9;v.Size=p[3][i][3];
&#9;&#9;&#9;&#9;&#9;v.CFrame=p[3][i][2];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Surface&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;if p[3]==Enum.NormalId.Left then v.LeftSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Right then v.RightSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Top then v.TopSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Bottom then v.BottomSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Front then v.FrontSurface=p[5];
&#9;&#9;&#9;&#9;elseif p[3]==Enum.NormalId.Back then v.BackSurface=p[5];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif p[1]==&quot;Velocity&quot; then
&#9;&#9;&#9;for i,v in pairs(p[2]) do
&#9;&#9;&#9;&#9;v.Velocity=p[4];
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;History.Done[#History.Done+1]=History.Undone[#History.Undone];
&#9;&#9;History.Undone[#History.Undone]=nil;
&#9;end
end
</string>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="HopperBin" referent="RBX497">
			<Properties>
				<bool name="Active">false</bool>
				<bool name="Archivable">true</bool>
				<token name="BinType">0</token>
				<string name="Name">MoreBuildTools</string>
				<Content name="TextureId"><url>http://www.roblox.com/asset/?id=59105322</url></Content>
			</Properties>
			<Item class="LocalScript" referent="RBX498">
				<Properties>
					<bool name="Archivable">true</bool>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<ProtectedString name="Source">active = false 
player = game.Players.LocalPlayer 
toolgui = script.MainGui 
gui = toolgui:clone() 
backpack = player.Backpack 
wheregui = player.PlayerGui 
bin = script.Parent 
Color3Fixed = function(r,g,b) return Color3.new(r/255,g/255,b/255) end 
onToolClicked = function(tool)for _, v in pairs(backpack:getChildren()) do if v:findFirstChild(&quot;MoreTools&quot;) ~= nil then v:remove()end end t = tool:clone() b = Instance.new(&quot;BoolValue&quot;)b.Parent = t b.Name = &quot;MoreTools&quot; t.Parent = backpack end 
onSelected = function() gui.Parent = wheregui end 
onDeselected = function() gui.Parent = nil end 
setup = function()for i, v in pairs(script.Tools:getChildren()) do if v.className == &quot;HopperBin&quot; or v.className == &quot;Tool&quot; then gui = Instance.new(&quot;TextButton&quot;) gui.Parent = gui.WindowFrame.Frame gui.TextColor3 = Color3Fixed(255,255,255) gui.BackgroundTransparency = 0.25 gui.Position = UDim2.new(0, ((i - 1) % 6) * 100, 0, math.floor((i - 1) / 6) * 100) gui.Size = UDim2.new(0, 100, 0, 100) gui.Text = v.Name gui.Style = &quot;RobloxButton&quot; gui.MouseButton1Click:connect(function() pcall(function()onToolClicked(v)end) end) end end end 
op = pcall(function()setup()end) if not op then error(&quot;Gui setup failed :(&quot;) end 
bin.Selected:connect(onSelected) 
bin.Deselected:connect(onDeselected)</ProtectedString>
				</Properties>
				<Item class="CFrameValue" referent="RBX499">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">Tools</string>
						<CoordinateFrame name="Value">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
					</Properties>
					<Item class="HopperBin" referent="RBX500">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Wiring</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX501">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">WiringLocal</string>
								<ProtectedString name="Source">local Tool = script.Parent
local mouseMoveCon, mouseButtonDownCon = nil

local eventTable = {}
local receiverTable = {}
local ServiceConnections = {}
local adornmentTable = {}

local isRestricted = false
if game.PlaceId == &quot;41324860&quot; then
&#9;isRestricted = true
end

local CONNECT_BILLBOARD_GUI = &quot;ConnectBillboardGui&quot;
local WIRE_LASSO = &quot;WireLasso&quot;
local WIRE_TEXTURE = &quot;http://www.roblox.com/asset?id=56954045&quot;
--local WIRE_TEXTURE = &quot;rbxasset://Textures/ui/playerlist_small_hide_dn.png&quot;
local KILL_WIRE_TEXTURE = &quot;rbxasset://Textures/ui/CloseButton_dn.png&quot;
local STATIC_PLAYER_GUI = nil
local STATIC_BASE_PLATE = nil
local SELECTED_SOURCE = nil
local SELECTED_SINK = nil
local WIRE_LASSO_MAP = {}
local WIRING_PANEL_MAP = {}
local LAST_HOVERED_PART = nil
local SCREEN_MESSAGE = nil
local ANNOTATIONS = {}
local KNOWN_SOURCE_PARTS = {}
local KNOWN_SINK_PARTS = {}
local BASE_ANNOTATION_TRANSPARENCY = 0.5
local BASE_WIRE_TRANSPARENCY = 0.5
local BASE_WIRE_RADIUS = .06
local ENHANCED_WIRE_RADIUS = .12
local SOURCE_BUTTON_TEXT_COLOR = Color3.new(1, .5, 0)
local SOURCE_BUTTON_ICON_TEXTURE = &quot;http://www.roblox.com/asset?id=55130296&quot;
local SOURCE_BUTTON_ICON_HOVER_TEXTURE = &quot;http://www.roblox.com/asset?id=56953981&quot;
local SINK_BUTTON_TEXT_COLOR = Color3.new(0, 1, 0)
local SINK_BUTTON_ICON_TEXTURE = &quot;http://www.roblox.com/asset?id=55130274&quot;
local SINK_BUTTON_ICON_HOVER_TEXTURE = &quot;http://www.roblox.com/asset?id=56953950&quot;
local BUTTON_HOVER_TEXT_COLOR = Color3.new(1, 1, 1)
local BUTTON_ICON_WIDTH = 50
local DISCONNECT_ICON_HOVER_TEXTURE = &quot;http://www.roblox.com/asset?id=55130256&quot;
local DISCONNECT_SOURCE_ICON_TEXTURE = &quot;http://www.roblox.com/asset?id=55130237&quot;
local DISCONNECT_SINK_ICON_TEXTURE = &quot;http://www.roblox.com/asset?id=55130219&quot;
local TAIL_TEXTURE = &quot;http://www.roblox.com/asset?id=55134078&quot;
local USE_BILLBOARD_GUI = true
local LAST_CLICK_TIME = 0
local CLICK_HELP_TIME_DELTA = .8
local SOURCE_BADGE_TEXTURE = &quot;http://www.roblox.com/asset?id=60730993&quot;
local SINK_BADGE_TEXTURE = &quot;http://www.roblox.com/asset?id=60730993&quot;

local ALL_TEXTURES = { SOURCE_BUTTON_ICON_TEXTURE, SOURCE_BUTTON_ICON_HOVER_TEXTURE,
&#9;&#9;SINK_BUTTON_ICON_TEXTURE, SINK_BUTTON_ICON_HOVER_TEXTURE,
&#9;&#9;DISCONNECT_ICON_HOVER_TEXTURE, DISCONNECT_SOURCE_ICON_TEXTURE,
&#9;&#9;DISCONNECT_SINK_ICON_TEXTURE, TAIL_TEXTURE, WIRE_TEXTURE, SOURCE_BADGE_TEXTURE, SINK_BADGE_TEXTURE}

for idx, asset in ipairs(ALL_TEXTURES) do
&#9;game:GetService(&quot;ContentProvider&quot;):Preload(asset)
end

function clearSelection()
&#9;SELECTED_SOURCE = nil
&#9;SELECTED_SINK = nil
&#9;getLocalLasso().From = nil
&#9;getLocalLasso().To = nil
end

function clearScreenMessage()
&#9;if SCREEN_MESSAGE ~= nil then
&#9;&#9;SCREEN_MESSAGE:Remove()
&#9;&#9;SCREEN_MESSAGE = nil
&#9;end
end

function clearHover()
&#9;if LAST_HOVERED_PART ~= nil then
&#9;&#9;local lastHover = LAST_HOVERED_PART
&#9;&#9;if not ANNOTATIONS[lastHover] then
&#9;&#9;&#9;lastHover = findModel(lastHover)
&#9;&#9;end

&#9;&#9;ANNOTATIONS[lastHover].Transparency = BASE_ANNOTATION_TRANSPARENCY
&#9;&#9;if WIRING_PANEL_MAP[lastHover] ~= nil then
&#9;&#9;&#9;WIRING_PANEL_MAP[lastHover]:Remove()
&#9;&#9;&#9;WIRING_PANEL_MAP[lastHover] = nil
&#9;&#9;end
&#9;&#9;setPartWireTransparency(LAST_HOVERED_PART, BASE_WIRE_TRANSPARENCY, BASE_WIRE_RADIUS, &quot;&quot;)
&#9;end
end

function getPlayerGui()
&#9;if STATIC_PLAYER_GUI == nil then
&#9;&#9;STATIC_PLAYER_GUI = game.Players.LocalPlayer.PlayerGui
&#9;end
&#9;return STATIC_PLAYER_GUI
end

function findMyBasePlate()
&#9;if isRestricted then
&#9;&#9;--if true then return game.Workspace.Base end -- for testing purposes
&#9;&#9;if STATIC_BASE_PLATE == nil then
&#9;&#9;&#9;local buildingAreas = game.Workspace.BuildingAreas:GetChildren()
&#9;&#9;&#9;for i = 1, #buildingAreas do
&#9;&#9;&#9;&#9;if buildingAreas[i].Player.Value == script.Parent.Parent.Name then
&#9;&#9;&#9;&#9;&#9;STATIC_BASE_PLATE = buildingAreas[i].PlayerArea
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return STATIC_BASE_PLATE
&#9;end

&#9;return nil
end

function getLocalLasso()
&#9;if not game.Players.LocalPlayer.PlayerGui:FindFirstChild(&quot;lasso&quot;) then
&#9;&#9;local lasso = Instance.new(&quot;FloorWire&quot;)
&#9;&#9;lasso.Name = &quot;lasso&quot;
&#9;&#9;lasso.Parent = game.Players.LocalPlayer.PlayerGui
&#9;&#9;lasso.Color = BrickColor.new(&quot;Really black&quot;)
&#9;end

&#9;return game.Players.LocalPlayer.PlayerGui.lasso
end

function findModel(part)
&#9;if isRestricted then
&#9;&#9;local basePlate = findMyBasePlate()
&#9;&#9;while part ~= nil do
&#9;&#9;&#9;if part.className == &quot;Model&quot; and part.Name ~= basePlate.Name and part.Name ~= &quot;GarbageParts&quot; then
&#9;&#9;&#9;&#9;return part
&#9;&#9;&#9;elseif part.Name == basePlate.Name or part.Name == &quot;GarbageParts&quot; then
&#9;&#9;&#9;&#9;return nil
&#9;&#9;&#9;end
&#9;&#9;&#9;part = part.Parent
&#9;&#9;end
&#9;else
&#9;&#9;local origPart = part
&#9;&#9;while part ~= nil do
&#9;&#9;&#9;if part.className == &quot;Model&quot; then
&#9;&#9;&#9;&#9;return part
&#9;&#9;&#9;elseif part.Name == &quot;Workspace&quot; or part.Name == &quot;game&quot; then
&#9;&#9;&#9;&#9;return origPart
&#9;&#9;&#9;end
&#9;&#9;&#9;part = part.Parent
&#9;&#9;end
&#9;end

&#9;return nil
end

function createVisualAnnotation(part, guiMain)
&#9;local selection = Instance.new(&quot;SelectionBox&quot;, guiMain)
&#9;selection.Name = &quot;Annotation&quot;
&#9;selection.Color = BrickColor.new(&quot;Lime green&quot;)
&#9;selection.Transparency = BASE_ANNOTATION_TRANSPARENCY
&#9;selection.Adornee = part
&#9;return selection
end

function isInteractivePart(obj)
&#9;if obj == nil then return false end
&#9;if obj:IsA(&quot;Part&quot;) then
&#9;&#9;for idx, child in ipairs(obj:GetChildren()) do
&#9;&#9;&#9;if child:IsA(&quot;CustomEvent&quot;) or child:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return false
end

function applyToConnectorsWires(sourceOrSink, fn)
&#9;if sourceOrSink:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;for idx, recv in ipairs(sourceOrSink:GetAttachedReceivers()) do
&#9;&#9;&#9;fn(WIRE_LASSO_MAP[sourceOrSink][recv])
&#9;&#9;end
&#9;else
&#9;&#9;local source = sourceOrSink.Source
&#9;&#9;if source ~= nil then
&#9;&#9;&#9;fn(WIRE_LASSO_MAP[source][sourceOrSink])
&#9;&#9;end
&#9;end
end

function warnNoWireableParts()
&#9;local topHint = nil
&#9;pcall(function() topHint = getPlayerGui().Gui.Hints.CenterHint end)
&#9;
&#9;if topHint then
&#9;&#9;topHint.Add.Label.Value = &quot;No Wiring Parts!  Add Wiring Parts using the Stamper Tool.&quot;
&#9;&#9;topHint.Add.Width.Value = 580
&#9;&#9;topHint.Add.Time.Value = 10
&#9;&#9;topHint.Add.Disabled = true  -- flip it off then on, in case it&apos;s currently running.
&#9;&#9;topHint.Add.Disabled = false
&#9;end
end

function warnNotClickingWireablePart()
&#9;if getPlayerGui():FindFirstChild(&quot;CenterHint&quot;, true) then
&#9;&#9;local topHint = getPlayerGui().Gui.Hints.CenterHint
&#9;&#9;topHint.Add.Label.Value = &quot;This part isn&apos;t wireable :(&quot;
&#9;&#9;topHint.Add.Width.Value = 580
&#9;&#9;topHint.Add.Time.Value = 2
&#9;&#9;topHint.Add.Disabled = true  -- flip it off then on, in case it&apos;s currently running.
&#9;&#9;topHint.Add.Disabled = false
&#9;end
end

--------------------------------------------------------------------------------
-- Screen messages (when source/sink is selected)

function stylizeScreenMessageLabel(label, text)
&#9;label.Text = text
&#9;label.FontSize = Enum.FontSize.Size24
&#9;label.Font = Enum.Font.ArialBold
&#9;label.BackgroundTransparency = 1
&#9;label.BorderSizePixel = 0
&#9;label.Size = UDim2.new(0, label.TextBounds.x, 0, label.TextBounds.y)
&#9;label.TextColor3 = Color3.new(1, 1, 1)
end

function createSourceIcon(parent, precedingText)
&#9;local sourceIcon = Instance.new(&quot;ImageLabel&quot;, frame)
&#9;sourceIcon.Archivable = false
&#9;sourceIcon.Image = SOURCE_BUTTON_ICON_TEXTURE
&#9;sourceIcon.Size = UDim2.new(0, 35, 0, 35)
&#9;sourceIcon.BackgroundTransparency = 1
&#9;sourceIcon.BorderSizePixel = 0
&#9;sourceIcon.Position = UDim2.new(0,
&#9;&#9;&#9;precedingText.Position.X.Offset + precedingText.TextBounds.x + 5,
&#9;&#9;&#9;0, precedingText.Position.Y.Offset +
&#9;&#9;&#9;&#9;((precedingText.Size.Y.Offset - sourceIcon.Size.Y.Offset) / 2))
&#9;return sourceIcon
end

function createSinkIcon(parent, precedingText)
&#9;local sinkIcon = Instance.new(&quot;ImageLabel&quot;, frame)
&#9;sinkIcon.Archivable = false
&#9;sinkIcon.Image = SINK_BUTTON_ICON_TEXTURE
&#9;sinkIcon.Size = UDim2.new(0, 35, 0, 35)
&#9;sinkIcon.BackgroundTransparency = 1
&#9;sinkIcon.BorderSizePixel = 0
&#9;sinkIcon.Position = UDim2.new(0,
&#9;&#9;&#9;precedingText.Position.X.Offset + precedingText.TextBounds.x + 5,
&#9;&#9;&#9;0, precedingText.Position.Y.Offset +
&#9;&#9;&#9;&#9;((precedingText.Size.Y.Offset - sinkIcon.Size.Y.Offset) / 2))
&#9;return sinkIcon
end

function addToAllXPositions(objs, offset)
&#9;for idx, obj in ipairs(objs) do
&#9;&#9;pos = obj.Position
&#9;&#9;obj.Position = UDim2.new(0, pos.X.Offset + offset, 0, pos.Y.Offset)
&#9;end
end

function showSourceScreenMessage(source)
&#9;gui = Instance.new(&quot;ScreenGui&quot;, getPlayerGui())
&#9;gui.Archivable = false
&#9;frame = Instance.new(&quot;Frame&quot;, gui)
&#9;frame.Archivable = false
&#9;frame.Style = Enum.FrameStyle.RobloxRound

&#9;local line1part1 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;line1part1.Archivable = false
&#9;stylizeScreenMessageLabel(line1part1, &quot;Choose a&quot;)

&#9;sinkIcon = createSinkIcon(frame, line1part1)
&#9;
&#9;line1part2 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;line1part2.Archivable = false
&#9;stylizeScreenMessageLabel(line1part2, &quot;receiver to trigger when&quot;)
&#9;line1part2.Position = UDim2.new(0,
&#9;&#9;sinkIcon.Position.X.Offset + sinkIcon.Size.X.Offset + 5, 0, 0)

&#9;line1height = math.max(sinkIcon.Size.Y.Offset, line1part1.Size.Y.Offset)

&#9;line2part1 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;line2part1.Archivable = false
&#9;stylizeScreenMessageLabel(line2part1, source.Parent.Name)
&#9;line2part1.Position = UDim2.new(0, 0, 0, line1height)
&#9;
&#9;sourceIcon = createSourceIcon(frame, line2part1)

&#9;line2part2 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line2part2, &quot;signals &quot;)
&#9;line2part2.Position = UDim2.new(0,
&#9;&#9;sourceIcon.Position.X.Offset + sourceIcon.Size.X.Offset + 5,
&#9;&#9;0, line2part1.Position.Y.Offset)

&#9;line2part3 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line2part3, source.Name)
&#9;line2part3.TextColor3 = SOURCE_BUTTON_TEXT_COLOR
&#9;line2part3.Position = UDim2.new(0,
&#9;&#9;line2part2.Position.X.Offset + line2part2.Size.X.Offset,
&#9;&#9;0, line2part1.Position.Y.Offset)

&#9;-- re-center
&#9;line1width = line1part2.Position.X.Offset + line1part2.Size.X.Offset
&#9;line2width = line2part3.Position.X.Offset + line2part3.Size.X.Offset

&#9;if line1width &gt; line2width then
&#9;&#9;local halfDelta = (line1width - line2width) / 2
&#9;&#9;addToAllXPositions({line2part1, sourceIcon, line2part2, line2part3}, halfDelta)
&#9;else
&#9;&#9;local halfDelta = (line2width - line1width) / 2
&#9;&#9;addToAllXPositions({line1part1, sinkIcon, line1part2}, halfDelta)
&#9;end

&#9;frame.Size = UDim2.new(0, math.max(line1width, line2width) + 15,
&#9;&#9;&#9;0, 2 * line1height + 5)
&#9;frame.Position = UDim2.new(.5, -frame.Size.X.Offset/2, 0, 0)

&#9;clearScreenMessage()
&#9;SCREEN_MESSAGE = gui
end

function showSinkScreenMessage(sink)
&#9;gui = Instance.new(&quot;ScreenGui&quot;, getPlayerGui())
&#9;frame = Instance.new(&quot;Frame&quot;, gui)
&#9;frame.Style = Enum.FrameStyle.RobloxRound

&#9;local line1part1 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line1part1, &quot;Choose which&quot;)

&#9;local sourceIcon = createSourceIcon(frame, line1part1)
&#9;
&#9;line1part2 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line1part2, &quot;signal will cause&quot;)
&#9;line1part2.Position = UDim2.new(0,
&#9;&#9;sourceIcon.Position.X.Offset + sourceIcon.Size.X.Offset + 5, 0, 0)

&#9;local line1height = math.max(sourceIcon.Size.Y.Offset, line1part1.Size.Y.Offset)

&#9;line2part1 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line2part1, sink.Parent.Name .. &quot; to&quot;)
&#9;line2part1.Position = UDim2.new(0, 0, 0, line1height)
&#9;
&#9;local sinkIcon = createSinkIcon(frame, line2part1)

&#9;line2part2 = Instance.new(&quot;TextLabel&quot;, frame)
&#9;stylizeScreenMessageLabel(line2part2, sink.Name)
&#9;line2part2.TextColor3 = SINK_BUTTON_TEXT_COLOR
&#9;line2part2.Position = UDim2.new(0,
&#9;&#9;sinkIcon.Position.X.Offset + sinkIcon.Size.X.Offset,
&#9;&#9;0, line2part1.Position.Y.Offset)

&#9;-- re-center
&#9;line1width = line1part2.Position.X.Offset + line1part2.Size.X.Offset
&#9;line2width = line2part2.Position.X.Offset + line2part2.Size.X.Offset

&#9;if line1width &gt; line2width then
&#9;&#9;local halfDelta = (line1width - line2width) / 2
&#9;&#9;addToAllXPositions({line2part1, sinkIcon, line2part2}, halfDelta)
&#9;else
&#9;&#9;local halfDelta = (line2width - line1width) / 2
&#9;&#9;addToAllXPositions({line1part1, sourceIcon, line1part2}, halfDelta)
&#9;end

&#9;frame.Size = UDim2.new(0, math.max(line1width, line2width) + 15,
&#9;&#9;&#9;0, 2 * line1height + 5)
&#9;frame.Position = UDim2.new(.5, -frame.Size.X.Offset/2, 0, 0)

&#9;clearScreenMessage()
&#9;SCREEN_MESSAGE = gui
end

--------------------------------------------------------------------------------
-- Hover

function setPartWireTransparency(part, transparency, wireRadius, texture)
&#9;for idx, child in ipairs(part:GetChildren()) do
&#9;&#9;if child:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;&#9;for idx2, recv in ipairs(child:GetAttachedReceivers()) do
&#9;&#9;&#9;&#9;addWireUiIfNotAlreadyThere(child, recv)
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[child][recv].Transparency = transparency
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[child][recv].WireRadius = wireRadius
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[child][recv].Texture = texture
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[child][recv].Color = BrickColor.new(&quot;Really black&quot;)
&#9;&#9;&#9;end
&#9;&#9;elseif child:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;local source = child.Source
&#9;&#9;&#9;if source ~= nil then
&#9;&#9;&#9;&#9;addWireUiIfNotAlreadyThere(source, child)
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[source][child].Transparency = transparency
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[source][child].WireRadius = wireRadius
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[source][child].Texture = texture
&#9;&#9;&#9;&#9;WIRE_LASSO_MAP[source][child].Color = BrickColor.new(&quot;Really black&quot;)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function canHighlight(part,model)
&#9;if (KNOWN_SOURCE_PARTS[part] and SELECTED_SOURCE == nil) or (KNOWN_SINK_PARTS[part] and SELECTED_SINK == nil) then
&#9;&#9;return true, part
&#9;elseif (KNOWN_SOURCE_PARTS[model] and SELECTED_SOURCE == nil) or (KNOWN_SINK_PARTS[model] and SELECTED_SINK == nil) then
&#9;&#9;return true, model
&#9;end

&#9;return false, nil
end

function hoverListener(mouse)
&#9;if mouse.Target == nil then return end

&#9;local part = mouse.Target
&#9;local model = findModel(part)
&#9;if LAST_HOVERED_PART ~= part and findModel(LAST_HOVERED_PART) ~= model then
&#9;&#9;clearHover()
&#9;&#9;local highlight, instance = canHighlight(part,model)
&#9;&#9;if highlight then
&#9;&#9;&#9;LAST_HOVERED_PART = part
&#9;&#9;&#9;ANNOTATIONS[model].Transparency = 0
&#9;&#9;&#9;buildScreenPanel(model, mouse.X, mouse.Y)
&#9;&#9;&#9;setPartWireTransparency(part, 0, ENHANCED_WIRE_RADIUS, &quot;&quot;)
&#9;&#9;else
&#9;&#9;&#9;LAST_HOVERED_PART = nil
&#9;&#9;end

&#9;&#9;-- Point the temporary wire to the LAST_HOVERED_PART if not nil,
&#9;&#9;-- otherwise point it at the character
&#9;&#9;local otherEndOfWire = nil
&#9;&#9;if LAST_HOVERED_PART ~= nil then
&#9;&#9;&#9;otherEndOfWire = LAST_HOVERED_PART
&#9;&#9;end
&#9;&#9;if SELECTED_SOURCE ~= nil then
&#9;&#9;&#9;getLocalLasso().To = otherEndOfWire
&#9;&#9;end
&#9;&#9;if SELECTED_SINK ~= nil then
&#9;&#9;&#9;getLocalLasso().From = otherEndOfWire
&#9;&#9;end
&#9;end
end

--------------------------------------------------------------------------------
-- Connect / Disconnect dialog

function addWireUiIfNotAlreadyThere(source, sink)
&#9;if WIRE_LASSO_MAP[source] == nil then
&#9;&#9;WIRE_LASSO_MAP[source] = {}
&#9;end
&#9;if WIRE_LASSO_MAP[source][sink] ~= nil then
&#9;&#9;return
&#9;end

&#9;pairLasso = Instance.new(&quot;FloorWire&quot;, getPlayerGui())
&#9;pairLasso.From = source.Parent
&#9;pairLasso.To = sink.Parent
&#9;pairLasso.Transparency = BASE_WIRE_TRANSPARENCY
&#9;pairLasso.Texture = &quot;&quot;
&#9;pairLasso.Name = WIRE_LASSO
&#9;pairLasso.Color = BrickColor.new(&quot;Really black&quot;)
&#9;WIRE_LASSO_MAP[source][sink] = pairLasso
end

function connectHelper(source, sink)
&#9;-- clear wires coming to sink
&#9;local old_source = sink.Source
&#9;if old_source ~= nil then
&#9;&#9;wire = WIRE_LASSO_MAP[old_source][sink]
&#9;&#9;if wire ~= nil then
&#9;&#9;&#9;wire:Remove()
&#9;&#9;&#9;WIRE_LASSO_MAP[old_source][sink] = nil
&#9;&#9;end
&#9;&#9;sink.Source = nil
&#9;end

&#9;sink.Source = source
&#9;addWireUiIfNotAlreadyThere(source, sink)
end

function makeSourceConnectCallback(source)
&#9;return function()
&#9;&#9;clearHover()
&#9;&#9;if SELECTED_SINK ~= nil then
&#9;&#9;&#9;connectHelper(source, SELECTED_SINK)
&#9;&#9;&#9;clearSelection()
&#9;&#9;&#9;clearScreenMessage()
&#9;&#9;&#9;for part, val in pairs(KNOWN_SINK_PARTS) do
&#9;&#9;&#9;&#9;local model = findModel(part)
&#9;&#9;&#9;&#9;ANNOTATIONS[model].Transparency = BASE_ANNOTATION_TRANSPARENCY
&#9;&#9;&#9;&#9;findBillboard(adornmentTable[model]).Enabled = true
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;SELECTED_SOURCE = source
&#9;&#9;&#9;getLocalLasso().From = source.Parent
&#9;&#9;&#9;getLocalLasso().To = nil
&#9;&#9;&#9;showSourceScreenMessage(SELECTED_SOURCE)
&#9;&#9;&#9;for part, val in pairs(KNOWN_SOURCE_PARTS) do
&#9;&#9;&#9;&#9;if not KNOWN_SINK_PARTS[part] then
&#9;&#9;&#9;&#9;&#9;local model = findModel(part)
&#9;&#9;&#9;&#9;&#9;ANNOTATIONS[model].Transparency = 1
&#9;&#9;&#9;&#9;&#9;findBillboard(adornmentTable[model]).Enabled = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function makeSinkConnectCallback(sink)
&#9;return function()
&#9;&#9;clearHover()
&#9;&#9;if SELECTED_SOURCE ~= nil then
&#9;&#9;&#9;connectHelper(SELECTED_SOURCE, sink)
&#9;&#9;&#9;clearSelection()
&#9;&#9;&#9;clearScreenMessage()
&#9;&#9;&#9;for part, val in pairs(KNOWN_SOURCE_PARTS) do
&#9;&#9;&#9;&#9;local model = findModel(part)
&#9;&#9;&#9;&#9;ANNOTATIONS[model].Transparency = BASE_ANNOTATION_TRANSPARENCY
&#9;&#9;&#9;&#9;findBillboard(adornmentTable[model]).Enabled = true
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;SELECTED_SINK = sink
&#9;&#9;&#9;getLocalLasso().From = nil
&#9;&#9;&#9;getLocalLasso().To = sink.Parent
&#9;&#9;&#9;showSinkScreenMessage(SELECTED_SINK)
&#9;&#9;&#9;for part, val in pairs(KNOWN_SINK_PARTS) do
&#9;&#9;&#9;&#9;if not KNOWN_SOURCE_PARTS[part] then
&#9;&#9;&#9;&#9;&#9;local model = findModel(part)
&#9;&#9;&#9;&#9;&#9;ANNOTATIONS[model].Transparency = 1
&#9;&#9;&#9;&#9;&#9;findBillboard(adornmentTable[model]).Enabled = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function makeControlButton(y_position, frame, sourceOrSink, textColor, iconImage, iconHoverImage, callbackBuilder)
&#9;local button = Instance.new(&quot;TextButton&quot;, frame)
&#9;button.Position = UDim2.new(.025, 0, 0, y_position)
&#9;button.Text = sourceOrSink.Name
&#9;button.TextXAlignment = Enum.TextXAlignment.Left
&#9;button.Style = Enum.ButtonStyle.Custom
&#9;button.BorderSizePixel = 0
&#9;button.BackgroundTransparency = 1
&#9;button.BackgroundColor3 = Color3.new(0, 0 ,0)
&#9;button.TextColor3 = textColor
&#9;button.Font = Enum.Font.ArialBold
&#9;button.FontSize = Enum.FontSize.Size18
&#9;button.ZIndex = 2
&#9;button.Size = UDim2.new(.95, 0, 0, button.TextBounds.y)
&#9;
&#9;local icon = Instance.new(&quot;ImageLabel&quot;, button)
&#9;icon.Image = iconImage
&#9;icon.ZIndex = 2
&#9;icon.Position = UDim2.new(0, button.TextBounds.x + 10, 0, -8)
&#9;icon.Size = UDim2.new(0, 35, 0 , 35)
&#9;icon.BackgroundTransparency = 1

&#9;button.MouseEnter:connect(function()
&#9;&#9;applyToConnectorsWires(sourceOrSink, function(wire)
&#9;&#9;&#9;wire.Texture = WIRE_TEXTURE
&#9;&#9;&#9;wire.Velocity = 2
&#9;&#9;end)
&#9;&#9;button.BackgroundTransparency = 0
&#9;&#9;button.TextColor3 = BUTTON_HOVER_TEXT_COLOR
&#9;&#9;icon.Image = iconHoverImage
&#9;end)
&#9;local leaveCallback = function()
&#9;&#9;applyToConnectorsWires(sourceOrSink, function(wire)
&#9;&#9;&#9;wire.Texture = &quot;&quot;
&#9;&#9;end)
&#9;&#9;button.BackgroundTransparency = 1
&#9;&#9;button.TextColor3 = textColor
&#9;&#9;icon.Image = iconImage
&#9;end
&#9;button.MouseLeave:connect(leaveCallback)
&#9;button.MouseButton1Click:connect(function()
&#9;&#9;callbackBuilder(sourceOrSink)()
&#9;&#9;leaveCallback()
&#9;end)
&#9;return button
end

function makeDisconnectCallback(source, sink)
&#9;clearHover()
&#9;sink.Source = nil
&#9;if WIRE_LASSO_MAP[source] ~= nil then
&#9;&#9;lassoUi = WIRE_LASSO_MAP[source][sink]
&#9;&#9;if lassoUi ~= nil then
&#9;&#9;&#9;lassoUi:Remove()
&#9;&#9;&#9;WIRE_LASSO_MAP[source][sink] = nil
&#9;&#9;end
&#9;end
end

function makeDisconnectButton(y_position, frame, localConnector, foreignConnector, textColor, iconImage)
&#9;local source = nil
&#9;local sink = nil
&#9;if localConnector:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;source = localConnector
&#9;&#9;sink = foreignConnector
&#9;else
&#9;&#9;source = foreignConnector
&#9;&#9;sink = localConnector
&#9;end

&#9;local button = Instance.new(&quot;TextButton&quot;, frame)
&#9;button.Position = UDim2.new(0, 17, 0, y_position)
&#9;button.Text = foreignConnector.Name .. &quot; (&quot; .. foreignConnector.Parent.Name .. &quot;)&quot; 
&#9;button.TextXAlignment = Enum.TextXAlignment.Left
&#9;button.Style = Enum.ButtonStyle.Custom
&#9;button.BackgroundTransparency = 1
&#9;button.BackgroundColor3 = Color3.new(0, 0 ,0)
&#9;button.TextColor3 = textColor
&#9;button.BorderSizePixel = 0
&#9;button.Font = Enum.Font.Arial
&#9;button.FontSize = Enum.FontSize.Size18
&#9;button.ZIndex = 3
&#9;button.Size = UDim2.new(.95, -10, 0, button.TextBounds.y + 2)
&#9;
&#9;local icon = Instance.new(&quot;ImageLabel&quot;, button)
&#9;icon.Image = iconImage
&#9;icon.Parent = button
&#9;icon.Position = UDim2.new(0, button.TextBounds.x + 10, 0, 2)
&#9;icon.Size = UDim2.new(0, 15, 0 , 15)
&#9;icon.BackgroundTransparency = 1

&#9;local buttonCons = {}

&#9;table.insert(buttonCons,
&#9;&#9;button.MouseButton1Click:connect(function() 
&#9;&#9;&#9;makeDisconnectCallback(source, sink)
&#9;&#9;end)
&#9;)
&#9;table.insert(buttonCons,
&#9;&#9;button.MouseEnter:connect(function()
&#9;&#9;&#9;button.BackgroundTransparency = 0
&#9;&#9;&#9;button.TextColor3 = BUTTON_HOVER_TEXT_COLOR
&#9;&#9;&#9;icon.Image = DISCONNECT_ICON_HOVER_TEXTURE
&#9;&#9;&#9;WIRE_LASSO_MAP[source][sink].Color = BrickColor.new(&quot;Really red&quot;)
&#9;&#9;end)
&#9;)
&#9;table.insert(buttonCons,
&#9;&#9;button.MouseLeave:connect(function()
&#9;&#9;button.BackgroundTransparency = 1
&#9;&#9;button.TextColor3 = textColor
&#9;&#9;icon.Image = iconImage
&#9;&#9;WIRE_LASSO_MAP[source][sink].Color = BrickColor.new(&quot;Really black&quot;)
&#9;end)
&#9;)

&#9;table.insert(buttonCons,
&#9;&#9;button.AncestryChanged:connect(function(child,parent)
&#9;&#9;&#9;if parent == nil then
&#9;&#9;&#9;&#9;for i = 1, #buttonCons do
&#9;&#9;&#9;&#9;&#9;buttonCons[i]:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;)

&#9;return button
end

function getPartSourcesAndSinks(part, sources,sinks)
&#9;for idx, child in ipairs(part:GetChildren()) do
&#9;&#9;if child:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;&#9;table.insert(sources, child)
&#9;&#9;elseif child:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;table.insert(sinks, child)
&#9;&#9;end
&#9;end
end

function getSourcesAndSinks(instance,sources,sinks)
&#9;if instance:IsA(&quot;BasePart&quot;) then
&#9;&#9;getPartSourcesAndSinks(instance, sources,sinks)
&#9;elseif instance:IsA(&quot;Model&quot;) then
&#9;&#9;local modelChildren = instance:GetChildren()
&#9;&#9;for i = 1, #modelChildren do
&#9;&#9;&#9;if modelChildren[i]:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;getPartSourcesAndSinks(modelChildren[i],sources,sinks)
&#9;&#9;&#9;elseif modelChildren[i]:IsA(&quot;Model&quot;) then
&#9;&#9;&#9;&#9;getSourcesAndSinks(modelChildren[i],sources,sinks)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

local function findFirstConnector(node)
&#9;if node:IsA(&quot;BasePart&quot;) then
&#9;&#9;for idx, child in ipairs(node:GetChildren()) do
&#9;&#9;&#9;if connector == nil and (child:IsA(&quot;CustomEvent&quot;) or child:IsA(&quot;CustomEventReceiver&quot;)) then
&#9;&#9;&#9;&#9;return child
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;local children = node:GetChildren()
&#9;&#9;if #children == 0 then
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;&#9;for i = 1, #children do
&#9;&#9;&#9;local subConnector = findFirstConnector(children[i])
&#9;&#9;&#9;if subConnector then return subConnector end
&#9;&#9;end
&#9;end
end

function buildScreenPanel(part, x, y)
&#9;sources = {}
&#9;sinks = {}
&#9;getSourcesAndSinks(part,sources,sinks)

&#9;local gui = nil
&#9;local mouseFrame = nil
&#9;if USE_BILLBOARD_GUI then
&#9;&#9;gui = Instance.new(&quot;BillboardGui&quot;, getPlayerGui())
&#9;&#9;gui.Name = &quot;WiringGui&quot;
&#9;&#9;gui.StudsOffset = Vector3.new(0, 1.5, 0)
&#9;&#9;gui.ExtentsOffset = Vector3.new(0, 1, 0)
&#9;&#9;gui.Adornee = part
&#9;&#9;gui.Active = true
&#9;&#9;gui.AlwaysOnTop = true
&#9;else 
&#9;&#9;gui = Instance.new(&quot;ScreenGui&quot;, getPlayerGui())
&#9;end

&#9;frame = Instance.new(&quot;Frame&quot;, gui)
&#9;frame.Style = Enum.FrameStyle.RobloxRound
&#9;frame.ZIndex = 1
&#9;frame.Active = true

&#9;local maxWidth = 0
&#9;local y_position = 5

&#9;if SELECTED_SOURCE == nil then
&#9;&#9;for idx, source in ipairs(sources) do
&#9;&#9;&#9;local button = makeControlButton(y_position, frame, source, SOURCE_BUTTON_TEXT_COLOR,
&#9;&#9;&#9;&#9;&#9;SOURCE_BUTTON_ICON_TEXTURE, SOURCE_BUTTON_ICON_HOVER_TEXTURE,
&#9;&#9;&#9;&#9;&#9;makeSourceConnectCallback)
&#9;&#9;&#9;maxWidth = math.max(1.25 * (button.TextBounds.x + BUTTON_ICON_WIDTH), maxWidth)
&#9;&#9;&#9;y_position = y_position + button.TextBounds.y

&#9;&#9;&#9;receivers = source:GetAttachedReceivers()
&#9;&#9;&#9;for sub_idx, receiver in ipairs(receivers) do
&#9;&#9;&#9;&#9;y_position = y_position + 2
&#9;&#9;&#9;&#9;addWireUiIfNotAlreadyThere(source, receiver)
&#9;&#9;&#9;&#9;local button = makeDisconnectButton(y_position, frame, source, receiver,
&#9;&#9;&#9;&#9;&#9;SOURCE_BUTTON_TEXT_COLOR, DISCONNECT_SOURCE_ICON_TEXTURE)
&#9;&#9;&#9;&#9;y_position = y_position + button.TextBounds.y
&#9;&#9;&#9;&#9;maxWidth = math.max(1.15 * (button.TextBounds.x + 17 + 25), maxWidth)
&#9;&#9;&#9;end
&#9;&#9;&#9;y_position = y_position + 5
&#9;&#9;end
&#9;end

&#9;if SELECTED_SINK == nil then
&#9;&#9;for idx, sink in ipairs(sinks) do
&#9;&#9;&#9;local button = makeControlButton(y_position, frame, sink, SINK_BUTTON_TEXT_COLOR,
&#9;&#9;&#9;&#9;&#9;SINK_BUTTON_ICON_TEXTURE, SINK_BUTTON_ICON_HOVER_TEXTURE,
&#9;&#9;&#9;&#9;&#9;makeSinkConnectCallback)
&#9;&#9;&#9;maxWidth = math.max(1.25 * (button.TextBounds.x + BUTTON_ICON_WIDTH), maxWidth)
&#9;&#9;&#9;y_position = y_position + button.TextBounds.y

&#9;&#9;&#9;local sender = sink.Source
&#9;&#9;&#9;if sender ~= nil then
&#9;&#9;&#9;&#9;y_position = y_position + 2
&#9;&#9;&#9;&#9;-- addWire takes source first
&#9;&#9;&#9;&#9;addWireUiIfNotAlreadyThere(sender, sink)
&#9;&#9;&#9;&#9;local button = makeDisconnectButton(y_position, frame, sink, sender,
&#9;&#9;&#9;&#9;&#9;SINK_BUTTON_TEXT_COLOR, DISCONNECT_SINK_ICON_TEXTURE)
&#9;&#9;&#9;&#9;y_position = y_position + button.TextBounds.y
&#9;&#9;&#9;&#9;maxWidth = math.max(1.15 * (button.TextBounds.x + 17 + 25), maxWidth)
&#9;&#9;&#9;end
&#9;&#9;&#9;y_position = y_position + 5
&#9;&#9;end
&#9;end

&#9;-- set size and position
&#9;if not getPlayerGui():FindFirstChild(&quot;ScreenGui&quot;) then
&#9;&#9;local screenGui = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;screenGui.Parent = getPlayerGui()
&#9;end

&#9;local screenSize = getPlayerGui().ScreenGui.AbsoluteSize
&#9;local menuWidth = maxWidth
&#9;local menuHeight = y_position + 17.5
&#9;if USE_BILLBOARD_GUI then

&#9;&#9;gui.Size = UDim2.new(0, menuWidth, 0, menuHeight + 150)
&#9;&#9;gui.SizeOffset = Vector2.new(0, -50.0 / (menuHeight + 150));
&#9;&#9;
&#9;&#9;local tail = Instance.new(&quot;ImageLabel&quot;, frame)
&#9;&#9;tail.Size = UDim2.new(0, 32, 0, 32)
&#9;&#9;tail.Position = UDim2.new(.5, -16, 1, 8)
&#9;&#9;tail.Image = TAIL_TEXTURE
&#9;&#9;tail.BackgroundTransparency = 1
&#9;&#9;tail.Visible = true

&#9;&#9;f = Instance.new(&quot;Frame&quot;, gui)
&#9;&#9;f.Size = UDim2.new(1.4, 0, 4, 0)
&#9;&#9;f.BackgroundTransparency = 1
&#9;&#9;f.ZIndex = 1
&#9;&#9;f.Active = true
&#9;&#9;b = Instance.new(&quot;TextButton&quot;, f)
&#9;&#9;b.ZIndex = 1
&#9;&#9;b.BackgroundTransparency = 1
&#9;&#9;b.Text = &quot;&quot;
&#9;&#9;b.BorderSizePixel = 0
&#9;&#9;b.Size = UDim2.new(1, 0, 1, 0)
&#9;&#9;b.MouseButton1Click:connect(function ()
&#9;&#9;&#9;local foundConnector = findFirstConnector(findModel(LAST_HOVERED_PART))
&#9;&#9;&#9;if foundConnector ~= nil and foundConnector:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;&#9;&#9;makeSourceConnectCallback(foundConnector)()
&#9;&#9;&#9;elseif foundConnector ~= nil and foundConnector:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;&#9;makeSinkConnectCallback(foundConnector)()
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;else
&#9;&#9;x = math.min(x - 9, screenSize.x - menuWidth) 
&#9;&#9;y = math.min(y - 9, screenSize.y - menuHeight)
&#9;&#9;frame.Position = UDim2.new(0, x, 0, y)
&#9;end

&#9;frame.Size = UDim2.new(0, menuWidth, 0, menuHeight)

&#9;WIRING_PANEL_MAP[part] = gui
end

--------------------------------------------------------------------------------
-- Tool.Equipped/Unequipped

Tool.Deselected:connect(function(mouse)
&#9;playerGui = getPlayerGui()
&#9;local interactiveCount = 0
&#9;LAST_HOVERED_PART = nil

&#9;local root
&#9;if isRestricted then
&#9;&#9;root = findMyBasePlate()
&#9;else
&#9;&#9;root = game.Workspace
&#9;end

&#9;setUpConfigurationService(interactiveCount)

&#9;if interactiveCount == 0 then
&#9;&#9;warnNoWireableParts()
&#9;end

&#9;getLocalLasso().Texture = WIRE_TEXTURE
&#9;getLocalLasso().WireRadius = ENHANCED_WIRE_RADIUS
&#9;clearSelection()

&#9;if isRestricted then
&#9;&#9;mouse.TargetFilter = game.Workspace.BaseplateBumpers
&#9;end

&#9;mouseMoveCon = mouse.Move:connect(function() hoverListener(mouse) end)
&#9;mouseButtonDownCon = mouse.Button1Down:connect(function()
&#9;&#9;if LAST_HOVERED_PART ~= nil then return end

&#9;&#9;clearSelection()
&#9;&#9;clearScreenMessage()
&#9;&#9;clearHover()
&#9;&#9;local annotationCount = 0
&#9;&#9;for part, annotation in pairs(ANNOTATIONS) do
&#9;&#9;&#9;annotation.Transparency = BASE_ANNOTATION_TRANSPARENCY
&#9;&#9;&#9;annotationCount = annotationCount + 1
&#9;&#9;end
&#9;&#9;if annotationCount == 0 then
&#9;&#9;&#9;warnNoWireableParts()
&#9;&#9;elseif time() - LAST_CLICK_TIME &lt; CLICK_HELP_TIME_DELTA then
&#9;&#9;&#9;warnNotClickingWireablePart()
&#9;&#9;end
&#9;&#9;LAST_CLICK_TIME = time()
&#9;end)
&#9;-- TODO: onkeydown/onmouse2down, prevent hover from triggering
&#9;-- until the up event comes
end)

Tool.Deselected:connect(function()
&#9;playerGui = getPlayerGui()

&#9;destroyConfigurationService()

&#9;if mouseMoveCon then mouseMoveCon:disconnect() end
&#9;if mouseButtonDownCon then mouseButtonDownCon:disconnect() end

&#9;if playerGui:FindFirstChild(&quot;CenterHint&quot;, true) then
&#9;&#9;local centerHint = getPlayerGui().Gui.Hints.CenterHint
&#9;&#9;centerHint.Delete.Disabled = false
&#9;end

&#9;-- TODO: simplify these side effects
&#9;-- call clearHover before removing annotations, because
&#9;-- clear hover resets annotation boxes. Also before clearing
&#9;-- lassos because this may create lassos
&#9;clearHover()

&#9;for part, gui in pairs(WIRING_PANEL_MAP) do
&#9;&#9;if gui then gui:Remove() end
&#9;end
&#9;WIRING_PANEL_MAP = {}

&#9;for source, submap in pairs(WIRE_LASSO_MAP) do
&#9;&#9;for sink, wire in pairs(submap) do
&#9;&#9;&#9;wire:Remove()
&#9;&#9;end
&#9;end
&#9;WIRE_LASSO_MAP = {}

&#9;for k,box in pairs(ANNOTATIONS) do
&#9;&#9;box:Remove()
&#9;end
&#9;ANNOTATIONS = {}

&#9;KNOWN_SOURCE_PARTS = {}
&#9;KNOWN_SINK_PARTS = {}

&#9;clearSelection()
&#9;clearScreenMessage()
&#9;LAST_HOVERED_PART = nil
end)

function findBillboard(guiTable)
&#9;if not guiTable then return end

&#9;for i = 1, #guiTable do
&#9;&#9;if guiTable[i]:IsA(&quot;BillboardGui&quot;) then
&#9;&#9;&#9;return guiTable[i]
&#9;&#9;end
&#9;end
end

function getBillboard(adornee)
&#9;local guiKey = adornee

&#9;
&#9;local billboard = findBillboard(adornmentTable[guiKey])
&#9;if not billboard then
&#9;&#9;local screen = Instance.new(&quot;BillboardGui&quot;)
&#9;&#9;screen.Name = adornee.Name .. &quot;BadgeGUI&quot;
&#9;&#9;screen.Size = UDim2.new(1.5,0,1.5,0)
&#9;&#9;screen.Enabled = true
&#9;&#9;screen.Active = true
&#9;&#9;screen.AlwaysOnTop = true
&#9;&#9;screen.ExtentsOffset = Vector3.new(0,0,0)
&#9;&#9;screen.Adornee = adornee
&#9;&#9;screen.Parent = game.Players.LocalPlayer.PlayerGui
&#9;&#9;table.insert(adornmentTable[guiKey],screen)

&#9;&#9;local badgeFrame = Instance.new(&quot;Frame&quot;)
&#9;&#9;badgeFrame.Name = &quot;BadgeFrame&quot;
&#9;&#9;badgeFrame.Size = UDim2.new(2,0,1,0)
&#9;&#9;badgeFrame.Position = UDim2.new(-0.5,0,0,0)
&#9;&#9;badgeFrame.BackgroundTransparency = 1
&#9;&#9;badgeFrame.Parent = screen

&#9;&#9;return screen
&#9;end

&#9;return billboard
end

function repositionBadges(badgeFrame)
&#9;local badges = badgeFrame:GetChildren()
&#9;if #badges == 1 then
&#9;&#9;badges[1].Position = UDim2.new(0.25,0,0,0)
&#9;elseif #badges == 2 then
&#9;&#9;badges[1].Position = UDim2.new(0,0,0,0)
&#9;&#9;badges[2].Position = UDim2.new(0.5,0,0)
&#9;end
end

function createBadge(adornee,type)
&#9;local screen = getBillboard(adornee)

&#9;local wiringBadge = Instance.new(&quot;ImageLabel&quot;)
&#9;wiringBadge.Name = type .. &quot;Badge&quot;
&#9;wiringBadge.BackgroundTransparency = 1
&#9;if type == &quot;Receiver&quot; then
&#9;&#9;wiringBadge.Image = SOURCE_BADGE_TEXTURE
&#9;else
&#9;&#9;wiringBadge.Image = SINK_BADGE_TEXTURE
&#9;end

&#9;wiringBadge.Position = UDim2.new(0.25,0,0,0)
&#9;wiringBadge.Size = UDim2.new(0.5,0,1,0)
&#9;wiringBadge.Parent = screen.BadgeFrame
&#9;wiringBadge.Changed:connect(function(prop)
&#9;&#9;if prop == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;if wiringBadge.AbsoluteSize.X &lt; 10 then
&#9;&#9;&#9;&#9;wiringBadge.Visible = false
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;wiringBadge.Visible = true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)

&#9;repositionBadges(screen.BadgeFrame)
end

function createAdornment(adornee,adornColor,type)
&#9;local box = Instance.new(&quot;SelectionBox&quot;)
&#9;box.Color = adornColor
&#9;box.Name = adornee.Name .. &quot;Selection&quot; .. tostring(type)
&#9;box.Adornee = adornee
&#9;box.Transparency = 0.5
&#9;box.Parent = game.Players.LocalPlayer.PlayerGui
&#9;if not adornmentTable[adornee] then
&#9;&#9;adornmentTable[adornee] = {}
&#9;end

&#9;ANNOTATIONS[adornee] = box

&#9;table.insert(adornmentTable[adornee],box)
&#9;createBadge(adornee,type)
end

function removeAdornment(adornee, type)
&#9;local key = adornee
&#9;if not adornmentTable[key] then return end
&#9;for i = 1, #adornmentTable[key] do
&#9;&#9;adornmentTable[key][i]:remove()
&#9;end
&#9;adornmentTable[key] = nil
end

function eventReceiverAdded(receiver,interactiveCount)
&#9;receiverTable[receiver] = findModel(receiver.Parent)
&#9;interactiveCount = interactiveCount + 1
&#9;createAdornment(receiverTable[receiver], BrickColor.new(&quot;Lime green&quot;), &quot;Receiver&quot;)
&#9;setPartWireTransparency(receiver.Parent, BASE_WIRE_TRANSPARENCY, BASE_WIRE_RADIUS, &quot;&quot;)

&#9;KNOWN_SINK_PARTS[receiver.Parent] = true
&#9;KNOWN_SINK_PARTS[receiverTable[receiver]]= true
end

function eventAdded(event,interactiveCount)
&#9;eventTable[event] = findModel(event.Parent)
&#9;interactiveCount = interactiveCount + 1
&#9;createAdornment(eventTable[event], BrickColor.new(&quot;Bright orange&quot;), &quot;Event&quot;)
&#9;setPartWireTransparency(event.Parent, BASE_WIRE_TRANSPARENCY, BASE_WIRE_RADIUS, &quot;&quot;)

&#9;KNOWN_SOURCE_PARTS[event.Parent] = true
&#9;KNOWN_SOURCE_PARTS[eventTable[event]]= true
end

function eventReceiverRemoved(receiver)
&#9;if not receiverTable[receiver] then return end

&#9;KNOWN_SINK_PARTS[receiver.Parent] = false
&#9;KNOWN_SINK_PARTS[receiverTable[receiver]]= false

&#9;removeAdornment(receiverTable[receiver], BrickColor.new(&quot;Bright orange&quot;))
&#9;receiverTable[receiver] = nil
end

function eventRemoved(event)
&#9;if not eventTable[event] then return end

&#9;KNOWN_SOURCE_PARTS[event.Parent] = false
&#9;KNOWN_SOURCE_PARTS[eventTable[event]]= false

&#9;removeAdornment(eventTable[event], BrickColor.new(&quot;Lime green&quot;))
&#9;eventTable[event] = nil
end

function setUpConfigurationService(interactiveCount)
&#9;ServiceConnections = {}
&#9;local collectionService = game:GetService(&quot;CollectionService&quot;)

&#9;-- first lets check if anything already exists
&#9;local receivers = collectionService:GetCollection(&quot;CustomEventReceiver&quot;)
&#9;if receivers then
&#9;&#9;for pos, receiver in pairs(receivers) do
&#9;&#9;&#9;eventReceiverAdded(receiver, interactiveCount)
&#9;&#9;end
&#9;end

&#9;local events = collectionService:GetCollection(&quot;CustomEvent&quot;)
&#9;if events then
&#9;&#9;for pos, event in pairs(events) do
&#9;&#9;&#9;eventAdded(event, interactiveCount)
&#9;&#9;end
&#9;end

&#9;-- Now lets listen for any future additions/removals
&#9;ServiceConnections[#ServiceConnections+1] = collectionService.ItemAdded:connect(function(instance)
&#9;&#9;if instance:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;eventReceiverAdded(instance, interactiveCount)
&#9;&#9;elseif instance:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;&#9;eventAdded(instance, interactiveCount)
&#9;&#9;end 
&#9;end)
&#9;ServiceConnections[#ServiceConnections+1] = collectionService.ItemRemoved:connect(function(instance)
&#9;&#9;if instance:IsA(&quot;CustomEventReceiver&quot;) then
&#9;&#9;&#9;eventReceiverRemoved(instance)
&#9;&#9;elseif instance:IsA(&quot;CustomEvent&quot;) then
&#9;&#9;&#9;eventRemoved(instance)
&#9;&#9;end
&#9;end)
end

function destroyConfigurationService()
&#9;-- first lets destroy the collection service
&#9;for index, connection in pairs(ServiceConnections) do
&#9;&#9;connection:disconnect()
&#9;end
&#9;ServiceConnections = {}

&#9;-- now lets remove all of our collection service objects that were generated
&#9;for event, object in pairs(eventTable) do
&#9;&#9;eventRemoved(event)
&#9;end
&#9;for eventReceiver, object in pairs(receiverTable) do
&#9;&#9;eventReceiverRemoved(eventReceiver)
&#9;end
end

</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX502">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">AddItems</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX503">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">AddItemsLocal</string>
								<ProtectedString name="Source">Bin = script.Parent
Mode = 4
player = game.Players.LocalPlayer
guis = Bin.AddItemGui:clone()
isRestricted = false

function BuildPermission(brick)
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end

function onClick(mouse) 
local m
target = mouse.Target
if not BuildPermission(target) then return end
if target ~=nil then 
if not target.Locked then 
if Mode == 1 then
m = Instance.new(&quot;Fire&quot;)
m.Color = Color3.new(gui.R.Text,gui.G.Text,gui.B.Text)
m.SecondaryColor = Color3.new(gui.R2.Text,gui.G2.Text,gui.B2.Text)
elseif Mode == 2 then
m = Instance.new(&quot;Smoke&quot;)
m.Color = Color3.new(gui.R.Text,gui.G.Text,gui.B.Text)
elseif Mode == 3 then
m = Instance.new(&quot;Sparkles&quot;)
m.SparkleColor = Color3.new(gui.R.Text,gui.G.Text,gui.B.Text)
elseif Mode == 4 then
t = target:GetChildren()
for i = 1,#t do
w = {&quot;Sparkles&quot;,&quot;Fire&quot;,&quot;Smoke&quot;}
for r = 1,#w do
if t[i].className == w[r] then
t[i]:Remove()
end
end
end
if m then m.Parent = target end
end 
end 
end 

function connectup(guibleh) 
guiframe = guibleh.Frame
guiframe.Fire.MouseButton1Down:connect(function()mode=1 end)
guiframe.Smoke.MouseButton1Down:connect(function()mode=2 end)
guiframe.Sparkles.MouseButton1Down:connect(function()mode=3 end)
guiframe.Remov.MouseButton1Down:connect(function()mode=4 end)
end

function onSelected(mouse) 
gui = guis:Clone()
connectup(gui) 
gui.Parent = player.PlayerGui
mouse.Icon = &quot;rbxasset://textures\\GunCursor.png&quot; 
mouse.Button1Down:connect(function() onClick(mouse) end) 
end 

Bin.Selected:connect(onSelected) 
Bin.Deselected:connect(function() gui:Remove() end)</ProtectedString>
							</Properties>
						</Item>
						<Item class="ScreenGui" referent="RBX504">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">AddItemGui</string>
							</Properties>
							<Item class="Frame" referent="RBX505">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">Frame</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>200</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">3</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextButton" referent="RBX506">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4278190080</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Fire</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0.100000001</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Fire</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX507">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4278190080</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Smoke</string>
										<UDim2 name="Position">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.100000001</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Smoke</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX508">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4278190080</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Sparkles</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Sparkles</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX509">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190335</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">B</string>
										<UDim2 name="Position">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX510">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278255360</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">G</string>
										<UDim2 name="Position">
											<XS>0.600000024</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX511">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294901760</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">R</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX512">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278255360</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">G2</string>
										<UDim2 name="Position">
											<XS>0.600000024</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX513">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190335</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">B2</string>
										<UDim2 name="Position">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX514">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294901760</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">R2</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.300000012</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0</string>
										<Color3 name="TextColor3">4279970357</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">true</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX515">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4278190080</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Remov</string>
										<UDim2 name="Position">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.150000006</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>0</XO>
											<YS>0.0500000007</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Remove items</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX516">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Decal</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX517">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">DecalLocal</string>
								<ProtectedString name="Source">player = game.Players.LocalPlayer
players_gui = script.Parent
mygui = script.Parent.DecalAdderGui:clone()
texture = Instance.new(&quot;Texture&quot;)
decal = Instance.new(&quot;Decal&quot;)


isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end

function onTexInputClicked() 
&#9;if mygui.Frame.texInput.Text == &quot;X&quot; then
&#9;&#9;mygui.Frame.texInput.Text = &quot;&quot;
&#9;elseif mygui.Frame.texInput.Text == &quot;&quot; then
&#9;&#9;mygui.Frame.texInput.Text = &quot;X&quot; 
&#9;end 
end 
function onClicked(target, face) 
&#9;if not BuildPermission(target) then return end
&#9;if target then 
&#9;&#9;if not target.Locked then 
&#9;&#9;&#9;surface.Adornee = target 
&#9;&#9;&#9;surface.TargetSurface = face 
&#9;&#9;&#9;if mygui.Frame.texInput.Text == &quot;X&quot; and tonumber(mygui.Frame.idInput.Text) ~= nil and tonumber(mygui.Frame.uInput.Text) ~= nil and tonumber(mygui.Frame.vInput.Text) ~= nil then 
&#9;&#9;&#9;&#9;local t = texture:clone() 
&#9;&#9;&#9;&#9;t.Parent = target 
&#9;&#9;&#9;&#9;t.Face = face 
&#9;&#9;&#9;&#9;t.Texture = &quot;http://www.roblox.com/asset/?id=&quot;..mygui.Frame.idInput.Text 
&#9;&#9;&#9;&#9;t.StudsPerTileU = tonumber(mygui.Frame.uInput.Text) 
&#9;&#9;&#9;&#9;t.StudsPerTileV = tonumber(mygui.Frame.vInput.Text) 
&#9;&#9;&#9;elseif mygui.Frame.texInput.Text == &quot;&quot; and tonumber(mygui.Frame.idInput.Text) ~= nil then 
&#9;&#9;&#9;&#9;local d = decal:clone() 
&#9;&#9;&#9;&#9;d.Parent = target 
&#9;&#9;&#9;&#9;d.Face = face 
&#9;&#9;&#9;&#9;d.Texture = &quot;http://www.roblox.com/asset/?id=&quot;..mygui.Frame.idInput.Text 
&#9;&#9;&#9;end 
&#9;&#9;end 
&#9;end 
end 

function onMoved(target, face) 
&#9;if not BuildPermission(target) then return end
&#9;if target then 
&#9;&#9;if not target.Locked then 
&#9;&#9;&#9;surface.Adornee = target 
&#9;&#9;&#9;surface.TargetSurface = face 
&#9;&#9;&#9;if mygui.Frame.texInput.Text == &quot;X&quot; and tonumber(mygui.Frame.idInput.Text) ~= nil and tonumber(mygui.Frame.uInput.Text) ~= nil and tonumber(mygui.Frame.vInput.Text) ~= nil then 
&#9;&#9;&#9;&#9;texture.Parent = target 
&#9;&#9;&#9;&#9;texture.Face = face 
&#9;&#9;&#9;&#9;texture.Texture = &quot;http://www.roblox.com/asset/?id=&quot;..mygui.Frame.idInput.Text 
&#9;&#9;&#9;&#9;texture.StudsPerTileU = tonumber(mygui.Frame.uInput.Text) 
&#9;&#9;&#9;&#9;texture.StudsPerTileV = tonumber(mygui.Frame.vInput.Text) 
&#9;&#9;&#9;elseif mygui.Frame.texInput.Text == &quot;&quot; and tonumber(mygui.Frame.idInput.Text) ~= nil then 
&#9;&#9;&#9;&#9;decal.Parent = target 
&#9;&#9;&#9;&#9;decal.Face = face 
&#9;&#9;&#9;&#9;decal.Texture = &quot;http://www.roblox.com/asset/?id=&quot;..mygui.Frame.idInput.Text 
&#9;&#9;&#9;end 
&#9;&#9;else 
&#9;&#9;&#9;surface.Adornee = nil 
&#9;&#9;&#9;texture.Parent = nil 
&#9;&#9;&#9;decal.Parent = nil 
&#9;&#9;end 
&#9;else 
&#9;&#9;texture.Parent = nil 
&#9;&#9;decal.Parent = nil 
&#9;&#9;surface.Adornee = nil 
&#9;end 
end 
function onSelected(mouse)
&#9;mygui.Parent = player.PlayerGui 
&#9;mouse.Button1Down:connect(function() onClicked(mouse.Target, mouse.TargetSurface) end) 
&#9;mouse.Move:connect(function() onMoved(mouse.Target, mouse.TargetSurface) end) 
&#9;mygui.Frame.texInput.MouseButton1Click:connect(onTexInputClicked) 
end 
function onDeselected()
&#9;pcall(function()surface:remove() end)
&#9;pcall(function()texture:remove()  end)
&#9;pcall(function()decal:remove()  end)
&#9;pcall(function()surface.Adornee = nil  end)
&#9;pcall(function()mygui.Parent = nil end)
end 
script.Parent.Selected:connect(onSelected) 
script.Parent.Deselected:connect(onDeselected)</ProtectedString>
							</Properties>
						</Item>
						<Item class="ScreenGui" referent="RBX518">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">DecalAdderGui</string>
							</Properties>
							<Item class="Frame" referent="RBX519">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4278190080</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279308561</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<string name="Name">Frame</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>70</XO>
										<YS>0</YS>
										<YO>60</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>150</XO>
										<YS>0</YS>
										<YO>120</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">3</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextLabel" referent="RBX520">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294177517</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">TextLabel</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Decal GUI</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX521">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294177517</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">DecalId</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>5</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Decal ID:</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX522">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294177517</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">UseTexture</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>30</XO>
											<YS>0</YS>
											<YO>45</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>90</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">Insert as texture</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX523">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279308561</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">idInput</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>60</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>-65</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text"></string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0.25</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX524">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279308561</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">texInput</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>5</XO>
											<YS>0</YS>
											<YO>45</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text"></string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0.25</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX525">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294177517</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">U</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>5</XO>
											<YS>0</YS>
											<YO>70</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">U:</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX526">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279308561</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">uInput</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>30</XO>
											<YS>0</YS>
											<YO>70</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>-30</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text"></string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0.25</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextBox" referent="RBX527">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279308561</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="ClearTextOnFocus">true</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="MultiLine">false</bool>
										<string name="Name">vInput</string>
										<UDim2 name="Position">
											<XS>0.5</XS>
											<XO>30</XO>
											<YS>0</YS>
											<YO>70</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>-35</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text"></string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0.25</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX528">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294177517</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">V</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>80</XO>
											<YS>0</YS>
											<YO>70</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>20</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">V:</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX529">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">SeatBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX530">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;Seat&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX531">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">ClassicTool</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="ObjectValue" referent="RBX532">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">Mouse</string>
								<Ref name="Value">null</Ref>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX533">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ClassicToolController</string>
								<ProtectedString name="Source">local Tool = script.Parent

local keyUpCon = nil
local gui = nil

local connections = {}
local buttons = {}

local colorButton,SurfaceButton,MaterialButton,ResizeButton,draggerButton = nil

game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset?id=59103051&quot;)
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset?id=59103080&quot;)
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset?id=59103092&quot;)
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset?id=59103119&quot;)
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset?id=59103152&quot;)

function makeImageButton(buttonName, image, position, parent, hotKeyString)
&#9;local button = Instance.new(&quot;ImageButton&quot;)
&#9;button.Name = buttonName
&#9;button.Style = Enum.ButtonStyle.RobloxButton
&#9;button.Size = UDim2.new(0,45,0,45)
&#9;if position then button.Position = position end
&#9;button.Parent = parent

&#9;local buttonImage = Instance.new(&quot;ImageLabel&quot;)
&#9;buttonImage.Name = &quot;ButtonImage&quot;
&#9;buttonImage.BackgroundTransparency = 1
&#9;buttonImage.Size = UDim2.new(1,12,1,12)
&#9;buttonImage.Position = UDim2.new(0,-6,0,-6)
&#9;buttonImage.Image = image
&#9;buttonImage.Parent = button

&#9;if hotKeyString then
&#9;&#9;local textShortcut = Instance.new(&quot;TextLabel&quot;)
&#9;&#9;textShortcut.Text = hotKeyString
&#9;&#9;textShortcut.Name = &quot;TextShortcut&quot;
&#9;&#9;textShortcut.Font = Enum.Font.ArialBold
&#9;&#9;textShortcut.BackgroundTransparency = 1
&#9;&#9;textShortcut.FontSize = Enum.FontSize.Size14
&#9;&#9;textShortcut.TextColor3 = Color3.new(1,1,1)
&#9;&#9;textShortcut.Size = UDim2.new(0,textShortcut.TextBounds.X,0,textShortcut.TextBounds.X)
&#9;&#9;textShortcut.Parent = button
&#9;end

&#9;return button
end

function deactivateTool(script)
&#9;local enable = script:FindFirstChild(&quot;Active&quot;)
&#9;if enable and enable:IsA(&quot;BoolValue&quot;) then
&#9;&#9;enable.Value = false
&#9;end
end

function deactivateAllTools()
&#9;local toolChildren = Tool:GetChildren()
&#9;for i = 1, #toolChildren do
&#9;&#9;if toolChildren[i]:IsA(&quot;BaseScript&quot;) and toolChildren[i] ~= script then
&#9;&#9;&#9;deactivateTool(toolChildren[i])
&#9;&#9;end
&#9;end
&#9;for i = 1, #buttons do
&#9;&#9;buttons[i].Selected = false
&#9;end
end

function goToTool(toolName, button)
&#9;deactivateAllTools()
&#9;button.Selected = true

&#9;wait() -- give scripts a heartbeat to get set straight

&#9;local toolScript = Tool:FindFirstChild(toolName)
&#9;if toolScript and toolScript:IsA(&quot;BaseScript&quot;) then
&#9;&#9;local enable = toolScript:FindFirstChild(&quot;Active&quot;)
&#9;&#9;if enable and enable:IsA(&quot;BoolValue&quot;) then
&#9;&#9;&#9;enable.Value = true
&#9;&#9;end
&#9;end
end

function makeClassicControlGui()
&#9;clearAllConnections()

&#9;local classicGui = Instance.new(&quot;ScreenGui&quot;)
&#9;classicGui.Name = &quot;ClassicGui&quot;
&#9;
&#9;local classicFrame = Instance.new(&quot;Frame&quot;)
&#9;classicFrame.Name = &quot;ClassicFrame&quot;
&#9;classicFrame.BackgroundTransparency = 1
&#9;classicFrame.Size = UDim2.new(0,246,0,45)
&#9;classicFrame.Position = UDim2.new(0.5, -113, 1, -130)
&#9;classicFrame.Parent = classicGui

&#9;colorButton = makeImageButton(&quot;ColorButton&quot;,&quot;http://www.roblox.com/asset?id=59103051&quot;,UDim2.new(0,0,0.5,-23), classicFrame, &quot;F&quot;)
&#9;local colorCon = colorButton.MouseButton1Click:connect(function() goToTool(&quot;Color&quot;, colorButton) end)
&#9;table.insert(connections,colorCon)
&#9;table.insert(buttons,colorButton)

&#9;SurfaceButton = makeImageButton(&quot;SurfaceButton&quot;,&quot;http://www.roblox.com/asset?id=59103080&quot;,UDim2.new(0,90,0.5,-23), classicFrame, &quot;H&quot;)
&#9;local surfaceCon = SurfaceButton.MouseButton1Click:connect(function() goToTool(&quot;Surface&quot;, SurfaceButton) end)
&#9;table.insert(connections,surfaceCon)
&#9;table.insert(buttons,SurfaceButton)

&#9;MaterialButton = makeImageButton(&quot;MaterialButton&quot;,&quot;http://www.roblox.com/asset?id=59103092&quot;,UDim2.new(0,45,0.5,-23), classicFrame, &quot;G&quot;)
&#9;local materialCon = MaterialButton.MouseButton1Click:connect(function() goToTool(&quot;Material&quot;, MaterialButton) end)
&#9;table.insert(connections,materialCon)
&#9;table.insert(buttons,MaterialButton)

&#9;ResizeButton = makeImageButton(&quot;ResizeButton&quot;,&quot;http://www.roblox.com/asset?id=59103119&quot;,UDim2.new(0,180,0.5,-23), classicFrame, &quot;K&quot;)
&#9;local resizeCon = ResizeButton.MouseButton1Click:connect(function() goToTool(&quot;Resize&quot;, ResizeButton) end)
&#9;table.insert(connections,resizeCon)
&#9;table.insert(buttons,ResizeButton)

&#9;draggerButton = makeImageButton(&quot;ResizeButton&quot;,&quot;http://www.roblox.com/asset?id=59103152&quot;,UDim2.new(0,135,0.5,-23), classicFrame, &quot;J&quot;)
&#9;local draggerCon = draggerButton.MouseButton1Click:connect(function() goToTool(&quot;Dragger&quot;, draggerButton) end)
&#9;table.insert(connections,draggerCon)
&#9;table.insert(buttons,draggerButton)

&#9;return classicGui
end

function clearAllConnections()
&#9;for i = 1, #connections do
&#9;&#9;connections[i]:disconnect()
&#9;end
&#9;connections = {}
end


function hotKey(key)
&#9;key = key:lower()

&#9;if key == &quot;f&quot; then
&#9;&#9;goToTool(&quot;Color&quot;, colorButton)
&#9;elseif key == &quot;g&quot; then
&#9;&#9;goToTool(&quot;Material&quot;, MaterialButton)
&#9;elseif key == &quot;h&quot; then
&#9;&#9;goToTool(&quot;Surface&quot;, SurfaceButton)
&#9;elseif key == &quot;j&quot; then
&#9;&#9;goToTool(&quot;Dragger&quot;, draggerButton)
&#9;elseif key == &quot;k&quot; then
&#9;&#9;goToTool(&quot;Resize&quot;, ResizeButton)
&#9;end
end


function onEquippedLocal(mouse)
&#9;Tool.Mouse.Value = mouse
&#9;if not gui then
&#9;&#9;gui = makeClassicControlGui()
&#9;end
&#9;gui.Parent = game.Players.LocalPlayer.PlayerGui

&#9;keyUpCon = mouse.KeyUp:connect(function(key) hotKey(key) end)
end

function onUnequippedLocal()
&#9;if keyUpCon then keyUpCon:disconnect() end
&#9;deactivateAllTools()
&#9;gui.Parent = nil&#9;
end

Tool.Selected:connect(onEquippedLocal)
Tool.Deselected:connect(onUnequippedLocal)
</ProtectedString>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX534">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Color</string>
								<ProtectedString name="Source">local Tool = script.Parent

enabled = true
local menu
local origTexture = &#9;Tool.TextureId
local localAssetBase = &quot;rbxasset://textures/ui/&quot;
local currentColorButton = nil
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/color_sel.png&quot;)

local buttonDownCon, mouseMoveCon
local clickCons = {}


isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end

function onButton1Down(mouse)
&#9;if not enabled then
&#9;&#9;return
&#9;end

&#9;enabled = false
&#9;mouse.Icon = &quot;rbxasset://textures\\GunWaitCursor.png&quot;

&#9;wait(.5)
&#9;mouse.Icon = &quot;rbxasset://textures\\GunCursor.png&quot;
&#9;enabled = true

end


local selectionBox
local selectionLasso


function setSelectionBox(part) 
&#9;unsetSelectionBox()
&#9;selectionBox.Adornee = part
end
function unsetSelectionBox() 
&#9;selectionBox.Adornee = nil
end

function canSelectObject(part)
&#9;return part and not (part.Locked) --and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
end

function on3dButton1Down(mouse) 
&#9;local part = mouse.Target
&#9;if canSelectObject(part) then
&#9;&#9;if Instance.Lock(part) then
&#9;&#9;&#9;color =  Tool.Color.CurrentColor.Value
&#9;&#9;&#9;if color == nil then
&#9;&#9;&#9;&#9;Instance.Unlock(part)
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;part.BrickColor = color
&#9;&#9;&#9;Instance.Unlock(part)
&#9;&#9;end
&#9;end
end

function on3dMouseMove(mouse) 
&#9;mouse.Icon =&quot;rbxasset://textures\\FillCursor.png&quot;
&#9;local part = mouse.Target
&#9;if canSelectObject(part) then
&#9;&#9;setSelectionBox(part)
&#9;else
&#9;&#9;unsetSelectionBox()
&#9;end
end

function makeColorMenu()
&#9;local paintGui = Instance.new(&quot;ScreenGui&quot;)
&#9;paintGui.Name = &quot;PaintGui&quot;

&#9;local paintMenu = Instance.new(&quot;ImageLabel&quot;)
&#9;paintMenu.Name = &quot;PaintMenu&quot;
&#9;paintMenu.Position = UDim2.new(0,0,1,-600)
&#9;paintMenu.Size = UDim2.new(0,120,0,500)
&#9;paintMenu.BackgroundTransparency = 1
&#9;paintMenu.ZIndex = 2
&#9;paintMenu.Image = localAssetBase .. &quot;PaintMenu.png&quot;
&#9;paintMenu.Parent = paintGui

&#9;local paintColorButton = Instance.new(&quot;ImageButton&quot;)
&#9;paintColorButton.BorderSizePixel = 0
&#9;paintColorButton.ZIndex = 3
&#9;paintColorButton.Size = UDim2.new(0.200000003, 0,0.0500000007, 0)

&#9;local selection = Instance.new(&quot;Frame&quot;)
&#9;selection.Name = &quot;Selection&quot;
&#9;selection.BorderSizePixel = 0
&#9;selection.BackgroundColor3 = Color3.new(1,1,1)
&#9;selection.BackgroundTransparency = 1
&#9;selection.ZIndex = 2
&#9;selection.Size = UDim2.new(1.1,0,1.1,0)
&#9;selection.Position = UDim2.new(-0.05,0,-0.05,0)
&#9;selection.Parent = paintColorButton

&#9;local header  = 0.08
&#9;local spacing = 18

&#9;local count = 1

&#9;local function findNextColor()
&#9;&#9;colorName = tostring(BrickColor.new(count))
&#9;&#9;while colorName == &quot;Medium stone grey&quot; do
&#9;&#9;&#9;count = count + 1
&#9;&#9;&#9;colorName = tostring(BrickColor.new(count))
&#9;&#9;end
&#9;&#9;return count
&#9;end

&#9;for i = 0,15 do
&#9;&#9;for j = 1, 4 do
&#9;&#9;&#9;newButton = paintColorButton:clone()
&#9;&#9;&#9;newButton.BackgroundColor3 = BrickColor.new(findNextColor()).Color
&#9;&#9;&#9;newButton.Name = tostring(BrickColor.new(count))
&#9;&#9;&#9;count = count + 1
&#9;&#9;&#9;if j == 1 then newButton.Position = UDim2.new(0.08,0,i/spacing + header,0)
&#9;&#9;&#9;elseif j == 2 then newButton.Position = UDim2.new(0.29,0,i/spacing + header,0)
&#9;&#9;&#9;elseif j == 3 then newButton.Position = UDim2.new(0.5,0,i/spacing + header,0)
&#9;&#9;&#9;elseif j == 4 then newButton.Position = UDim2.new(0.71,0,i/spacing + header,0) end
&#9;&#9;&#9;newButton.Parent = paintMenu
&#9;&#9;end
&#9;end

&#9;local paintButtons = paintMenu:GetChildren()
&#9;for i = 1, #paintButtons do
&#9;&#9;local newCon = paintButtons[i].MouseButton1Click:connect(function()
&#9;&#9;&#9;Tool.Color.CurrentColor.Value = BrickColor.new(paintButtons[i].Name)

&#9;&#9;&#9;if currentColorButton then
&#9;&#9;&#9;&#9;if currentColorButton:FindFirstChild(&quot;Selection&quot;) then
&#9;&#9;&#9;&#9;&#9;currentColorButton.Selection.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;currentColorButton = paintButtons[i]
&#9;&#9;&#9;paintButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local anotherCon = paintButtons[i].MouseEnter:connect(function()
&#9;&#9;&#9;paintButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local oneMoreCon = paintButtons[i].MouseLeave:connect(function()
&#9;&#9;&#9;if paintButtons[i] ~= currentColorButton then paintButtons[i].Selection.BackgroundTransparency = 1 end
&#9;&#9;end)

&#9;&#9;table.insert(clickCons,newCon)
&#9;&#9;table.insert(clickCons,anotherCon)
&#9;&#9;table.insert(clickCons,oneMoreCon)
&#9;end

&#9;return paintGui
end

function onEquippedLocal(mouse)
&#9;Tool.TextureId = &quot;rbxasset://icons/color_sel.png&quot;

&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer

&#9;buttonDownCon = mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)
&#9;mouseMoveCon  = mouse.Move:connect(function() on3dMouseMove(mouse) end)
&#9;mouse.Icon =&quot;rbxasset://textures\\FillCursor.png&quot;

&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Color = Tool.Color.CurrentColor.Value
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = player.PlayerGui

&#9;menu = makeColorMenu()
&#9;menu.Parent = game.Players.LocalPlayer.PlayerGui
end

function onUnequippedLocal()
&#9;if menu then menu:remove() end
&#9;Tool.TextureId = origTexture

&#9;for i = 1, #clickCons do
&#9;&#9;clickCons[i]:disconnect()
&#9;end
&#9;clickCons = {}

&#9;if selectionBox then selectionBox:Remove() end
&#9;if mouseMoveCon then mouseMoveCon:disconnect() end
&#9;if buttonDownCon then buttonDownCon:disconnect() end
end

Tool.Color.CurrentColor.Changed:connect(function()
&#9;if selectionBox then selectionBox.Color = Tool.Color.CurrentColor.Value end
end)

script.Active.Changed:connect(function(prop)
&#9;if script.Active.Value == true then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)</ProtectedString>
							</Properties>
							<Item class="BoolValue" referent="RBX535">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">Active</string>
									<bool name="Value">false</bool>
								</Properties>
							</Item>
							<Item class="BrickColorValue" referent="RBX536">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">CurrentColor</string>
									<int name="Value">194</int>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX537">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Dragger</string>
								<ProtectedString name="Source">local Tool = script.Parent

local gui = nil

local connections = {}

function deactivateTool(script)
&#9;local enable = script:FindFirstChild(&quot;Active&quot;)
&#9;if enable and enable:IsA(&quot;BoolValue&quot;) then
&#9;&#9;enable.Value = false
&#9;end
end

function deactivateAllTools()
&#9;local toolChildren = script:GetChildren()
&#9;for i = 1, #toolChildren do
&#9;&#9;if toolChildren[i]:IsA(&quot;BaseScript&quot;) and toolChildren[i] ~= script then
&#9;&#9;&#9;deactivateTool(toolChildren[i])
&#9;&#9;end
&#9;end
end

function switchGrid(type)
&#9;deactivateAllTools()

&#9;wait()

&#9;if type == &quot;1&quot; then
&#9;&#9;script.OldDragger.Active.Value = true
&#9;&#9;gui.DraggerButton.Selected = true
&#9;&#9;gui.Dragger4xButton.Selected = false
&#9;else
&#9;&#9;script.NewDragger.Active.Value = true
&#9;&#9;gui.DraggerButton.Selected = false
&#9;&#9;gui.Dragger4xButton.Selected = true
&#9;end
end

function makeTextButton(buttonName, text, position, parent)
&#9;local button = Instance.new(&quot;TextButton&quot;)
&#9;button.Name = buttonName
&#9;button.Style = Enum.ButtonStyle.RobloxButton
&#9;button.Size = UDim2.new(0,100,0,40)
&#9;if position then button.Position = position end
&#9;button.Parent = parent

&#9;button.Text = text
&#9;button.Font = Enum.Font.ArialBold
&#9;button.FontSize = Enum.FontSize.Size18
&#9;button.TextColor3 = Color3.new(1,1,1)

&#9;return button
end

function makeDraggerGui()
&#9;local draggerGui = Instance.new(&quot;ScreenGui&quot;)
&#9;draggerGui.Name = &quot;DraggerGui&quot;

&#9;local draggerButton = makeTextButton(&quot;DraggerButton&quot;,&quot;1x1 Grid&quot;,UDim2.new(0.5,-100,0,0),draggerGui)
&#9;local dragger4xButton = makeTextButton(&quot;Dragger4xButton&quot;,&quot;4x4 Grid&quot;,UDim2.new(0.5,0,0,0),draggerGui)

&#9;local con = draggerButton.MouseButton1Click:connect(function() switchGrid(&quot;1&quot;) end)
&#9;local con2 = dragger4xButton.MouseButton1Click:connect(function() switchGrid(&quot;4&quot;) end)
&#9;table.insert(connections,con)
&#9;table.insert(connections,con2)

&#9;return draggerGui
end


function onEquippedLocal(mouse)
&#9;Tool.Mouse.Value = mouse
&#9;if not gui then
&#9;&#9;gui = makeDraggerGui()
&#9;end
&#9;gui.Parent = game.Players.LocalPlayer.PlayerGui
&#9;script.NewDragger.Active.Value = true
&#9;gui.Dragger4xButton.Selected = true
end

function onUnequippedLocal()
&#9;for i = 1, #connections do
&#9;&#9;connections[i]:disconnect()
&#9;end
&#9;connections = {}

&#9;gui:remove()
&#9;gui = nil
&#9;deactivateAllTools()
end

script.Active.Changed:connect(function(prop)
&#9;if script.Active.Value == true then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)

</ProtectedString>
							</Properties>
							<Item class="LocalScript" referent="RBX538">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">OldDragger</string>
									<ProtectedString name="Source">local Tool = script.Parent.Parent

enabled = true
local origTexture = &#9;Tool.TextureId
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/freemove_sel.png&quot;)

local selectionBox
local currentSelection
local currentSelectionColors = {}
local selectionLasso
local inGui = false
local inPalette = false

local connections = {}

function canSelectObject(part)
&#9;return part and not (part.Locked) --and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
end

function findModel(part)
&#9;while part ~= nil do
&#9;&#9;if part:IsA(&quot;Model&quot;) and part ~= game.Workspace then
&#9;&#9;&#9;return part
&#9;&#9;elseif part == game.Workspace then
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;&#9;part = part.Parent
&#9;end

&#9;return nil
end


function startDrag(mousePart, hitPoint, collection)
&#9;dragger = Instance.new(&quot;Dragger&quot;)
&#9;pcall(function() dragger:MouseDown(mousePart, hitPoint, collection) end)
end

function collectBaseParts(object, collection)
&#9;if object == nil then return end
&#9;if object:IsA(&quot;BasePart&quot;) then
&#9;&#9;collection[#collection+1] = object
&#9;end
&#9;for index,child in pairs(object:GetChildren()) do
&#9;&#9;collectBaseParts(child, collection)
&#9;end
end

function onMouseDown(mouse) 
&#9;mouse.Icon =&quot;rbxasset://textures\\GrabRotateCursor.png&quot;
&#9;local part = mouse.Target
&#9;if canSelectObject(part) then
&#9;&#9;local hitPoint = mouse.Hit:toObjectSpace(part.CFrame).p
&#9;&#9;if trySelection(part) then
&#9;&#9;&#9;local instances = {}
&#9;&#9;&#9;collectBaseParts(currentSelection, instances)
&#9;&#9;&#9;startDrag(part, hitPoint, instances)
&#9;&#9;&#9;return
&#9;&#9;end
&#9;end
&#9;onMouseUp(mouse)
end



function onMouseUp(mouse)
&#9;mouse.Icon =&quot;rbxasset://textures\\GrabCursor.png&quot;
&#9;if dragger ~= nil then
&#9;&#9;pcall(function() dragger:MouseUp() end)
&#9;&#9;dragger = nil
&#9;end
end

function trySelection(part)
&#9;if canSelectObject(part) then
&#9;&#9;selectionLasso.Part = part
&#9;&#9;local model = findModel(part)
&#9;&#9;if model then &#9;&#9;
&#9;&#9;&#9;return setSelection(model)
&#9;&#9;else
&#9;&#9;&#9;return setSelection(part)
&#9;&#9;end
&#9;else
&#9;&#9;clearSelection()
&#9;&#9;return false
&#9;end
end

function onKeyDown(key)
&#9;if dragger ~= nil then
&#9;&#9;if key == &apos;R&apos; or key == &apos;r&apos;  then
&#9;&#9;&#9;dragger:AxisRotate(Enum.Axis.Y)
&#9;&#9;elseif key == &apos;T&apos; or key == &apos;t&apos; then
&#9;&#9;&#9;dragger:AxisRotate(Enum.Axis.Z)
&#9;&#9;end
&#9;end
end
local alreadyMoving
function onMouseMove(mouse)
&#9;if alreadyMoving then
&#9;&#9;return
&#9;end

&#9;alreadyMoving = true
&#9;if dragger ~= nil then
&#9;&#9;pcall(function() dragger:MouseMove(mouse.UnitRay) end)
&#9;else
&#9;&#9;trySelection(mouse.Target)
&#9;end
&#9;alreadyMoving = false
end


function saveSelectionColor(instance)
&#9;if instance:IsA(&quot;BasePart&quot;) then
&#9;&#9;currentSelectionColors[instance] = instance.BrickColor
&#9;&#9;if instance.BrickColor == BrickColor.Blue() then
&#9;&#9;&#9;instance.BrickColor = BrickColor.new(&quot;Deep blue&quot;)
&#9;&#9;else
&#9;&#9;&#9;instance.BrickColor = BrickColor.Blue()
&#9;&#9;end
&#9;end

&#9;local children = instance:GetChildren() 
&#9;if children then
&#9;&#9;for pos, child in pairs(children) do
&#9;&#9;&#9;saveSelectionColor(child)
&#9;&#9;end
&#9;end
end
&#9;
function setSelection(partOrModel)
&#9;if partOrModel ~= currentSelection then
&#9;&#9;clearSelection()
&#9;&#9;currentSelection = partOrModel
&#9;&#9;saveSelectionColor(currentSelection)
&#9;&#9;selectionBox.Adornee = currentSelection
&#9;&#9;return true
&#9;else
&#9;&#9;if currentSelection ~= nil then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end

&#9;return false
end

function clearSelection()
&#9;if currentSelection ~= nil then
&#9;&#9;for part, color in pairs(currentSelectionColors) do
&#9;&#9;&#9;part.BrickColor = color
&#9;&#9;end
&#9;&#9;selectionBox.Adornee = nil
&#9;end
&#9;currentSelectionColors = {}
&#9;currentSelection = nil
&#9;
&#9;if(selectionBox) then
&#9;&#9;selectionBox.Adornee = nil
&#9;end
end

function onEquippedLocal(mouse)
&#9;wait(0.1)
&#9;Tool.TextureId = &quot;rbxasset://icons/freemove_sel.png&quot;

&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer
&#9;guiMain = Instance.new(&quot;ScreenGui&quot;)
&#9;guiMain.Parent = game.Players.LocalPlayer.PlayerGui

&#9;inGui = false
&#9;inPalette = false

&#9;mouse.Icon =&quot;rbxasset://textures\\GrabCursor.png&quot;

&#9;local con = mouse.Button1Down:connect(function() onMouseDown(mouse) end)
&#9;table.insert(connections,con)
&#9;con = mouse.Button1Up:connect(function() onMouseUp(mouse) end)
&#9;con = table.insert(connections,con)
&#9;con = mouse.Move:connect(function() onMouseMove(mouse) end)
&#9;table.insert(connections,con)
&#9;con = mouse.KeyDown:connect(function(string) onKeyDown(string) end)
&#9;table.insert(connections,con)

&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Name = &quot;Model Delete Selection&quot;
&#9;selectionBox.Color = BrickColor.Blue()
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = game.Players.LocalPlayer.PlayerGui

&#9;alreadyMoving = false
end

function onUnequippedLocal()
&#9;for i = 1, #connections do
&#9;&#9;connections[i]:disconnect()
&#9;end
&#9;connections = {}

&#9;Tool.TextureId = origTexture
&#9;clearSelection()
&#9;selectionBox:Remove()
end


script.Active.Changed:connect(function()
&#9;if script.Active.Value then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)
</ProtectedString>
								</Properties>
								<Item class="BoolValue" referent="RBX539">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Active</string>
										<bool name="Value">false</bool>
									</Properties>
								</Item>
							</Item>
							<Item class="LocalScript" referent="RBX540">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">NewDragger</string>
									<ProtectedString name="Source">local Tool = script.Parent.Parent

game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/freemove_sel.png&quot;)

local selectionBox
local currentSelection
local currentSelectionColors = {}
local Mouse = nil

local instances = {}
local maxDragDistance = 60

local connections = {}

function canSelectObject(part)
&#9;return part and not (part.Locked) --and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; maxDragDistance
end

function findModel(part)
&#9;while part ~= nil do
&#9;&#9;if part:IsA(&quot;Model&quot;) and part ~= game.Workspace then
&#9;&#9;&#9;return part
&#9;&#9;elseif part == game.Workspace then
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;&#9;part = part.Parent
&#9;end

&#9;return nil
end

function isPart(object)
&#9;return (object:IsA(&quot;Part&quot;) or object:IsA(&quot;TrussPart&quot;) or object:IsA(&quot;WedgePart&quot;) or object:IsA(&quot;VehicleSeat&quot;))
end

function positionPartsAtCFrame3(collection, aCFrame)

&#9;local insertCFrame
&#9;if collection[1]:IsA(&quot;Model&quot;) then
&#9;&#9;-- we assume model has at least one part in it; need to find first part
&#9;&#9;i = 1
&#9;&#9;while (i &lt; (#collection[1]:GetChildren()) and not isPart(collection[1]:GetChildren()[i])) do
&#9;&#9;&#9;i = i + 1
&#9;&#9;end
&#9;&#9;insertCFrame = collection[1]:GetChildren()[i].CFrame

&#9;&#9;for i, object in pairs(collection[1]:GetChildren()) do
&#9;&#9;&#9;if isPart(object) then
&#9;&#9;&#9;&#9;local posPartInWorld = object.Position
&#9;&#9;&#9;&#9;local posPart1InWorld = insertCFrame.p
&#9;&#9;&#9;&#9;local newPosPartInWorld = posPartInWorld - posPart1InWorld + aCFrame.p
&#9;
&#9;&#9;&#9;&#9;local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = object.CFrame:components()
&#9;&#9;&#9;&#9;object.CFrame = CFrame.new(newPosPartInWorld.x, newPosPartInWorld.y, newPosPartInWorld.z, R00, R01, R02, R10, R11, R12, R20, R21, R22)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;collection[1].CFrame = aCFrame
&#9;end

end

function getBoundingBox2(partOrModel)

-- for models, the bounding box is defined as the minimum and maximum individual part bounding boxes
-- relative to the first part&apos;s coordinate frame.

&#9;local minVec = Vector3.new(math.huge, math.huge, math.huge)
&#9;local maxVec = Vector3.new(-math.huge, -math.huge, -math.huge)

&#9;if isPart(partOrModel) then
&#9;&#9;minVec = -0.5 * partOrModel.Size
&#9;&#9;maxVec = -minVec
&#9;else
&#9;&#9;local part1 = partOrModel:GetChildren()[1]
&#9;&#9;for i, object in pairs(partOrModel:GetChildren()) do
&#9;&#9;&#9;if isPart(object) then
&#9;&#9;&#9;&#9;boxMinInWorld = object.CFrame:pointToWorldSpace(-0.5 * object.Size)
&#9;&#9;&#9;&#9;boxMinInPart1 = part1.CFrame:pointToObjectSpace(boxMinInWorld)
&#9;&#9;&#9;&#9;boxMaxInWorld = object.CFrame:pointToWorldSpace(0.5 * object.Size)
&#9;&#9;&#9;&#9;boxMaxInPart1 = part1.CFrame:pointToObjectSpace(boxMaxInWorld)

&#9;&#9;&#9;&#9;local minX = minVec.x
&#9;&#9;&#9;&#9;local minY = minVec.y
&#9;&#9;&#9;&#9;local minZ = minVec.z
&#9;&#9;&#9;&#9;local maxX = maxVec.x
&#9;&#9;&#9;&#9;local maxY = maxVec.y
&#9;&#9;&#9;&#9;local maxZ = maxVec.z
&#9;&#9;&#9;&#9;if boxMinInPart1.x &lt; minVec.x then
&#9;&#9;&#9;&#9;&#9;minX = boxMinInPart1.x
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMinInPart1.y &lt; minVec.y then
&#9;&#9;&#9;&#9;&#9;minY = boxMinInPart1.y
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMinInPart1.z &lt; minVec.z then
&#9;&#9;&#9;&#9;&#9;minZ = boxMinInPart1.z
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.x &lt; minX then
&#9;&#9;&#9;&#9;&#9;minX = boxMaxInPart1.x
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.y &lt; minY then
&#9;&#9;&#9;&#9;&#9;minY = boxMaxInPart1.y
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.z &lt; minZ then
&#9;&#9;&#9;&#9;&#9;minZ = boxMaxInPart1.z
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;if boxMinInPart1.x &gt; maxVec.x then
&#9;&#9;&#9;&#9;&#9;maxX = boxMinInPart1.x
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMinInPart1.y &gt; maxVec.y then
&#9;&#9;&#9;&#9;&#9;maxY = boxMinInPart1.y
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMinInPart1.z &gt; maxVec.z then
&#9;&#9;&#9;&#9;&#9;maxZ = boxMinInPart1.z
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.x &gt; maxX then
&#9;&#9;&#9;&#9;&#9;maxX = boxMaxInPart1.x
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.y &gt; maxY then
&#9;&#9;&#9;&#9;&#9;maxY = boxMaxInPart1.y
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if boxMaxInPart1.z &gt; maxZ then
&#9;&#9;&#9;&#9;&#9;maxZ = boxMaxInPart1.z
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;minVec = Vector3.new(minX, minY, minZ)
&#9;&#9;&#9;&#9;maxVec = Vector3.new(maxX, maxY, maxZ)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;return minVec, maxVec

end

function getTargetPartBoundingBox(targetPart)

&#9;if targetPart.Parent:FindFirstChild(&quot;RobloxModel&quot;) ~= nil then
&#9;&#9;return getBoundingBox2(targetPart.Parent)
&#9;else
&#9;&#9;return getBoundingBox2(targetPart)
&#9;end

end

function getMouseTargetCFrame(targetPart)

&#9;if targetPart.Parent:FindFirstChild(&quot;RobloxModel&quot;) ~= nil then
&#9;&#9;return targetPart.Parent:GetChildren()[1].CFrame
&#9;else
&#9;&#9;return targetPart.CFrame
&#9;end

end

function getClosestAlignedWorldDirection(aVector3InWorld)

&#9;local xDir = Vector3.new(1,0,0)
&#9;local yDir = Vector3.new(0,1,0)
&#9;local zDir = Vector3.new(0,0,1)
&#9;local xDot = aVector3InWorld.x * xDir.x + aVector3InWorld.y * xDir.y + aVector3InWorld.z * xDir.z
&#9;local yDot = aVector3InWorld.x * yDir.x + aVector3InWorld.y * yDir.y + aVector3InWorld.z * yDir.z
&#9;local zDot = aVector3InWorld.x * zDir.x + aVector3InWorld.y * zDir.y + aVector3InWorld.z * zDir.z

&#9;if math.abs(xDot) &gt; math.abs(yDot) and math.abs(xDot) &gt; math.abs(zDot) then
&#9;&#9;if xDot &gt; 0 then
&#9;&#9;&#9;return 0
&#9;&#9;else
&#9;&#9;&#9;return 3
&#9;&#9;end
&#9;elseif math.abs(yDot) &gt; math.abs(xDot) and math.abs(yDot) &gt; math.abs(zDot) then
&#9;&#9;if yDot &gt; 0 then
&#9;&#9;&#9;return 1
&#9;&#9;else
&#9;&#9;&#9;return 4
&#9;&#9;end
&#9;else
&#9;&#9;if zDot &gt; 0 then
&#9;&#9;&#9;return 2
&#9;&#9;else
&#9;&#9;&#9;return 5
&#9;&#9;end
&#9;end 

end



function findConfigAtMouseTarget(collection)

-- *Critical Assumption* :
--&#9;&#9;&#9;&#9;This function assumes the target CF axes are orthogonal with the target bounding box faces
--&#9;&#9;&#9;&#9;And, it assumes the insert CF axes are orthongonal with the insert bounding box faces
--&#9;&#9;&#9;&#9;Therefore, insertion will not work with angled faces on wedges or other &quot;non-block&quot; parts, nor
--&#9;&#9;&#9;&#9;will it work for parts in a model that are not orthogonally aligned with the model&apos;s CF.

&#9;local grid = 4.0
&#9;local admissibleConfig = false
&#9;local targetConfig = CFrame.new(0,0,0)

&#9;local minBB, maxBB = getBoundingBox2(collection[1])
&#9;local diagBB = maxBB - minBB

&#9;local insertCFrame
&#9;if collection[1]:IsA(&quot;Model&quot;) then
&#9;&#9;i = 1
&#9;&#9;while (i &lt; (#collection[1]:GetChildren()) and not isPart(collection[1]:GetChildren()[i])) do
&#9;&#9;&#9;i = i + 1
&#9;&#9;end
&#9;&#9;insertCFrame = collection[1]:GetChildren()[i].CFrame
&#9;else
&#9;&#9;insertCFrame = collection[1].CFrame
&#9;end

&#9;Mouse.TargetFilter = collection[1]

&#9;local targetPart = Mouse.Target

&#9;if targetPart == nil then
&#9;&#9;return admissibleConfig, targetConfig
&#9;end

&#9;-- test mouse hit location
&#9;local minBBTarget, maxBBTarget = getTargetPartBoundingBox(targetPart)
&#9;local diagBBTarget = maxBBTarget - minBBTarget
&#9;local targetCFrame = getMouseTargetCFrame(targetPart)
&#9;local hitCFrame = Mouse.Hit
&#9;local mouseHitInWorld = hitCFrame.p
&#9;local mouseHitInTarget = targetCFrame:pointToObjectSpace(mouseHitInWorld)

&#9;-- find which axis of the insertion objects should match with the target surface
&#9;-- this should use targetPart CFrame, not the model CFrame
&#9;local targetVectorInWorld = targetPart.CFrame:vectorToWorldSpace(Vector3.FromNormalId(Mouse.TargetSurface))

&#9;local targetRefPointInTarget
&#9;local clampToSurface

&#9;if getClosestAlignedWorldDirection(targetVectorInWorld) == 0 then
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(1, -1, 1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(-1, -1, 1))
&#9;&#9;clampToSurface = Vector3.new(0,1,1)
&#9;elseif getClosestAlignedWorldDirection(targetVectorInWorld) == 3 then
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(-1, -1, -1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(1, -1, -1))
&#9;&#9;clampToSurface = Vector3.new(0,1,1)
&#9;elseif getClosestAlignedWorldDirection(targetVectorInWorld) == 1 then
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(-1, 1, 1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(-1, -1, 1))
&#9;&#9;clampToSurface = Vector3.new(1,0,1)&#9;&#9;
&#9;elseif getClosestAlignedWorldDirection(targetVectorInWorld) == 4 then
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(-1, -1, 1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(-1, 1, 1))
&#9;&#9;clampToSurface = Vector3.new(1,0,1)
&#9;elseif getClosestAlignedWorldDirection(targetVectorInWorld) == 2 then
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(-1, -1, 1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(-1, -1, -1))
&#9;&#9;clampToSurface = Vector3.new(1,1,0)
&#9;else
&#9;&#9;targetRefPointInTarget = targetCFrame:vectorToObjectSpace(Vector3.new(1, -1, -1))
&#9;&#9;insertRefPointInInsert = insertCFrame:vectorToObjectSpace(Vector3.new(1, -1, 1))
&#9;&#9;clampToSurface = Vector3.new(1,1,0)
&#9;end

&#9;targetRefPointInTarget = targetRefPointInTarget * (0.5 * diagBBTarget) + 0.5 * (maxBBTarget + minBBTarget)
&#9;insertRefPointInInsert = insertRefPointInInsert * (0.5 * diagBB) + 0.5 * (maxBB + minBB)
&#9;
&#9;-- To Do: For cases that are not aligned to the world grid, account for the minimal rotation
&#9;-- needed to bring the Insert part(s) into alignment with the Target Part
&#9;-- Apply the rotation here

&#9;local delta = mouseHitInTarget - targetRefPointInTarget
&#9;local deltaClamped = Vector3.new(grid * math.modf(delta.x/grid), grid * math.modf(delta.y/grid), grid * math.modf(delta.z/grid))
&#9;deltaClamped = deltaClamped * clampToSurface
&#9;local targetTouchInTarget = deltaClamped + targetRefPointInTarget

&#9;local TargetTouchRelToWorld = targetCFrame:pointToWorldSpace(targetTouchInTarget)
&#9;local InsertTouchInWorld = insertCFrame:vectorToWorldSpace(insertRefPointInInsert)
&#9;local posInsertOriginInWorld = TargetTouchRelToWorld - InsertTouchInWorld

&#9;local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = insertCFrame:components()
&#9;targetConfig = CFrame.new(posInsertOriginInWorld.x, posInsertOriginInWorld.y, posInsertOriginInWorld.z, R00, R01, R02, R10, R11, R12, R20, R21, R22)
&#9;admissibleConfig = true

&#9;return admissibleConfig, targetConfig

end


function startDrag(mousePart, hitPoint, collection)
&#9;dragger = Instance.new(&quot;Dragger&quot;)
&#9;pcall(function() dragger:MouseDown(mousePart, hitPoint, collection) end)
end

function collectBaseParts(object, collection)
&#9;if object == nil then return end
&#9;--if object:IsA(&quot;BasePart&quot;) then
&#9;if isPart(object) then
&#9;&#9;collection[#collection+1] = object
&#9;end
&#9;for index,child in pairs(object:GetChildren()) do
&#9;&#9;collectBaseParts(child, collection)
&#9;end
end

function onMouseDown(mouse) 
&#9;mouse.Icon =&quot;rbxasset://textures\\GrabRotateCursor.png&quot;
&#9;local part = mouse.Target
&#9;if canSelectObject(part) then
&#9;&#9;local hitPoint = mouse.Hit:toObjectSpace(part.CFrame).p
&#9;&#9;if trySelection(part) then
&#9;&#9;&#9;instances = {}
&#9;&#9;&#9;game.JointsService:ClearJoinAfterMoveJoints()
&#9;&#9;&#9;game.JointsService:SetJoinAfterMoveInstance(mouse.Target)
&#9;&#9;&#9;collectBaseParts(currentSelection, instances)
&#9;&#9;&#9;startDrag(part, hitPoint, instances)
&#9;&#9;&#9;return
&#9;&#9;end
&#9;end
end


function onMouseUp(mouse)
&#9;mouse.Icon =&quot;rbxasset://textures\\GrabCursor.png&quot;
&#9;if dragger ~= nil then
&#9;&#9;Mouse.TargetFilter = nil
&#9;&#9;pcall(function() dragger:MouseUp() end)
&#9;&#9;game.JointsService:CreateJoinAfterMoveJoints()
&#9;&#9;dragger = nil
&#9;end
end

function trySelection(part)
&#9;if canSelectObject(part) then
&#9;&#9;local model = findModel(part)
&#9;&#9;if model then &#9;&#9;
&#9;&#9;&#9;return setSelection(model)
&#9;&#9;else
&#9;&#9;&#9;return setSelection(part)
&#9;&#9;end
&#9;else
&#9;&#9;clearSelection()
&#9;&#9;return false
&#9;end
end

function onKeyDown(key)
&#9;if dragger ~= nil then
&#9;&#9;if key == &apos;R&apos; or key == &apos;r&apos;  then
&#9;&#9;&#9;pcall(function() dragger:AxisRotate(Enum.Axis.Y) end)
&#9;&#9;elseif key == &apos;T&apos; or key == &apos;t&apos; then
&#9;&#9;&#9;pcall(function() dragger:AxisRotate(Enum.Axis.Z) end)
&#9;&#9;end
&#9;end
end

local alreadyMoving = false
function onMouseMove(mouse)
&#9;if alreadyMoving then
&#9;&#9;return
&#9;end

&#9;alreadyMoving = true
&#9;if dragger ~= nil then
&#9;&#9;local thingToDrag = {}
&#9;&#9;thingToDrag[1] = currentSelection 
&#9;
&#9;&#9;pcall(function() dragger:MouseMove(mouse.UnitRay) end)-- needed to break welds properly
&#9;&#9;configFound, targetCFrame = findConfigAtMouseTarget(thingToDrag)
&#9;&#9;if configFound then
&#9;&#9;&#9;positionPartsAtCFrame3(thingToDrag, targetCFrame)
&#9;&#9;end
&#9;else
&#9;&#9;trySelection(mouse.Target)
&#9;end
&#9;alreadyMoving = false
end


function saveSelectionColor(instance)
&#9;if instance:IsA(&quot;BasePart&quot;) then
&#9;&#9;currentSelectionColors[instance] = instance.BrickColor
&#9;&#9;if instance.BrickColor == BrickColor.Blue() then
&#9;&#9;&#9;instance.BrickColor = BrickColor.new(&quot;Deep blue&quot;)
&#9;&#9;else
&#9;&#9;&#9;instance.BrickColor = BrickColor.Blue()
&#9;&#9;end
&#9;end

&#9;local children = instance:GetChildren() 
&#9;if children then
&#9;&#9;for pos, child in pairs(children) do
&#9;&#9;&#9;saveSelectionColor(child)
&#9;&#9;end
&#9;end
end
&#9;
function setSelection(partOrModel)
&#9;if partOrModel ~= currentSelection then
&#9;&#9;clearSelection()
&#9;&#9;currentSelection = partOrModel
&#9;&#9;saveSelectionColor(currentSelection)
&#9;&#9;selectionBox.Adornee = currentSelection
&#9;&#9;return true
&#9;elseif partOrModel == nil then
&#9;&#9;clearSelection()
&#9;&#9;return false
&#9;end

&#9;return partOrModel == currentSelection
end

function clearSelection()
&#9;if currentSelection ~= nil then
&#9;&#9;for part, color in pairs(currentSelectionColors) do
&#9;&#9;&#9;part.BrickColor = color
&#9;&#9;end
&#9;&#9;selectionBox.Adornee = nil
&#9;end
&#9;currentSelectionColors = {}
&#9;currentSelection = nil

&#9;if(selectionBox) then
&#9;&#9;selectionBox.Adornee = nil
&#9;end
end

function onEquippedLocal(mouse)
&#9;Mouse = mouse

&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer

&#9;mouse.Icon =&quot;rbxasset://textures\\GrabCursor.png&quot;

&#9;local con = mouse.Button1Down:connect(function() onMouseDown(mouse) end)
&#9;table.insert(connections,con)
&#9;con = mouse.Button1Up:connect(function() onMouseUp(mouse) end)
&#9;con = table.insert(connections,con)
&#9;con = mouse.Move:connect(function() onMouseMove(mouse) end)
&#9;table.insert(connections,con)
&#9;con = mouse.KeyDown:connect(function(string) onKeyDown(string) end)
&#9;table.insert(connections,con)

&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Name = &quot;Model Delete Selection&quot;
&#9;selectionBox.Color = BrickColor.Blue()
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = game.Players.LocalPlayer.PlayerGui

&#9;alreadyMoving = false
end

function onUnequippedLocal()
&#9;for i = 1, #connections do
&#9;&#9;connections[i]:disconnect()
&#9;end
&#9;connections = {}

&#9;clearSelection()
&#9;selectionBox:Remove()
end

script.Active.Changed:connect(function()
&#9;if script.Active.Value then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)</ProtectedString>
								</Properties>
								<Item class="BoolValue" referent="RBX541">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Active</string>
										<bool name="Value">false</bool>
									</Properties>
								</Item>
							</Item>
							<Item class="BoolValue" referent="RBX542">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">Active</string>
									<bool name="Value">false</bool>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX543">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Material</string>
								<ProtectedString name="Source">local Tool = script.Parent


enabled = true
local origTexture = &#9;Tool.TextureId
local localAssetBase = &quot;rbxasset://textures/ui/&quot;
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/material_sel.png&quot;)

local menu

local selectionBox
local selectionLasso

local selectedButton

local value = nil

local downCons = {}

local currentMaterialButton = nil

function setSelectionBox(part) 
&#9;unsetSelectionBox()
&#9;selectionBox.Adornee = part
end
function unsetSelectionBox() 
&#9;selectionBox.Adornee = nil
end

local MaterialEnum = {}
MaterialEnum[&quot;Plastic&quot;] = Enum.Material.Plastic
MaterialEnum[&quot;Wood&quot;] = Enum.Material.Wood
MaterialEnum[&quot;Slate&quot;] = Enum.Material.Slate
MaterialEnum[&quot;CorrodedMetal&quot;] = Enum.Material.CorrodedMetal
MaterialEnum[&quot;Ice&quot;] = Enum.Material.Ice
MaterialEnum[&quot;Grass&quot;] = Enum.Material.Grass
MaterialEnum[&quot;Foil&quot;] = Enum.Material.Foil
MaterialEnum[&quot;DiamondPlate&quot;] = Enum.Material.DiamondPlate
MaterialEnum[&quot;Concrete&quot;] = Enum.Material.Concrete

function on3dButton1Down(mouse) 
&#9;local part = mouse.Target
&#9;if part and not (part.Locked) then
&#9;&#9;if Instance.Lock(part) then
&#9;&#9;&#9;part.Material = MaterialEnum[Tool.Material.CurrentMaterial.Value]
&#9;&#9;&#9;Instance.Unlock(part)
&#9;&#9;end
&#9;end
end

function canSelectObject(part)
&#9;return part and not (part.Locked) 
end


function on3dMouseMove(mouse) 
&#9;mouse.Icon =&quot;rbxasset://textures\\MaterialCursor.png&quot;
&#9;local part = mouse.Target
&#9;if canSelectObject(part) then
&#9;&#9;setSelectionBox(part)
&#9;else
&#9;&#9;unsetSelectionBox()
&#9;end
end

function createMaterialMenu()
&#9;local materialGui = Instance.new(&quot;ScreenGui&quot;)
&#9;materialGui.Name = &quot;MaterialGui&quot;

&#9;local materialMenu = Instance.new(&quot;ImageLabel&quot;)
&#9;materialMenu.Name = &quot;MaterialMenu&quot;
&#9;materialMenu.Position = UDim2.new(0,0,1,-350)
&#9;materialMenu.Size = UDim2.new(0,100,0,250)
&#9;materialMenu.BackgroundTransparency = 1
&#9;materialMenu.ZIndex = 2
&#9;materialMenu.Image = localAssetBase .. &quot;MaterialMenu.png&quot;
&#9;materialMenu.Parent = materialGui

&#9;local textures = {&quot;Plastic&quot;,&quot;Wood&quot;,&quot;Slate&quot;,&quot;CorrodedMetal&quot;,&quot;Ice&quot;,&quot;Grass&quot;,&quot;Foil&quot;,&quot;DiamondPlate&quot;,&quot;Concrete&quot;}

&#9;local materialButtons = {}

&#9;local materialButton = Instance.new(&quot;ImageButton&quot;)
&#9;materialButton.BackgroundTransparency = 1
&#9;materialButton.Size = UDim2.new(0.400000003, 0,0.16, 0)
&#9;materialButton.ZIndex = 4

&#9;local selection = Instance.new(&quot;Frame&quot;)
&#9;selection.Name = &quot;Selection&quot;
&#9;selection.BorderSizePixel = 0
&#9;selection.BackgroundColor3 = Color3.new(1,1,1)
&#9;selection.BackgroundTransparency = 1
&#9;selection.ZIndex = 3
&#9;selection.Size = UDim2.new(1.1,0,1.1,0)
&#9;selection.Position = UDim2.new(-0.05,0,-0.05,0)
&#9;selection.Parent = materialButton

&#9;local current = 1
&#9;local function getTextureAndName(button)

&#9;&#9;if current &gt; #textures then
&#9;&#9;&#9;button:remove()
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;&#9;button.Image = localAssetBase .. textures[current] .. &quot;.png&quot;
&#9;&#9;button.Name = textures[current]
&#9;&#9;current = current + 1
&#9;&#9;return true

&#9;end

&#9;local ySpacing = 0.10
&#9;local xSpacing  = 0.07
&#9;for i = 1,5 do
&#9;&#9;for j = 1,2 do
&#9;&#9;&#9;local button = materialButton:clone()
&#9;&#9;&#9;button.Position = UDim2.new((j -1)/2.2 + xSpacing,0,ySpacing + (i - 1)/5.5,0)
&#9;&#9;&#9;if getTextureAndName(button) then button.Parent = materialMenu else button:remove() end
&#9;&#9;&#9;table.insert(materialButtons,button)
&#9;&#9;end
&#9;end


&#9;for i = 1, #materialButtons do
&#9;&#9;local newCon = materialButtons[i].MouseButton1Click:connect(function()
&#9;&#9;&#9;Tool.Material.CurrentMaterial.Value = materialButtons[i].Name

&#9;&#9;&#9;if currentMaterialButton then
&#9;&#9;&#9;&#9;if currentMaterialButton:FindFirstChild(&quot;Selection&quot;) then
&#9;&#9;&#9;&#9;&#9;currentMaterialButton.Selection.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;currentMaterialButton = materialButtons[i]
&#9;&#9;&#9;materialButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local enterCon = materialButtons[i].MouseEnter:connect(function()
&#9;&#9;&#9;materialButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local leaveCon = materialButtons[i].MouseLeave:connect(function()
&#9;&#9;&#9;if materialButtons[i] ~= currentMaterialButton then materialButtons[i].Selection.BackgroundTransparency = 1 end
&#9;&#9;end)
&#9;&#9;table.insert(downCons, newCon)
&#9;&#9;table.insert(downCons, enterCon)
&#9;&#9;table.insert(downCons, leaveCon)
&#9;end

&#9;return materialGui
end

function onEquippedLocal(mouse)
&#9;Tool.TextureId = &quot;rbxasset://icons/material_sel.png&quot;
&#9;value = nil
&#9;selectedButton = nil

&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer

&#9;selectedButton = nil

&#9;button1DownCon = mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)
&#9;mouseMoveCon = mouse.Move:connect(function() on3dMouseMove(mouse) end)
&#9;mouse.Icon =&quot;rbxasset://textures\\MaterialCursor.png&quot;

&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Color = BrickColor.Yellow()
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = player.PlayerGui

&#9;menu = createMaterialMenu()
&#9;menu.Parent = game.Players.LocalPlayer.PlayerGui
end

function onUnequippedLocal()
&#9;if button1DownCon then button1DownCon:disconnect() end
&#9;if mouseMoveCon then mouseMoveCon:disconnect() end

&#9;for i = 1, #downCons do
&#9;&#9;downCons[i]:disconnect()
&#9;end
&#9;downCons = {}

&#9;menu:remove()
&#9;Tool.TextureId = origTexture
&#9;if selectionBox then selectionBox:Remove() end
end

script.Active.Changed:connect(function(prop)
&#9;if script.Active.Value == true then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)
</ProtectedString>
							</Properties>
							<Item class="BoolValue" referent="RBX544">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">Active</string>
									<bool name="Value">false</bool>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX545">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">CurrentMaterial</string>
									<string name="Value">Plastic</string>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX546">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Resize</string>
								<ProtectedString name="Source">local Tool = script.Parent

enabled = true
local origTexture = &#9;Tool.TextureId
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/resize_sel.png&quot;)

local selectionBox
local selectionLasso
local handles

local previousDistance
local needsCursor = true

local currMouseTarget
local connections = {}

function onHandlesDown(normal)
&#9;previousDistance = 0
end
function onHandlesDrag(normal, distance)
&#9;
&#9;if handles.Adornee then
&#9;&#9;local delta = distance - previousDistance 
&#9;&#9;if math.abs(delta) &gt;= handles.Adornee.ResizeIncrement then
&#9;&#9;&#9;local sizeDelta = math.floor(delta / handles.Adornee.ResizeIncrement + 0.5) * handles.Adornee.ResizeIncrement
&#9;&#9;&#9;if handles.Adornee:Resize(normal, sizeDelta) then
&#9;&#9;&#9;&#9;previousDistance = distance
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function onButton1Down(mouse)
&#9;local success = pcall(function() theMouse = mouse.Target end)

&#9;if success then
&#9;&#9;if canSelect(mouse.Target) then
&#9;&#9;&#9;selectionBox.Adornee = mouse.Target
&#9;&#9;&#9;handles.Adornee = mouse.Target
&#9;&#9;&#9;handles.Faces = mouse.Target.ResizeableFaces
&#9;&#9;else
&#9;&#9;&#9;selectionBox.Adornee = nil
&#9;&#9;&#9;handles.Adornee = nil
&#9;&#9;end
&#9;end
end

function mouseTargetChanged(mouse)

&#9;if canSelect(mouse.Target) then
&#9;&#9;if needsCursor then
&#9;&#9;&#9;mouse.Icon =&quot;rbxasset://textures\\DragCursor.png&quot;
&#9;&#9;&#9;needsCursor = false
&#9;&#9;end
&#9;else
&#9;&#9;needsCursor = true
&#9;&#9;mouse.Icon = &quot;&quot;
&#9;end

end

local function isPartOfModel(object)
&#9;if object and object ~= game.Workspace and object:IsA(&quot;Model&quot;) then
&#9;&#9;return true
&#9;elseif not object or object == game.Workspace then
&#9;&#9;return false
&#9;else
&#9;&#9;return isPartOfModel(object.Parent)
&#9;end
end

function canSelect(object)
&#9;local isModel = isPartOfModel(object)
&#9;return object and object:IsA(&quot;BasePart&quot;) and not object.Locked and not isPartOfModel(object)
end


function onEquippedLocal(mouse)

&#9;currMouseTarget = nil

&#9;table.insert(connections,mouse.Button1Down:connect(function() onButton1Down(mouse) end) )
&#9;table.insert(connections, mouse.Move:connect(function()
&#9;&#9;&#9;if currMouseTarget ~= mouse.Target then
&#9;&#9;&#9;&#9;mouseTargetChanged(mouse)
&#9;&#9;&#9;&#9;currMouseTarget = mouse.Target
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;)

&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer
&#9;
&#9;selectionBox = Instance.new(&quot;SelectionBox&quot;)
&#9;selectionBox.Color = BrickColor.Blue()
&#9;selectionBox.Adornee = nil
&#9;selectionBox.Parent = player.PlayerGui

&#9;handles = Instance.new(&quot;Handles&quot;)
&#9;handles.Color = BrickColor.Blue()
&#9;handles.Adornee = nil
&#9;handles.MouseDrag:connect(onHandlesDrag)
&#9;handles.MouseButton1Down:connect(onHandlesDown)
&#9;handles.Parent = player.PlayerGui
end

function onUnequippedLocal()
&#9;Tool.TextureId = origTexture
&#9;selectionBox:Remove()
&#9;handles:Remove()

&#9;for i = 1, #connections do
&#9;&#9;if connections[i] then connections[i]:disconnect() end
&#9;end

&#9;connections = {}
end

script.Active.Changed:connect(function(prop)
&#9;if script.Active.Value == true then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)
</ProtectedString>
							</Properties>
							<Item class="BoolValue" referent="RBX547">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">Active</string>
									<bool name="Value">false</bool>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX548">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Surface</string>
								<ProtectedString name="Source">local Tool = script.Parent
local menu

enabled = true
local origTexture = &#9;Tool.TextureId
local localAssetBase = &quot;rbxasset://textures/ui/&quot;
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/surface_sel.png&quot;)

local selectionSurface
local selectionLasso

local currentSurfaceButton = nil

local mouseMoveCon, button1DownCon
local conArray = {}

function setSelectionSurface(part, surface) 
&#9;unsetSelectionSurface()
&#9;selectionSurface.Adornee = part
&#9;selectionSurface.TargetSurface = surface
end
function unsetSelectionSurface() 
&#9;selectionSurface.Adornee = nil
end

local SurfaceEnum = {}
SurfaceEnum[&quot;Smooth&quot;] = Enum.SurfaceType.Smooth
SurfaceEnum[&quot;Studs&quot;] = Enum.SurfaceType.Studs
SurfaceEnum[&quot;Inlet&quot;] = Enum.SurfaceType.Inlet
SurfaceEnum[&quot;Universal&quot;] = Enum.SurfaceType.Universal
SurfaceEnum[&quot;Glue&quot;] = Enum.SurfaceType.Glue
SurfaceEnum[&quot;Weld&quot;] = Enum.SurfaceType.Weld
SurfaceEnum[&quot;Hinge&quot;] = Enum.SurfaceType.Hinge
SurfaceEnum[&quot;Motor&quot;] = Enum.SurfaceType.Motor


function canSelectObject(part, surface)
&#9;return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) --and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60 
and (not(part:IsA(&quot;WedgePart&quot;)) or surface ~= Enum.NormalId.Front)
end


function on3dMouseMove(mouse)
&#9;local part = mouse.Target
&#9;local surface = mouse.TargetSurface
&#9;if canSelectObject(part, surface) then
&#9;&#9;setSelectionSurface(part, surface)
&#9;else
&#9;&#9;unsetSelectionSurface()
&#9;end

end
function on3dButton1Down(mouse) 
&#9;local part = selectionSurface.Adornee
&#9;if part then
&#9;&#9;local normalId = selectionSurface.TargetSurface
&#9;&#9;local surface = Tool.Surface.CurrentSurface.Value
&#9;&#9;if surface == nil then return end
&#9;&#9;--Apply the selected surface to the current parts
&#9;&#9;if normalId == Enum.NormalId.Top then
&#9;&#9;&#9;part.TopSurface = surface
&#9;&#9;elseif normalId == Enum.NormalId.Bottom then  
&#9;&#9;elseif normalId == Enum.NormalId.Front then  
&#9;&#9;&#9;part.BottomSurface = surface
&#9;&#9;&#9;part.FrontSurface = surface
&#9;&#9;elseif normalId == Enum.NormalId.Back then  
&#9;&#9;&#9;part.BackSurface = surface
&#9;&#9;elseif normalId == Enum.NormalId.Left then  
&#9;&#9;&#9;part.LeftSurface = surface
&#9;&#9;elseif normalId == Enum.NormalId.Right then  
&#9;&#9;&#9;part.RightSurface = surface
&#9;&#9;end
&#9;end
end

function createSurfaceMenu()

&#9;local surfaceGui = Instance.new(&quot;ScreenGui&quot;)
&#9;surfaceGui.Name = &quot;SurfaceGui&quot;

&#9;local surfaceMenu = Instance.new(&quot;ImageLabel&quot;)
&#9;surfaceMenu.Name = &quot;SurfaceMenu&quot;
&#9;surfaceMenu.Position = UDim2.new(0,0,1,-400)
&#9;surfaceMenu.Size = UDim2.new(0,150,0,300)
&#9;surfaceMenu.BackgroundTransparency = 1
&#9;surfaceMenu.ZIndex = 2
&#9;surfaceMenu.Image = localAssetBase .. &quot;SurfaceMenu.png&quot;
&#9;surfaceMenu.Parent = surfaceGui

&#9;textures = {&quot;Smooth&quot;, &quot;Studs&quot;, &quot;Inlets&quot;, &quot;Universal&quot;, &quot;Glue&quot;, &quot;Weld&quot;, &quot;Hinge&quot;, &quot;Motor&quot;}
&#9;current = 1

&#9;local surfaceButtons = {}

&#9;local surfaceButton = Instance.new(&quot;ImageButton&quot;)
&#9;surfaceButton.BackgroundTransparency = 1
&#9;surfaceButton.Size = UDim2.new(0.400000003, 0,0.19, 0)
&#9;surfaceButton.ZIndex = 4
&#9;
&#9;local selection = Instance.new(&quot;Frame&quot;)
&#9;selection.Name = &quot;Selection&quot;
&#9;selection.BorderSizePixel = 0
&#9;selection.BackgroundColor3 = Color3.new(1,1,1)
&#9;selection.BackgroundTransparency = 1
&#9;selection.ZIndex = 3
&#9;selection.Size = UDim2.new(1.1,0,1.1,0)
&#9;selection.Position = UDim2.new(-0.05,0,-0.05,0)
&#9;selection.Parent = surfaceButton

&#9;local function getTextureAndName(button)
&#9;&#9;if current &gt; #textures then
&#9;&#9;&#9;button:remove()
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;&#9;button.Image = localAssetBase .. textures[current] .. &quot;.png&quot;

&#9;&#9;if textures[current] == &quot;Inlets&quot; then --nice hack to adjust for inconsistent namings
&#9;&#9;&#9;button.Name = &quot;Inlet&quot;
&#9;&#9;else
&#9;&#9;&#9;button.Name = textures[current]
&#9;&#9;end

&#9;&#9;current = current + 1
&#9;&#9;return true
&#9;end

&#9;local ySpacing = 0.14
&#9;local xSpacing  = 0.07
&#9;for i = 1,4 do
&#9;&#9;for j = 1,2 do
&#9;&#9;&#9;local button = surfaceButton:clone()
&#9;&#9;&#9;button.Position = UDim2.new((j -1)/2.2 + xSpacing,0,ySpacing + (i - 1)/4.6,0)
&#9;&#9;&#9;getTextureAndName(button)
&#9;&#9;&#9;button.Parent = surfaceMenu
&#9;&#9;&#9;table.insert(surfaceButtons,button)
&#9;&#9;end
&#9;end

&#9;for i = 1, #surfaceButtons do
&#9;&#9;local newCon = surfaceButtons[i].MouseButton1Click:connect(function()
&#9;&#9;&#9;Tool.Surface.CurrentSurface.Value = surfaceButtons[i].Name

&#9;&#9;&#9;if currentSurfaceButton then 
&#9;&#9;&#9;&#9;if currentSurfaceButton:FindFirstChild(&quot;Selection&quot;) then
&#9;&#9;&#9;&#9;&#9;currentSurfaceButton.Selection.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;currentSurfaceButton = surfaceButtons[i]
&#9;&#9;&#9;surfaceButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local enterCon = surfaceButtons[i].MouseEnter:connect(function()
&#9;&#9;&#9;surfaceButtons[i].Selection.BackgroundTransparency = 0
&#9;&#9;end)
&#9;&#9;local leaveCon = surfaceButtons[i].MouseLeave:connect(function()
&#9;&#9;&#9;if surfaceButtons[i] ~= currentSurfaceButton then surfaceButtons[i].Selection.BackgroundTransparency = 1 end
&#9;&#9;end)
&#9;&#9;table.insert(conArray,newCon)
&#9;&#9;table.insert(conArray,enterCon)
&#9;&#9;table.insert(conArray,leaveCon)
&#9;end

&#9;return surfaceGui
end



function onEquippedLocal(mouse)
&#9;Tool.TextureId = &quot;rbxasset://icons/surface_sel.png&quot;
&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer

&#9;mouseMoveCon = mouse.Move:connect(function() on3dMouseMove(mouse) end)
&#9;button1DownCon = mouse.Button1Down:connect(function() on3dButton1Down(mouse) end)

&#9;selectionSurface = Instance.new(&quot;SurfaceSelection&quot;)
&#9;selectionSurface.Color = BrickColor.Red()
&#9;selectionSurface.Adornee = nil
&#9;selectionSurface.Parent = player.PlayerGui

&#9;menu = createSurfaceMenu()
&#9;menu.Parent = game.Players.LocalPlayer.PlayerGui
end

function onUnequippedLocal()
&#9;if mouseMoveCon then mouseMoveCon:disconnect() end
&#9;if button1DownCon then button1DownCon:disconnect() end

&#9;for i = 1, #conArray do
&#9;&#9;if conArray[i] then conArray[i]:disconnect() end
&#9;end
&#9;conArray = {}

&#9;menu:remove()
&#9;Tool.TextureId = origTexture
&#9;if selectionBox then selectionBox:Remove() end
&#9;if selectionLasso then selectionLasso:Remove() end
&#9;if selectionSurface then selectionSurface:Remove() end
end

script.Active.Changed:connect(function(prop)
&#9;if script.Active.Value == true then
&#9;&#9;onEquippedLocal(Tool.Mouse.Value)
&#9;else
&#9;&#9;onUnequippedLocal()
&#9;end
end)
</ProtectedString>
							</Properties>
							<Item class="BoolValue" referent="RBX549">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">Active</string>
									<bool name="Value">false</bool>
								</Properties>
							</Item>
							<Item class="StringValue" referent="RBX550">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">CurrentSurface</string>
									<string name="Value">Smooth</string>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX551">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Config</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX552">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ConfigurationLocal</string>
								<ProtectedString name="Source">-- general functions
function waitForProperty(instance, name)
&#9;while not instance[name] do
&#9;&#9;instance.Changed:wait()
&#9;end
end
function waitForChild(instance, name)
&#9;while not instance:FindFirstChild(name) do
&#9;&#9;instance.ChildAdded:wait()
&#9;end
end

local RbxGui
if LoadLibrary then
&#9;RbxGui = LoadLibrary(&quot;RbxGui&quot;)
else
&#9;return
end

local isRestricted = false
if game.PlaceId == &quot;41324860&quot; then
&#9;isRestricted = true
end

local Tool = script.Parent

enabled = true
game:GetService(&quot;ContentProvider&quot;):Preload(&quot;rbxasset://icons/configure_sel.png&quot;)

local guiMain
local screen

local selectionGui

local player
local playerArea

local canTween = true
local gridRecalc
local lastPart

local lastConfig = nil
local lastVehicleSeat = nil
local origValueMap = {}

local valueConnections = {}

local objectValueSelect = {}

local colorPaletteSelectMode = false

local needsIconReset = false

local textSize = 5

--Constants
local width = UDim.new(3, 0)
local height = 20 
local transparency = 0.5
local buttonColor = BrickColor.new(&quot;Mid gray&quot;)
local frameColor = BrickColor.new(&quot;Pastel yellow&quot;)


local function isInModel(part)
&#9;if part == game.Workspace then
&#9;&#9;return false, nil
&#9;elseif part:IsA(&quot;Model&quot;) then
&#9;&#9;return true, part
&#9;else
&#9;&#9;return isInModel(part.Parent)
&#9;end
end


function constrained(valueObject)
&#9;return (valueObject:IsA(&quot;IntConstrainedValue&quot;) or valueObject:IsA(&quot;DoubleConstrainedValue&quot;))
end

function sharedProcess(name, parentFrame)
&#9;local subFrame = Instance.new(&quot;Frame&quot;)
&#9;subFrame.Name = name
&#9;subFrame.Size = UDim2.new(1.0, 0, 0, height)
&#9;subFrame.BackgroundTransparency = 1.0
&#9;subFrame.BorderSizePixel = 0
&#9;
&#9;local label = Instance.new(&quot;TextLabel&quot;)
&#9;label.Font = Enum.Font.ArialBold
&#9;label.Position = UDim2.new(0.0, 0, 0.0, 0)
&#9;label.Size = UDim2.new(0.5, 0, 1.0, 0)
&#9;label.FontSize = textSize
&#9;label.TextColor = BrickColor.White()
&#9;label.Text = name
&#9;label.Parent = subFrame
&#9;label.BackgroundTransparency = 1.0
&#9;label.BorderSizePixel = 0

&#9;return subFrame
end

function createTextBox(size, text)
&#9;local textBox = Instance.new(&quot;TextBox&quot;)
&#9;textBox.Position = UDim2.new(0.5, 1, 0.0, 1)
&#9;textBox.Size = size
&#9;textBox.BackgroundTransparency = 1
&#9;textBox.FontSize = textSize - 3
&#9;textBox.TextColor3 = Color3.new(1,1,1)
&#9;textBox.Text = text&#9;
&#9;textBox.ZIndex = 2

&#9;local textBoxBacking = Instance.new(&quot;TextButton&quot;)
&#9;textBoxBacking.Text = &quot;&quot;
&#9;textBoxBacking.Style = Enum.ButtonStyle.RobloxButtonDefault
&#9;textBoxBacking.Size = UDim2.new(1,0,1,0)
&#9;textBoxBacking.Parent = textBox

&#9;return textBox
end

function setCheckBoxValue(checkBox, value)
&#9;if value then
&#9;&#9;checkBox.Text = &quot;X&quot;
&#9;else
&#9;&#9;checkBox.Text = &quot;&quot;
&#9;end
end
function createCheckBox(value)
&#9;local checkBox = Instance.new(&quot;TextButton&quot;)
&#9;checkBox.Position = UDim2.new(0.75, -(height-4)/2, 0.0, 2)
&#9;checkBox.Size = UDim2.new(0.0, height-4, 0.0, height-4)
&#9;checkBox.Style = Enum.ButtonStyle.RobloxButtonDefault
&#9;checkBox.TextColor3 = Color3.new(1,1,1)
&#9;checkBox.FontSize = textSize
&#9;setCheckBoxValue(checkBox, value)
&#9;return checkBox
end



function processBoolValue(value, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)
&#9;local checkBox = createCheckBox(value.Value)
&#9;
&#9;--Tie the two values together... we&apos;ll need to break these connections later
&#9;checkBox.MouseButton1Down:connect(function() value.Value = not(value.Value) end)
&#9;valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) setCheckBoxValue(checkBox, newValue) end)&#9;
&#9;checkBox.Parent = subFrame
&#9;return subFrame
end

function processConstrainedNumberValue(value, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)
&#9;local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), value.ConstrainedValue, function(textBox) value.ConstrainedValue = textBox.Text end)
&#9;textBox.Name = value.Name

&#9;--Tie the two values together... we&apos;ll need to break these connections later
&#9;textBox.Changed:connect(function(prop)
&#9;&#9;if prop == &quot;Text&quot; then
&#9;&#9;&#9;local prevValue = value.ConstrainedValue
&#9;&#9;&#9;if textBox.Text ~= &quot;&quot; then
&#9;&#9;&#9;&#9;pcall(function() value.ConstrainedValue = textBox.Text end)
&#9;&#9;&#9;end
&#9;&#9;&#9;textBox.Text = value.ConstrainedValue
&#9;&#9;end
&#9;end)
&#9;valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) textBox.Text = newValue end)
&#9;
&#9;textBox.Parent = subFrame
&#9;return subFrame;
end

function processIntValue(value, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)
&#9;local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), value.Value, function(textBox) value.Value = textBox.Text end)
&#9;textBox.Name = value.Name

&#9;--Tie the two values together... we&apos;ll need to break these connections later
&#9;textBox.Changed:connect(function(prop)
&#9;&#9;if prop == &quot;Text&quot; then
&#9;&#9;&#9;local prevValue = value.Value
&#9;&#9;&#9;if textBox.Text ~= &quot;&quot; then
&#9;&#9;&#9;&#9;pcall(function() value.Value = textBox.Text end)
&#9;&#9;&#9;end
&#9;&#9;&#9;textBox.Text = value.Value
&#9;&#9;end
&#9;end)
&#9;valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) textBox.Text = newValue end)
&#9;
&#9;textBox.Parent = subFrame
&#9;return subFrame;
end

function processPropertyValue(object, name, field, guiFrame)
&#9;origValueMap[name] = object[field]

&#9;local subFrame = sharedProcess(name, guiFrame)
&#9;local textBox = createTextBox(UDim2.new(0.5,-2, 1.0, -2), object[field], function(textBox) object[field] = textBox.Text end)
&#9;textBox.Name = name

&#9;--Tie the two values together... we&apos;ll need to break these connections later
&#9;textBox.Changed:connect(function(prop) 
&#9;&#9;if prop == &quot;Text&quot; then
&#9;&#9;&#9;if textBox.Text ~= &quot;&quot; then
&#9;&#9;&#9;&#9;local success = pcall(function() object[field] = textBox.Text end)
&#9;&#9;&#9;end
&#9;&#9;&#9;textBox.Text = object[field]
&#9;&#9;end
&#9;end)

&#9;valueConnections[#valueConnections+1] = object.Changed:connect(function(property) if property == field then textBox.Text = object[field] end end)
&#9;
&#9;textBox.Parent = subFrame
&#9;return subFrame
end


function processEnumValue(value, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)

&#9;local valueChildren = value:GetChildren()
&#9;local enumNames = {}
&#9;for i = 1, #valueChildren do
&#9;&#9;if valueChildren[i]:IsA(&quot;BoolValue&quot;) and valueChildren[i].Value == true then
&#9;&#9;&#9;table.insert(enumNames,valueChildren[i].Name)
&#9;&#9;end
&#9;end

&#9;local valueToChange = value
&#9;local enumSelect = function(item)
&#9;&#9;valueToChange.Value = tostring(item)
&#9;end

&#9;local dropDownEnumMenu, updateEnumSelection = RbxGui.CreateDropDownMenu(enumNames, enumSelect)
&#9;dropDownEnumMenu.Position = UDim2.new(0.5,0,0,0)
&#9;dropDownEnumMenu.Size = UDim2.new(0.5,0,0,20)
&#9;dropDownEnumMenu.Parent = subFrame

&#9;for i = 1, #valueChildren do
&#9;&#9;if value.Value == valueChildren[i].Name then
&#9;&#9;&#9;dropDownEnumMenu.DropDownMenuButton.Text = valueChildren[i].Name
&#9;&#9;&#9;break
&#9;&#9;end
&#9;end

&#9;return subFrame
end



function processNumberValue(value, guiFrame)
&#9;return processIntValue(value, guiFrame)
end


function processStringValue(value, guiFrame)
&#9;return processIntValue(value, guiFrame)
end



function onMouseLeave(hoverSelection, selectedButtonTable, oldButton)
&#9;if oldButton[0] then
&#9;&#9;local notSelected = true;
&#9;&#9;local selectionText = &quot;&quot;;
&#9;&#9;for key, value in pairs(selectedButtonTable) do
&#9;&#9;&#9;if oldButton[0] == value then
&#9;&#9;&#9;&#9;notSelected = false
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;selectionText = value.BackgroundColor.Name;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if notSelected then
&#9;&#9;&#9;hoverSelection.Text = selectionText;
&#9;&#9;&#9;oldButton[0].Parent.BackgroundColor = BrickColor.Black();
&#9;&#9;end
&#9;end
&#9;oldButton[0] = nil
end

function onMouseEnter(hoverSelection, guiButton, selectedButtonTable, oldButton)
&#9;onMouseLeave(hoverSelection, selectedButtonTable, oldButton)
&#9;hoverSelection.Text = guiButton.BackgroundColor.Name
&#9;if guiButton ~= selectedButton then
&#9;&#9;guiButton.Parent.BackgroundColor = BrickColor.White();
&#9;&#9;oldButton[0] = guiButton
&#9;end
end

function changeColorSelection(colorHolder, paletteFrame, guiButton, selectedButtonTable)
&#9;if selectedButtonTable[colorHolder] ~= nil then
&#9;&#9;selectedButtonTable[colorHolder].Parent.BackgroundColor = BrickColor.Black();
&#9;end

&#9;guiButton.Parent.BackgroundColor = BrickColor.Yellow();
&#9;colorHolder.BackgroundColor = guiButton.BackgroundColor
&#9;selectedButtonTable[colorHolder] = guiButton
end

function onMouseUp(colorHolder, paletteFrame, guiButton, selectedButtonTable)
&#9;changeColorSelection(colorHolder, paletteFrame, guiButton, selectedButtonTable)

&#9;onMouseLeavePalette(paletteFrame)
end

function onShowColorDialog(paletteFrame)
&#9;paletteFrame.Visible = not(paletteFrame.Visible)
&#9;colorPaletteSelectMode = true
end


function onMouseEnterPalette(mouse)
&#9;colorPaletteSelectMode = true
end
function onMouseLeavePalette(paletteFrame)
&#9;colorPaletteSelectMode = false
&#9;paletteFrame.Visible = false
end

function processBrickColorValue(value, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)

&#9;local sideBar = Instance.new(&quot;Frame&quot;)
&#9;sideBar.Position = UDim2.new(0.5, 0, 0.0, 0)
&#9;sideBar.Size = UDim2.new(0.5, 0, 1.0, 0)
&#9;sideBar.BackgroundTransparency = 1.0
&#9;sideBar.Parent = subFrame
&#9;sideBar.BorderSizePixel = 0

&#9;local primaryColor = Instance.new(&quot;TextButton&quot;)
&#9;primaryColor.Position = UDim2.new(0.0, 1, 0.0, 1)
&#9;primaryColor.Size = UDim2.new(0.0, height-2, 0, height-2)
&#9;primaryColor.Text  = &quot;&quot;&#9;
&#9;primaryColor.FontSize = textSize
&#9;primaryColor.BackgroundColor = value.Value
&#9;primaryColor.BorderColor = BrickColor.Black()
&#9;primaryColor.Parent = sideBar

&#9;local hoverSelection = Instance.new(&quot;TextLabel&quot;)
&#9;hoverSelection.Position = UDim2.new(0.0, height+2, 0.0, 0)
&#9;hoverSelection.Size = UDim2.new(1.0, -height - 4, 1.0, 0)
&#9;hoverSelection.Text = &quot;&quot;
&#9;hoverSelection.Font = Enum.Font.ArialBold
&#9;hoverSelection.FontSize = textSize
&#9;hoverSelection.BackgroundTransparency = 1.0
&#9;hoverSelection.BorderSizePixel = 0
&#9;hoverSelection.TextColor = BrickColor.White()
&#9;hoverSelection.Text = primaryColor.BackgroundColor.Name;
&#9;hoverSelection.Parent = sideBar

&#9;local paletteFrame = Instance.new(&quot;Frame&quot;)
&#9;paletteFrame.Position = UDim2.new(primaryColor.Position.X.Scale, primaryColor.Position.X.Offset + height, primaryColor.Position.Y.Scale, primaryColor.Position.Y.Offset - height*7)
&#9;paletteFrame.Size = UDim2.new(0, height*8, 0, height*8)
&#9;paletteFrame.BackgroundColor = BrickColor.White()
&#9;paletteFrame.BorderColor = BrickColor.White()
&#9;paletteFrame.Visible = false;
&#9;paletteFrame.Parent = sideBar
&#9;paletteFrame.ZIndex = 2
&#9;paletteFrame.MouseEnter:connect(function() onMouseEnterPalette(mouse) end)
&#9;paletteFrame.MouseLeave:connect(function() onMouseLeavePalette(paletteFrame, mouse) end)

&#9;primaryColor.MouseButton1Down:connect(function() onShowColorDialog(paletteFrame) end)

&#9;local selectedButtonTable = {}
&#9;local colorButtonTable = {}
&#9;local oldButton = {}
&#9;for xOffset = 0, 7 do
&#9;&#9;for yOffset = 0,7 do
&#9;&#9;&#9;local guiFrame = Instance.new(&quot;Frame&quot;)
&#9;&#9;&#9;guiFrame.Position = UDim2.new(1.0/8 * xOffset, 0, 1.0/8*yOffset, 0)
&#9;&#9;&#9;guiFrame.Size = UDim2.new(1.0/8, 0, 1.0/8, 0)
&#9;&#9;&#9;guiFrame.BackgroundColor = BrickColor.White();
&#9;&#9;&#9;guiFrame.BorderSizePixel = 0
&#9;&#9;&#9;guiFrame.Parent = paletteFrame;
&#9;&#9;&#9;guiFrame.ZIndex = 2
&#9;&#9;
&#9;&#9;&#9;local guiButton = Instance.new(&quot;TextButton&quot;)
&#9;&#9;&#9;guiButton.FontSize = textSize
&#9;&#9;&#9;guiButton.Position = UDim2.new(0.0, 1, 0.0, 1)
&#9;&#9;&#9;guiButton.Size = UDim2.new(1.0, -2, 1.0, -2)
&#9;&#9;&#9;guiButton.Text = &quot;&quot;
&#9;&#9;&#9;guiButton.BorderSizePixel = 0
&#9;&#9;&#9;guiButton.AutoButtonColor = false
&#9;&#9;&#9;local color = BrickColor.palette(xOffset + yOffset*8)
&#9;&#9;&#9;colorButtonTable[color.Number] = guiButton
&#9;&#9;&#9;guiButton.BackgroundColor = color
&#9;&#9;&#9;guiButton.MouseEnter:connect(function() onMouseEnter(hoverSelection, guiButton, selectedButtonTable, oldButton) end)
&#9;&#9;&#9;guiButton.MouseButton1Up:connect(function() onMouseUp(primaryColor, paletteFrame, guiButton, selectedButtonTable, oldButton) end)
&#9;&#9;&#9;guiButton.MouseButton1Up:connect(function() value.Value = guiButton.BackgroundColor end)
&#9;&#9;&#9;guiButton.Parent = guiFrame
&#9;&#9;&#9;guiButton.ZIndex = 2

&#9;&#9;&#9;if guiButton.BackgroundColor == primaryColor.BackgroundColor then
&#9;&#9;&#9;&#9;guiFrame.BackgroundColor = BrickColor.White()
&#9;&#9;&#9;&#9;selectedButtonTable[primaryColor] = guiButton
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;valueConnections[#valueConnections+1] = value.Changed:connect(function(newValue) changeColorSelection(primaryColor, paletteFrame, colorButtonTable[newValue.Number], selectedButtonTable) end)&#9;
&#9;return subFrame
end


function onObjectValueMouseClick(guiFrame, value, objectButton)
&#9;objectValueSelect[&quot;Value&quot;] = value
&#9;objectValueSelect[&quot;Frame&quot;] = guiFrame
&#9;objectValueSelect[&quot;Enabled&quot;] = true

&#9;onObjectValueMouseLeave(value, objectButton)
end

function onObjectValueMouseEnter(value, objectButton)
&#9;objectValueSelect[&quot;HoverValue&quot;] = value
&#9;if value.Value then
&#9;&#9;objectButton.BackgroundColor = BrickColor.Blue()
&#9;else
&#9;&#9;objectButton.BackgroundColor = BrickColor.White()
&#9;end
end
&#9;
function onObjectValueMouseLeave(value, objectButton)
&#9;if objectValueSelect[&quot;HoverValue&quot;] == value then
&#9;&#9;objectValueSelect[&quot;HoverValue&quot;] = nil
&#9;end
&#9;objectButton.BackgroundColor = buttonColor
end

function onObjectValueCancel()
&#9;if objectValueSelect[&quot;Enabled&quot;] then
&#9;&#9;objectValueSelect[&quot;Enabled&quot;] = false

&#9;&#9;objectValueSelect[&quot;Frame&quot;].Visible = true
&#9;&#9;objectValueSelect[&quot;Frame&quot;] = nil
&#9;&#9;objectValueSelect[&quot;Value&quot;] = nil
&#9;end
end

function on3dObjectValueButton1Up(mouse, guiMain)
&#9;local part = mouse.Target
&#9;if part ~= nil then
&#9;&#9;objectValueSelect[&quot;Value&quot;].Value = part

&#9;&#9;objectValueSelect[&quot;Enabled&quot;] = false

&#9;&#9;objectValueSelect[&quot;Frame&quot;].Visible = true

&#9;&#9;objectValueSelect[&quot;Frame&quot;] = nil
&#9;&#9;objectValueSelect[&quot;Value&quot;] = nil
&#9;end
end

function on3dObjectValueMouseMove(mouse, guiMain)
end

function setObjectButtonText(guiFrame, objectButton, objectValue)
&#9;if objectValueSelect[&quot;Enabled&quot;] and objectValue == objectValueSelect[&quot;Value&quot;] then
&#9;&#9;guiFrame.Visible = true
&#9;&#9;objectValueSelect[&quot;Enabled&quot;] = false
&#9;&#9;objectValueSelect[&quot;Value&quot;] = nil
&#9;end

&#9;if  objectValue.Value ~= nil then
&#9;&#9;objectButton.Text = objectValue.Value.Name
&#9;else
&#9;&#9;objectButton.Text = &quot;[nil]&quot;
&#9;end
&#9;objectButton.BackgroundColor = buttonColor
end

function processObjectValue(value, playerGui, guiFrame)
&#9;local subFrame = sharedProcess(value.Name, guiFrame)
&#9;local objectButton = Instance.new(&quot;TextButton&quot;)
&#9;objectButton.FontSize = textSize
&#9;objectButton.Position = UDim2.new(0.5, 2, 0.0, 2)
&#9;objectButton.Size = UDim2.new(0.5, -4, 1.0, -4)
&#9;objectButton.BackgroundColor = BrickColor.White()
&#9;objectButton.TextColor = BrickColor.Black()
&#9;objectButton.Parent = subFrame
&#9;objectButton.AutoButtonColor = false

&#9;objectButton.MouseButton1Click:connect(function() onObjectValueMouseClick(guiFrame, value, objectButton) end)
&#9;objectButton.MouseEnter:connect(function() onObjectValueMouseEnter(value, objectButton) end)
&#9;objectButton.MouseLeave:connect(function() onObjectValueMouseLeave(value, objectButton) end)

&#9;valueConnections[#valueConnections+1] = value.Changed:connect(function(newObjectValue) setObjectButtonText(guiFrame, objectButton, value) end)&#9;

&#9;setObjectButtonText(guiFrame, objectButton, value)
&#9;return subFrame
end


function processValue(value, playerGui, guiFrame)
&#9;if constrained(value) then origValueMap[value.Name] = value.ConstrainedValue
&#9;else origValueMap[value.Name] = value.Value end

&#9;if #value:GetChildren() &gt; 0 and value:IsA(&quot;StringValue&quot;) then
&#9;&#9;return processEnumValue(value, guiFrame)
&#9;else
&#9;&#9;if value.className == &quot;BoolValue&quot; then
&#9;&#9;&#9;return processBoolValue(value, guiFrame)
&#9;&#9;elseif value.className == &quot;IntValue&quot; then
&#9;&#9;&#9;return processIntValue(value, guiFrame)
&#9;&#9;elseif value.className == &quot;NumberValue&quot; then
&#9;&#9;&#9;return processNumberValue(value, guiFrame)
&#9;&#9;elseif value.className == &quot;StringValue&quot; then
&#9;&#9;&#9;return processStringValue(value, guiFrame)
&#9;&#9;elseif value.className == &quot;ObjectValue&quot; then
&#9;&#9;&#9;return processObjectValue(value, playerGui, guiFrame)
&#9;&#9;elseif value.className == &quot;BrickColorValue&quot; then
&#9;&#9;&#9;return processBrickColorValue(value, guiFrame)
&#9;&#9;elseif value.className == &quot;IntConstrainedValue&quot; or value.className == &quot;DoubleConstrainedValue&quot; then
&#9;&#9;&#9;return processConstrainedNumberValue(value, guiFrame)
&#9;&#9;else
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;end
end

function killFrame(frame)
&#9;screen.Enabled = false
&#9;frame:remove()
end

function closeFrame(frame)
&#9;lastPart = nil
&#9;if frame.Parent == nil then return end
&#9;frame:TweenSizeAndPosition(UDim2.new(0,0,0,0),UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.In,Enum.EasingStyle.Back,0.5, true, function() killFrame(frame) end)
end

function allowTween()
&#9;canTween = true
end

function openFrame(frame,size)
&#9;if not canTween then return end
&#9;canTween = false
&#9;screen.Enabled = true
&#9;frame.Size = UDim2.new(0,0,0,0)
&#9;frame.Position = UDim2.new(0.5,0,0.5,0)
&#9;frame:TweenSizeAndPosition(size,UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Back,0.5,true, function() allowTween() end)
end

function sharedMain(name, playerGui)
&#9;local parentFrame = Instance.new(&quot;Frame&quot;)
&#9;parentFrame.Style = Enum.FrameStyle.RobloxRound
&#9;parentFrame.Active = true
&#9;parentFrame.Name = &quot;MainFrame&quot;
&#9;parentFrame.Size = UDim2.new(1, 0, 1, 0)
&#9;parentFrame.BackgroundTransparency = 1

&#9;local titleLabel = Instance.new(&quot;TextLabel&quot;)
&#9;titleLabel.Name = &quot;TitleLabel&quot;
&#9;titleLabel.Font = Enum.Font.ArialBold
&#9;titleLabel.FontSize = textSize + 2
&#9;titleLabel.Size = UDim2.new(1.0, 0.0, 0.0, height)
&#9;titleLabel.TextColor = BrickColor.White()
&#9;titleLabel.BackgroundColor = BrickColor.new(&quot;Cool yellow&quot;)
&#9;titleLabel.BackgroundTransparency = 1
&#9;titleLabel.Text = name
&#9;titleLabel.Parent = parentFrame

&#9;local closeButton = Instance.new(&quot;TextButton&quot;)
&#9;closeButton.Name = &quot;CloseButton&quot;
&#9;closeButton.Style = Enum.ButtonStyle.RobloxButtonDefault
&#9;closeButton.Size = UDim2.new(0,20,0,20)
&#9;closeButton.Position = UDim2.new(1,-16,0,-5)
&#9;closeButton.Text = &quot;X&quot;
&#9;closeButton.TextColor3 = Color3.new(1,1,1)
&#9;closeButton.Font = Enum.Font.ArialBold
&#9;closeButton.FontSize = Enum.FontSize.Size18
&#9;closeButton.Parent = parentFrame

&#9;local closeCon = nil
&#9;closeCon = closeButton.MouseButton1Click:connect(function()
&#9;&#9;closeCon:disconnect()
&#9;&#9;removeBillboards()
&#9;&#9;screen.Enabled = false
&#9;&#9;cancelSelectionGui()
&#9;end)

&#9;local scrollFrame, scrollUpButton, scrollDownButton, recalculateFunction = RbxGui.CreateScrollingFrame()
&#9;gridRecalc = recalculateFunction
&#9;scrollFrame.Name = &quot;ValueContainer&quot;
&#9;scrollFrame.Size = UDim2.new(1,-17,1,-50)
&#9;scrollFrame.Position = UDim2.new(0,0,0,25)
&#9;scrollFrame.Parent = parentFrame

&#9;local changerCon = nil
&#9;delay(1,function()
&#9;&#9;if scrollFrame and scrollFrame.Parent then
&#9;&#9;&#9;changerCon = scrollFrame.Changed:connect(function(prop)
&#9;&#9;&#9;&#9;if prop == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;&#9;&#9;if scrollFrame.AbsoluteSize.Y &lt; 38 then
&#9;&#9;&#9;&#9;&#9;&#9;changerCon:disconnect()
&#9;&#9;&#9;&#9;&#9;&#9;closeFrame(parentFrame)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;gridRecalc()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end)

&#9;local dieCon
&#9;dieCon = scrollFrame.AncestryChanged:connect(function(child,parent)
&#9;&#9;if parent == nil then
&#9;&#9;&#9;dieCon:disconnect()
&#9;&#9;&#9;if changerCon then changerCon:disconnect() end
&#9;&#9;end
&#9;end)

&#9;local scrollButtonFrame = Instance.new(&quot;Frame&quot;)
&#9;scrollButtonFrame.Name = &quot;ScrollButtonFrame&quot;
&#9;scrollButtonFrame.Position = UDim2.new(1,-17,0,25)
&#9;scrollButtonFrame.Size = UDim2.new(0,17,1,-50)
&#9;scrollButtonFrame.BackgroundTransparency = 1
&#9;scrollButtonFrame.Parent = parentFrame

&#9;scrollUpButton.Parent = scrollButtonFrame
&#9;scrollDownButton.Parent = scrollButtonFrame
&#9;scrollDownButton.Position = UDim2.new(0,0,1,-17)
&#9;

&#9;return parentFrame
end

function sharedButtons(parentFrame, valueChildren)
&#9;local buttonFrame = Instance.new(&quot;Frame&quot;)
&#9;buttonFrame.Name = &quot;Buttons&quot;
&#9;buttonFrame.BackgroundTransparency = 1.0
&#9;buttonFrame.Size = UDim2.new(1.0, 0.0, 0.0, height)
&#9;buttonFrame.Position = UDim2.new(0.0, 0, 1, -25)
&#9;buttonFrame.Parent = parentFrame
&#9;valueChildren = valueChildren + 1

&#9;local okButton = Instance.new(&quot;TextButton&quot;)
&#9;okButton.FontSize = textSize
&#9;okButton.Name = &quot;OkButton&quot;
&#9;okButton.Font = Enum.Font.ArialBold
&#9;okButton.TextColor = BrickColor.White()
&#9;okButton.Style = Enum.ButtonStyle.RobloxButton
&#9;okButton.Text = &quot;Ok&quot;
&#9;okButton.Size = UDim2.new(.25, -4, 0.0, height + 5)
&#9;okButton.Position = UDim2.new(0.55, 2, 0.0, 2)
&#9;okButton.BackgroundColor = buttonColor
&#9;okButton.MouseButton1Click:connect(function() removeSelectionGui() end)
&#9;okButton.Parent = buttonFrame

&#9;local cancelButton = okButton:clone()
&#9;cancelButton.Name = &quot;cancelButton&quot;
&#9;cancelButton.Text  = &quot;Cancel&quot;
&#9;cancelButton.Position = UDim2.new(0.200000003, 2, 0, 2)
&#9;cancelButton.MouseButton1Click:connect(function() cancelSelectionGui() end)
&#9;cancelButton.Parent = buttonFrame
end

function processVehicleSeat(vehicleSeat, playerGui, valueChildren)
&#9;local parentFrame = sharedMain(vehicleSeat.Name, playerGui)
&#9;lastVehicleSeat = vehicleSeat

&#9;local valueChildren = 1
&#9;local fields = {&quot;MaxSpeed&quot;, &quot;Steer&quot;, &quot;Torque&quot;, &quot;TurnSpeed&quot;}
&#9;for pos, field in pairs(fields) do
&#9;&#9;local newFrame = processPropertyValue(vehicleSeat, field, field, guiFrame)
&#9;&#9;if newFrame then
&#9;&#9;&#9;newFrame.Position = UDim2.new(0.0, 0, 0.0, (valueChildren*height) - height)
&#9;&#9;&#9;newFrame.Parent = parentFrame.ValueContainer
&#9;&#9;&#9;valueChildren = valueChildren + 1
&#9;&#9;end

&#9;end

&#9;sharedButtons(parentFrame, valueChildren)
&#9;return parentFrame
end

function processConfiguration(config, playerGui)
&#9;local parentFrame = sharedMain(config.Name, playerGui)
&#9;lastConfig = config

&#9;local valueChildren = 1
&#9;local children = config:GetChildren() 
&#9;if children then
&#9;&#9;for pos, child in pairs(children) do
&#9;&#9;&#9;local newFrame = processValue(child, playerGui, parentFrame)
&#9;&#9;&#9;if newFrame then
&#9;&#9;&#9;&#9;newFrame.Position = UDim2.new(0.0, 0, 0.0, (valueChildren*height) - height)
&#9;&#9;&#9;&#9;newFrame.Parent = parentFrame.ValueContainer
&#9;&#9;&#9;&#9;valueChildren = valueChildren + 1
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;sharedButtons(parentFrame, valueChildren)
&#9;return parentFrame
end

function on3dMouseMove(mouse, guiMain)
&#9;if mouse.Target and canSelectObject(mouse.Target) then

&#9;&#9;local part = mouse.Target
&#9;&#9;if part:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;foundPart = part
&#9;&#9;else
&#9;&#9;&#9;foundPart = findConfiguration(part)
&#9;&#9;end

&#9;&#9;if foundPart then
&#9;&#9;&#9;mouse.Icon = &quot;rbxasset://textures\\DragCursor.png&quot;
&#9;&#9;&#9;if objectValueSelect[&quot;HoverBox&quot;] then 
&#9;&#9;&#9;&#9;local isModel, model = isInModel(part)
&#9;&#9;&#9;&#9;if isModel then
&#9;&#9;&#9;&#9;&#9;objectValueSelect[&quot;HoverBox&quot;].Adornee = model
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;objectValueSelect[&quot;HoverBox&quot;].Adornee = part
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;needsIconReset = true
&#9;&#9;else
&#9;&#9;&#9;if needsIconReset then
&#9;&#9;&#9;&#9;mouse.Icon = &quot;&quot;
&#9;&#9;&#9;&#9;if objectValueSelect[&quot;HoverBox&quot;] then objectValueSelect[&quot;HoverBox&quot;].Adornee = nil end
&#9;&#9;&#9;&#9;needsIconReset = false
&#9;&#9;&#9;end
&#9;&#9;end
&#9;else
&#9;&#9;if needsIconReset then
&#9;&#9;&#9;mouse.Icon = &quot;&quot;
&#9;&#9;&#9;if objectValueSelect[&quot;HoverBox&quot;] then objectValueSelect[&quot;HoverBox&quot;].Adornee = nil end
&#9;&#9;&#9;needsIconReset = false
&#9;&#9;end
&#9;end

&#9;if objectValueSelect[&quot;Enabled&quot;] then
&#9;&#9;on3dObjectValueMouseMove(mouse, guiMain)
&#9;end
end

function cancelSelectionGui()
&#9;lastPart = nil

&#9;if selectionGui ~= nil then
&#9;&#9;closeFrame(selectionGui)
&#9;&#9;selectionGui = nil
&#9;&#9;for pos, connection in pairs(valueConnections) do
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end
&#9;&#9;valueConnections = {}
&#9;end

&#9;showConfigurationAnnotations()

&#9;if lastConfig then
&#9;&#9;local configValues = lastConfig:GetChildren()
&#9;&#9;for i = 1, #configValues do
&#9;&#9;&#9;if origValueMap[configValues[i].Name] ~= nil then
&#9;&#9;&#9;&#9;if constrained(configValues[i]) then configValues[i].ConstrainedValue = origValueMap[configValues[i].Name]
&#9;&#9;&#9;&#9;else configValues[i].Value = origValueMap[configValues[i].Name] end

&#9;&#9;&#9;&#9;origValueMap[configValues[i].Name] = nil
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif lastVehicleSeat then
&#9;&#9;lastVehicleSeat.MaxSpeed = origValueMap[&quot;MaxSpeed&quot;]
&#9;&#9;origValueMap[&quot;MaxSpeed&quot;] = nil
&#9;&#9;lastVehicleSeat.Steer = origValueMap[&quot;Steer&quot;]
&#9;&#9;origValueMap[&quot;Steer&quot;] = nil
&#9;&#9;lastVehicleSeat.Torque = origValueMap[&quot;Torque&quot;]
&#9;&#9;origValueMap[&quot;Torque&quot;] = nil
&#9;&#9;lastVehicleSeat.TurnSpeed = origValueMap[&quot;TurnSpeed&quot;]
&#9;&#9;origValueMap[&quot;TurnSpeed&quot;] = nil
&#9;end
end

function removeSelectionGui()
&#9;if selectionGui ~= nil then
&#9;&#9;closeFrame(selectionGui)
&#9;&#9;for pos, connection in pairs(valueConnections) do
&#9;&#9;&#9;connection:disconnect()
&#9;&#9;end
&#9;&#9;valueConnections = {}
&#9;end

&#9;if objectValueSelect[&quot;HoverBox&quot;] then objectValueSelect[&quot;HoverBox&quot;].Adornee = nil end

&#9;showConfigurationAnnotations()

&#9;if lastConfig then
&#9;&#9;local configValues = lastConfig:GetChildren()
&#9;&#9;for i = 1, #configValues do
&#9;&#9;&#9;if origValueMap[configValues[i].Name] ~= nil then
&#9;&#9;&#9;&#9;origValueMap[configValues[i].Name] = nil
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end



function canSelectObject(part)

&#9;if isRestricted then
&#9;&#9;waitForChild(playerArea,&quot;PlayerArea&quot;)
&#9;&#9;if isRestricted and playerArea:FindFirstChild(&quot;PlayerArea&quot;) and part:IsDescendantOf(playerArea.PlayerArea) then
&#9;&#9;&#9;return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) 
&#9;&#9;else
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;end

&#9;return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;)
end

local function findConfigInModel(model)
&#9;local children = model:GetChildren()
&#9;for i = 1, #children do
&#9;&#9;if children[i]:IsA(&quot;Configuration&quot;) then
&#9;&#9;&#9;return children[i]
&#9;&#9;end
&#9;end
&#9;for i = 1, #children do
&#9;&#9;if #children[i]:GetChildren() &gt; 0 then
&#9;&#9;&#9;local returnValue = findConfigInModel(children[i])
&#9;&#9;&#9;if returnValue ~= nil then
&#9;&#9;&#9;&#9;return returnValue
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;return nil
end

function findConfiguration(part)
&#9;local partInModel, model = isInModel(part)
&#9;if partInModel then
&#9;&#9;local isModelConfig = findConfigInModel(model)
&#9;&#9;return isModelConfig
&#9;else
&#9;&#9;local children = part:GetChildren() &#9;&#9;
&#9;&#9;if children then
&#9;&#9;&#9;for pos, child in pairs(children) do
&#9;&#9;&#9;&#9;if child:IsA(&quot;Configuration&quot;) then
&#9;&#9;&#9;&#9;&#9;return child
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return nil
end

function removeBillboards()
&#9;local guis = guiMain:GetChildren()
&#9;for i = 1, #guis do
&#9;&#9;if guis[i]:IsA(&quot;Frame&quot;) then
&#9;&#9;&#9;guis[i]:remove()
&#9;&#9;end
&#9;end
end

function on3dButton1Up(mouse, guiMain, playerGui)
&#9;if objectValueSelect[&quot;Enabled&quot;] then
&#9;&#9;on3dObjectValueButton1Up(mouse, guiMain)
&#9;&#9;return
&#9;elseif canSelectObject(mouse.Target) then
&#9;&#9;local part = mouse.Target
&#9;&#9;local foundPart = nil
&#9;&#9;if part:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;&#9;foundPart = part
&#9;&#9;else
&#9;&#9;&#9;foundPart = findConfiguration(part)
&#9;&#9;end
&#9;
&#9;&#9;if foundPart then
&#9;&#9;&#9;
&#9;&#9;&#9;if foundPart == lastPart then
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;&#9;lastPart = foundPart

&#9;&#9;&#9;removeBillboards()
&#9;&#9;&#9;screen.Enabled = true

&#9;&#9;&#9;if foundPart:IsA(&quot;Configuration&quot;) then
&#9;&#9;&#9;&#9;selectionGui = processConfiguration(foundPart, playerGui)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;selectionGui = processVehicleSeat(foundPart, playerGui)&#9;
&#9;&#9;&#9;end
&#9;&#9;&#9;selectionGui.Parent = guiMain
&#9;&#9;&#9;openFrame(selectionGui, selectionGui.Size)

&#9;&#9;&#9;local hasModel, model = isInModel(part)
&#9;&#9;&#9;if hasModel then
&#9;&#9;&#9;&#9;screen.Adornee = model
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;screen.Adornee = part
&#9;&#9;&#9;end

&#9;&#9;&#9;return
&#9;&#9;end
&#9;else
&#9;&#9;cancelSelectionGui()
&#9;end
end

function createBillboardGui(name, objectAdorning)
&#9;local screen = Instance.new(&quot;BillboardGui&quot;)
&#9;screen.Name = tostring(name)
&#9;screen.Size = UDim2.new(1.5,0,1.5,0)
&#9;screen.Enabled = true
&#9;screen.Active = true
&#9;screen.AlwaysOnTop = true

&#9;local isModel, model = isInModel(objectAdorning)
&#9;if isModel then
&#9;&#9;screen.Adornee = model
&#9;else
&#9;&#9;screen.Adornee = objectAdorning
&#9;end

&#9;local badgeFrame = Instance.new(&quot;Frame&quot;)
&#9;badgeFrame.Name = &quot;BadgeFrame&quot;
&#9;badgeFrame.Size = UDim2.new(2,0,1,0)
&#9;badgeFrame.Position = UDim2.new(-0.5,0,0,0)
&#9;badgeFrame.BackgroundTransparency = 1
&#9;badgeFrame.Parent = screen

&#9;return screen
end

function giveConfigBadge(parent)
&#9;local configBadge = Instance.new(&quot;ImageLabel&quot;)
&#9;configBadge.Name = &quot;ConfigBadge&quot;
&#9;configBadge.BackgroundTransparency = 1
&#9;configBadge.Image = &quot;http://www.roblox.com/asset/?id=59785529&quot;
&#9;configBadge.Position = UDim2.new(0.25,0,0)
&#9;configBadge.Size = UDim2.new(0.5,0,1,0)
&#9;configBadge.Parent = parent

&#9;local badgeCon = configBadge.Changed:connect(function(prop)
&#9;&#9;if prop == &quot;AbsoluteSize&quot; then
&#9;&#9;&#9;configBadge.Visible = (configBadge.AbsoluteSize.X &gt; 10)
&#9;&#9;end
&#9;end)

&#9;local killCon = nil
&#9;killCon = configBadge.AncestryChanged:connect(function(child,parent)
&#9;&#9;if parent == nil then
&#9;&#9;&#9;killCon:disconnect()
&#9;&#9;&#9;badgeCon:disconnect()
&#9;&#9;end
&#9;end)
end

function onEquippedLocal(mouse)
&#9;local character = script.Parent.Parent
&#9;player = game.Players.LocalPlayer

&#9;if player == nil then return end

&#9;if isRestricted then
&#9;&#9;waitForChild(game.Workspace,&quot;BuildingAreas&quot;)
&#9;&#9;waitForChild(game.Workspace.BuildingAreas,&quot;Area1&quot;)
&#9;&#9;waitForChild(game.Workspace.BuildingAreas.Area1,&quot;Player&quot;)
&#9;&#9;local areas = game.Workspace.BuildingAreas:GetChildren()
&#9;&#9;for i = 1, #areas do
&#9;&#9;&#9;if areas[i]:FindFirstChild(&quot;Player&quot;) and areas[i].Player.Value == player.Name then
&#9;&#9;&#9;&#9;playerArea = areas[i]
&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;if not screen then
&#9;&#9;screen = Instance.new(&quot;BillboardGui&quot;)
&#9;&#9;screen.Name = &quot;ConfigGui&quot;
&#9;&#9;screen.Size = UDim2.new(0,360,0,180)
&#9;&#9;screen.Enabled = false
&#9;&#9;screen.Active = true
&#9;&#9;screen.Parent = player.PlayerGui
&#9;&#9;screen.AlwaysOnTop = true

&#9;&#9;guiMain = Instance.new(&quot;Frame&quot;)
&#9;&#9;guiMain.BackgroundTransparency = 1
&#9;&#9;guiMain.Size = UDim2.new(1,0,1,0)
&#9;&#9;guiMain.Parent = screen
&#9;else
&#9;&#9;removeBillboards()
&#9;&#9;lastPart = nil
&#9;&#9;screen.Parent = player.PlayerGui
&#9;end

&#9;setUpConfigurationService(guiMain)
&#9;showConfigurationAnnotations()

&#9;mouse.Button1Up:connect(function() on3dButton1Up(mouse, guiMain, player.PlayerGui) end)
&#9;mouse.Move:connect(function() on3dMouseMove(mouse, guiMain) end)

&#9;objectValueSelect.HoverBox = Instance.new(&quot;SelectionBox&quot;)
&#9;objectValueSelect.HoverBox.Name = &quot;HoverBox&quot;
&#9;objectValueSelect.HoverBox.Color = BrickColor.new(&quot;Really blue&quot;)
&#9;objectValueSelect.HoverBox.Transparency = 0.5
&#9;objectValueSelect.HoverBox.Adornee = nil
&#9;objectValueSelect.HoverBox.Parent = player.PlayerGui;
end

function onUnequippedLocal()

&#9;local guiChildren = game.Players.LocalPlayer.PlayerGui:GetChildren()
&#9;for i = 1, #guiChildren do
&#9;&#9;if guiChildren[i]:IsA(&quot;BillboardGui&quot;) then
&#9;&#9;&#9;guiChildren[i].Parent = nil
&#9;&#9;end
&#9;end

&#9;destroyConfigurationService()

&#9;objectValueSelect.HoverBox:Remove()

&#9;if screen then
&#9;&#9;screen.Parent = nil
&#9;end

&#9;player = nil

&#9;hideConfigurationAnnotations()

&#9;objectValueSelect = {}
end


local configTable = {}

function createVisualAnnotation(config, guiMain)
&#9;local selection = Instance.new(&quot;SelectionBox&quot;)
&#9;selection.Name = &quot;Annotation&quot;
&#9;selection.Color = BrickColor.new(&quot;Really blue&quot;)
&#9;selection.Transparency = 0.5
&#9;selection.Parent = guiMain.Parent
&#9;return selection
end

function configurationParentChanged(data, part)
&#9;local isModel, model = isInModel(part)
&#9;if not isModel then
&#9;&#9;data[&quot;VisualAnnotation&quot;].Adornee = part
&#9;else
&#9;&#9;data[&quot;VisualAnnotation&quot;].Adornee = model
&#9;end
end

function showConfigurationAnnotations()
&#9;for config, data in pairs(configTable) do
&#9;&#9;data[&quot;VisualAnnotation&quot;].Visible = true
&#9;end
end


function hideConfigurationAnnotations()
&#9;for config, data in pairs(configTable) do
&#9;&#9;data[&quot;VisualAnnotation&quot;].Visible = false
&#9;end
end

local function isInMyArea(part)
&#9;if part.Parent == nil then return false end
&#9;if part.Parent:FindFirstChild(&quot;Player&quot;) and part.Parent.Player:IsA(&quot;StringValue&quot;) then
&#9;&#9;if part.Parent.Player.Value == player.Name then
&#9;&#9;&#9;return true
&#9;&#9;else
&#9;&#9;&#9;return false
&#9;&#9;end
&#9;elseif part.Parent == game.Workspace.BuildingAreas or part.Parent == game.Workspace then
&#9;&#9;return false
&#9;else
&#9;&#9;return isInMyArea(part.Parent)
&#9;end
end

function configurationAdded(config, guiMain)
&#9;if configTable[config] then
&#9;&#9;return
&#9;end

&#9;if isRestricted and not isInMyArea(config) then
&#9;&#9;return&#9;
&#9;end
&#9;
&#9;local data = {}
&#9;data.Configuration = config
&#9;data.VisualAnnotation = createVisualAnnotation(config, guiMain)
&#9;if config:IsA(&quot;Configuration&quot;) then
&#9;&#9;data.Connection = config.AncestryChanged:connect(function(child, newParent)
&#9;&#9;&#9;if child == config then
&#9;&#9;&#9;&#9;configurationParentChanged(data, newParent)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;configurationParentChanged(data, config.Parent)
&#9;else
&#9;&#9;configurationParentChanged(data, config)
&#9;end

&#9;local billboardName = tostring(config.Parent)

&#9;newBillboard = createBillboardGui(billboardName,config.Parent)
&#9;newBillboard.Parent = game.Players.LocalPlayer.PlayerGui
&#9;giveConfigBadge(newBillboard:FindFirstChild(&quot;BadgeFrame&quot;))

&#9;configTable[config] = data
end

function configurationRemoved(config)
&#9;local data = configTable[config]&#9;
&#9;if not(data) then
&#9;&#9;--I have no opinion about this
&#9;&#9;return
&#9;end

&#9;if data.Connection then
&#9;&#9;data.Connection:disconnect()
&#9;end

&#9;data.VisualAnnotation:Remove()
&#9;
&#9;configTable[config] = nil
end

local ServiceConnections

function findVehicleSeats(object, guiMain)
&#9;if object:IsA(&quot;VehicleSeat&quot;) then
&#9;&#9;configurationAdded(object, guiMain)
&#9;end
&#9;for index,child in pairs(object:GetChildren()) do
&#9;&#9;findVehicleSeats(child, guiMain)
&#9;end
end

function setUpConfigurationService(guiMain)
&#9;ServiceConnections = {}
&#9;local collectionService = game:GetService(&quot;CollectionService&quot;)

&#9;ServiceConnections[#ServiceConnections+1] = collectionService.ItemAdded:connect(function(instance) if instance:IsA(&quot;Configuration&quot;) then configurationAdded(instance, guiMain) end end)
&#9;ServiceConnections[#ServiceConnections+1] = collectionService.ItemRemoved:connect(function(instance) if instance:IsA(&quot;Configuration&quot;) then configurationRemoved(instance) end end)

&#9;local configs = collectionService:GetCollection(&quot;Configuration&quot;)
&#9;if configs then
&#9;&#9;for pos, config in pairs(configs) do
&#9;&#9;&#9;configurationAdded(config, guiMain)
&#9;&#9;end
&#9;end

&#9;ServiceConnections[#ServiceConnections+1] = game.workspace.DescendantAdded:connect(function(instance) if instance:IsA(&quot;VehicleSeat&quot;) then configurationAdded(instance, guiMain) end end)
&#9;ServiceConnections[#ServiceConnections+1] = game.workspace.DescendantRemoving:connect(function(instance) if instance:IsA(&quot;VehicleSeat&quot;) then configurationRemoved(instance) end end)
&#9;findVehicleSeats(game.workspace, guiMain)

end

function destroyConfigurationService()
&#9;for config, data in pairs(configTable) do
&#9;&#9;configurationRemoved(config)
&#9;end
&#9;for index, connection in pairs(ServiceConnections) do
&#9;&#9;connection:disconnect()
&#9;end
&#9;ServiceConnections = {}
end


Tool.Selected:connect(onEquippedLocal)
Tool.Deselected:connect(onUnequippedLocal)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX553">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Draw</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="BrickColorValue" referent="RBX554">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">Value</string>
								<int name="Value">119</int>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX555">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">DrawLocal</string>
								<ProtectedString name="Source">local delayz = 0
local spraying = false

function stick(x, y)
&#9;weld = Instance.new(&quot;Weld&quot;) 
&#9;weld.Part0 = x
&#9;weld.Part1 = y
&#9;local HitPos = x.Position
&#9;local CJ = CFrame.new(HitPos) 
&#9;local C0 = x.CFrame:inverse() *CJ 
&#9;local C1 = y.CFrame:inverse() * CJ 
&#9;weld.C0 = C0 
&#9;weld.C1 = C1 
&#9;weld.Parent = x
end

function spray(mouse)
&#9;local j = Instance.new(&quot;Part&quot;)
&#9;j.BrickColor = script.Parent.Value.Value
&#9;j.formFactor = 0
&#9;j.Size = Vector3.new(1,1,1)
&#9;j.Position = mouse.hit.p
&#9;j.Parent = script.Parent.Parent
&#9;j.CanCollide = false
&#9;j.BottomSurface = 0
&#9;j.TopSurface = 0
&#9;j.Anchored = true
&#9;if mouse.Target.Anchored then return end
&#9;j.Anchored = false
&#9;stick(j,mouse.Target)
end

function onSelected(mouse)
&#9;mouse.Icon = &quot;rbxasset://textures\\GunCursor.png&quot;
&#9;mouse.Button1Down:connect(function() spraying = true while spraying == true do wait(delayz) spray(mouse) end end)
&#9;mouse.Button1Up:connect(function() spraying = false end)
end

script.Parent.Selected:connect(onSelected)</ProtectedString>
							</Properties>
						</Item>
						<Item class="LocalScript" referent="RBX556">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">GUIControler</string>
								<ProtectedString name="Source">local Tool = script.Parent


local selectionBox
local selectionLasso
local inGui = false
local inPalette = false

local selectedButtonTable = {}
local oldButton = nil

function onMouseLeave(hoverSelection)
&#9;if oldButton ~= nil then
&#9;&#9;local notSelected = true
&#9;&#9;local selectionText = &quot;&quot;
&#9;&#9;for key, value in pairs(selectedButtonTable) do
&#9;&#9;&#9;if oldButton == value then
&#9;&#9;&#9;&#9;notSelected = false
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;selectionText = value.BackgroundColor.Name
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if notSelected then
&#9;&#9;&#9;hoverSelection.Text = selectionText
&#9;&#9;&#9;oldButton.Parent.BackgroundColor = BrickColor.Black()
&#9;&#9;end
&#9;end
&#9;oldButton = nil
end

function onMouseEnter(hoverSelection, guiButton)
&#9;onMouseLeave(hoverSelection)
&#9;hoverSelection.Text = guiButton.BackgroundColor.Name
&#9;if guiButton ~= selectedButton then
&#9;&#9;guiButton.Parent.BackgroundColor = BrickColor.White()
&#9;&#9;oldButton = guiButton
&#9;end
end

function onMouseUp(colorHolder, paletteFrame, guiButton)
&#9;if selectedButtonTable[colorHolder] ~= nil then
&#9;&#9;selectedButtonTable[colorHolder].Parent.BackgroundColor = BrickColor.Black()
&#9;end
&#9;guiButton.Parent.BackgroundColor = BrickColor.Yellow()
&#9;colorHolder.BackgroundColor = guiButton.BackgroundColor
&#9;selectionBox.Color = guiButton.BackgroundColor
&#9;selectionLasso.Color = guiButton.BackgroundColor
&#9;Tool.Value.Value = guiButton.BackgroundColor
&#9;selectedButtonTable[colorHolder] = guiButton
&#9;
&#9;onMouseLeavePalette(paletteFrame)
&#9;
end

function onShowColorDialog(paletteFrame)
&#9;paletteFrame.Visible = true
end

function onMouseEnterGui(mouse)
&#9;inGui = true
end
function onMouseLeaveGui(mouse)
&#9;inGui = false
end

function onMouseEnterPalette(mouse)
&#9;inPalette = true
end
function onMouseLeavePalette(paletteFrame, mouse)
&#9;paletteFrame.Visible = false
&#9;inPalette = false
end
&#9;

local primaryColor = nil
function buildGui(root, mouse)

&#9;local mainFrame = Instance.new(&quot;Frame&quot;)
&#9;mainFrame.Position = UDim2.new(0.0, 0, 1.0, -250)
&#9;mainFrame.Size = UDim2.new(0.0, 200, 0.0, 250)
&#9;mainFrame.Transparency = 1.0
&#9;mainFrame.Parent = root
&#9;

&#9;local paletteFrame = Instance.new(&quot;Frame&quot;)
&#9;paletteFrame.Position = UDim2.new(0.0, 0, 0.0, 0)
&#9;paletteFrame.Size = UDim2.new(1.0, 0, 4.0/5, 0)
&#9;paletteFrame.BackgroundColor = BrickColor.Black()
&#9;paletteFrame.Visible = false
&#9;paletteFrame.Parent = mainFrame
&#9;paletteFrame.MouseEnter:connect(function() onMouseEnterPalette(mouse) end)
&#9;paletteFrame.MouseLeave:connect(function()  onMouseLeavePalette(paletteFrame, mouse) end)


&#9;local sideBar = Instance.new(&quot;Frame&quot;)
&#9;sideBar.Position = UDim2.new(0.0, 0, 4.0/5, 0)
&#9;sideBar.Size = UDim2.new(1.0, 0, 1.0/5, 0)
&#9;sideBar.BackgroundColor = BrickColor.Black()
&#9;sideBar.Parent = mainFrame
&#9;sideBar.MouseEnter:connect(function() onMouseEnterGui(mouse) end)
&#9;sideBar.MouseLeave:connect(function() onMouseLeaveGui(mouse) end)

&#9;primaryColor = Instance.new(&quot;TextButton&quot;)
&#9;primaryColor.Position = UDim2.new(0.75, 1, 0.0, 1)
&#9;primaryColor.Size = UDim2.new(0.25, -2, 1.0, -2)
&#9;primaryColor.Text  = &quot;&quot;&#9;
&#9;primaryColor.BackgroundColor = Tool.Value.Value
&#9;primaryColor.BorderColor = BrickColor.Black()
&#9;primaryColor.BorderSizePixel = 1
&#9;primaryColor.Parent = sideBar
&#9;primaryColor.MouseButton1Down:connect(function() onShowColorDialog(paletteFrame) end)


&#9;local hoverSelection = Instance.new(&quot;TextLabel&quot;)
&#9;hoverSelection.Position = UDim2.new(0.0, 0, 0.0, 0)
&#9;hoverSelection.Size = UDim2.new(0.75, 0, 1.0, 0)
&#9;hoverSelection.Text = &quot;&quot;
&#9;hoverSelection.BackgroundColor = BrickColor.Black()
&#9;hoverSelection.TextColor = BrickColor.White()
&#9;hoverSelection.Text = primaryColor.BackgroundColor.Name
&#9;hoverSelection.Parent = sideBar

&#9;for xOffset = 0, 7 do
&#9;&#9;for yOffset = 0,7 do
&#9;&#9;&#9;local guiFrame = Instance.new(&quot;Frame&quot;)
&#9;&#9;&#9;guiFrame.Position = UDim2.new(1.0/8 * xOffset, 0, 1.0/8*yOffset, 0)
&#9;&#9;&#9;guiFrame.Size = UDim2.new(1.0/8, 0, 1.0/8, 0)
&#9;&#9;&#9;guiFrame.BackgroundColor = BrickColor.Black()
&#9;&#9;&#9;guiFrame.BorderSizePixel = 0
&#9;&#9;&#9;guiFrame.Parent = paletteFrame
&#9;&#9;
&#9;&#9;&#9;local guiButton = Instance.new(&quot;TextButton&quot;)
&#9;&#9;&#9;guiButton.Position = UDim2.new(0.0, 2, 0.0, 2)
&#9;&#9;&#9;guiButton.Size = UDim2.new(1.0, -4, 1.0, -4)
&#9;&#9;&#9;guiButton.Text = &quot;&quot;
&#9;&#9;&#9;guiButton.BorderSizePixel = 0
&#9;&#9;&#9;guiButton.AutoButtonColor = false
&#9;&#9;&#9;guiButton.BackgroundColor = BrickColor.palette(xOffset + yOffset*8)
&#9;&#9;&#9;guiButton.MouseEnter:connect(function() onMouseEnter(hoverSelection, guiButton) end)
&#9;&#9;&#9;guiButton.MouseButton1Up:connect(function() onMouseUp(primaryColor, paletteFrame, guiButton) end)
&#9;&#9;&#9;guiButton.Parent = guiFrame

&#9;&#9;&#9;if guiButton.BackgroundColor == primaryColor.BackgroundColor then
&#9;&#9;&#9;&#9;guiFrame.BackgroundColor = BrickColor.White()
&#9;&#9;&#9;&#9;selectedButtonTable[primaryColor] = guiButton
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;mainFrame.MouseLeave:connect(function() onMouseLeave(hoverSelection) end)

end

local guiMain
function onEquippedLocal(mouse)
&#9;local character = script.Parent.Parent
&#9;local player = game.Players.LocalPlayer

&#9;guiMain = Instance.new(&quot;ScreenGui&quot;)
&#9;guiMain.Parent = player.PlayerGui

&#9;inGui = false
&#9;inPalette = false
&#9;mouseDown = false

&#9;buildGui(guiMain, mouse)
end

function onUnequippedLocal()
&#9;guiMain:Remove()
end


Tool.Selected:connect(onEquippedLocal)
Tool.Deselected:connect(onUnequippedLocal)
 </ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX557">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Insert</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX558">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">InsertLocal</string>
								<ProtectedString name="Source">local Tool = script.Parent

enabled = true
local origTexture = &#9;Tool.TextureId

local insertGui

local masterCategory = 1

local height = 20
local width = UDim.new(0.25, 0)
local height = 20
local buttonTransparency = 0.1
local insertButtonTransparency = 0.25
local transparency = 0.25

local freeIndex = 1
local freeViewing = false
local viewingModels = false
local currentSearchText = &quot;&quot;
local freeModels
local freeSets

local loading = false

local dropDownSelected = false

local selectedButtonColor = Color3.new(.1255, .4078, .1961)
local selectedButtonTextColor = Color3.new(1.0,1.0,1.0)

local buttonColor = Color3.new(0.0898, 0.2148, .2344)
local buttonTextColor = Color3.new(1.0,1.0,1.0)

local frameColor = Color3.new(.1255, .4078, .1961)
local frameTextColor = Color3.new(1.0,1.0,1.0)

local titleColor = Color3.new(0.6289, 0.8398, 0)
local titleTextColor = Color3.new(0,0,0)

local Window
local Data
local Mouse

local SetCache = {}

local soloGame = game:FindFirstChild(&quot;NetworkClient&quot;) == nil

--Constants
local useAssetVersionId = true
local BaseUrl = game:GetService(&quot;ContentProvider&quot;).BaseUrl
local ThumbnailUrl;
if useAssetVersionId then
&#9;ThumbnailUrl = BaseUrl .. &quot;Game/Tools/ThumbnailAsset.ashx?fmt=png&amp;wd=110&amp;ht=110&amp;assetversionid=&quot;
else
&#9;ThumbnailUrl = BaseUrl .. &quot;Game/Tools/ThumbnailAsset.ashx?fmt=png&amp;wd=110&amp;ht=110&amp;aid=&quot;
end

local InsertRows = 7
local InsertColumns = 3
local highlight = true
local minYSize = 8

--Static variables used for creating sizes
function getPlayer()
&#9;local character = script.Parent.Parent
&#9;return game.Players.LocalPlayer
end

function minimize()
&#9;if Window.Stamp.Frame.Visible then
&#9;&#9;cancelAssetPlacement()
&#9;elseif Window.Main.Frame.Visible then
&#9;&#9;Window.Main.Frame.Visible = false
&#9;&#9;Window.Minimized.Frame.Visible = true
&#9;end
end

function buildImageButton(image)
&#9;local buttonFrame = Instance.new(&quot;Frame&quot;)
&#9;buttonFrame.BackgroundColor = BrickColor.White()
&#9;buttonFrame.BackgroundTransparency = 1
&#9;buttonFrame.BorderSizePixel = 0

&#9;local button = Instance.new(&quot;ImageButton&quot;)
&#9;button.Name = &quot;Button&quot;
&#9;button.Parent  = buttonFrame
&#9;button.Image = image
&#9;button.Size = UDim2.new(.9, 0, .9, 0)
&#9;button.Position = UDim2.new(0.05, 0, 0.05, 0)
&#9;button.BorderSizePixel = 0
&#9;button.Parent  = buttonFrame
&#9;button.AutoButtonColor = false
&#9;button.BackgroundTransparency = 0

&#9;local latest = Instance.new(&quot;StringValue&quot;)
&#9;latest.Name = &quot;Latest&quot;
&#9;latest.Value = &quot;nil&quot;
&#9;latest.Parent = button

&#9;local fadeSpeed = 0.1
&#9;button.MouseEnter:connect(function()
&#9;&#9;button.Latest.Value = &quot;Enter&quot;
&#9;&#9;while button.Parent.BackgroundTransparency &gt; 0 and button.Latest.Value == &quot;Enter&quot; do
&#9;&#9;&#9;button.Parent.BackgroundTransparency = button.Parent.BackgroundTransparency - fadeSpeed
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end)

&#9;button.MouseLeave:connect(function()
&#9;&#9;imageButtonMouseLeave(button, fadeSpeed)
&#9;end)

&#9;button.MouseButton1Click:connect(function()
&#9;&#9;imageButtonMouseLeave(button, fadeSpeed)
&#9;end)
&#9;
&#9;return buttonFrame

end


function imageButtonMouseLeave(button, fadeSpeed)
&#9;button.Latest.Value = &quot;Leave&quot;
&#9;while button.Parent.BackgroundTransparency &lt; 1 and button.Latest.Value == &quot;Leave&quot; do
&#9;&#9;button.Parent.BackgroundTransparency = button.Parent.BackgroundTransparency + fadeSpeed
&#9;&#9;wait()
&#9;end
end

function buildTextButton(text)

&#9;local buttonFrame = Instance.new(&quot;Frame&quot;)
&#9;buttonFrame.BackgroundTransparency = 1.0
&#9;local button = Instance.new(&quot;TextButton&quot;)
&#9;button.Name = &quot;Button&quot;
&#9;button.Parent  = buttonFrame
&#9;button.Text = text
&#9;button.Size = UDim2.new(1.0, 0, 1.0, 0)
&#9;button.TextWrap = true
&#9;button.Position = UDim2.new(0.0, 0, 0.0, 0)
&#9;button.BorderSizePixel = 1
&#9;button.BackgroundTransparency = buttonTransparency
&#9;button.Parent  = buttonFrame
&#9;
&#9;return buttonFrame
end

function mouseEnterInsertButton(insertFrame)
&#9;if insertFrame ~= Data.CurrentRolloverInsertButton then
&#9;&#9;insertFrame.Button.Transparency = 0.0
&#9;&#9;Data.CurrentRolloverInsertButton = insertFrame
&#9;&#9;if highlight then
&#9;&#9;&#9;Window.Main.RolloverText.Text = Data.CurrentRolloverInsertButton.AssetName.Value
&#9;&#9;else 
&#9;&#9;&#9;Window.Main.RolloverText.Text = &quot;&quot;
&#9;&#9;end
&#9;end
end

function mouseLeaveInsertButton(insertFrame)
&#9;if insertFrame == Data.CurrentRolloverInsertButton then
&#9;&#9;Window.Main.RolloverText.Text = &quot;&quot;
&#9;&#9;Data.CurrentRolloverInsertButton = nil
&#9;&#9;
&#9;end
&#9;insertFrame.Button.Transparency = insertButtonTransparency
end

function buildInsertButton(position, size)
&#9;local insertFrame = buildImageButton(&quot;&quot;)
&#9;insertFrame.Name = &quot;InsertAssetButton&quot;
&#9;insertFrame.Position = position
&#9;insertFrame.Size = size
&#9;insertFrame.Button.BackgroundColor3 = Color3.new(1.0,1.0,1.0)
&#9;insertFrame.Button.Transparency = insertButtonTransparency
&#9;insertFrame.Visible = false

&#9;local assetId = Instance.new(&quot;IntValue&quot;)
&#9;assetId.Name = &quot;AssetId&quot;
&#9;assetId.Value = -1
&#9;assetId.Parent = insertFrame

&#9;local assetName = Instance.new(&quot;StringValue&quot;)
&#9;assetName.Name = &quot;AssetName&quot;
&#9;assetName.Value = &quot;&quot;
&#9;assetName.Parent = insertFrame

&#9;insertFrame.Button.MouseButton1Click:connect(function() mouseLeaveInsertButton(insertFrame) beginInsertAsset(insertFrame.AssetName.Value, insertFrame.AssetId.Value, insertFrame.Button.Image, false) end)
&#9;insertFrame.Button.MouseButton2Click:connect(function() mouseLeaveInsertButton(insertFrame) beginInsertAsset(insertFrame.AssetName.Value, insertFrame.AssetId.Value, insertFrame.Button.Image, true) end)
&#9;insertFrame.Button.MouseEnter:connect(function() mouseEnterInsertButton(insertFrame) end)
&#9;insertFrame.Button.MouseLeave:connect(function() mouseLeaveInsertButton(insertFrame) end)

&#9;return insertFrame
end

function setInsertButtonImageBehavior(insertFrame, visible, name, assetId)
&#9;if visible then
&#9;&#9;insertFrame.AssetName.Value = name
&#9;&#9;insertFrame.AssetId.Value = assetId
&#9;&#9;insertFrame.Button.Image = ThumbnailUrl  .. assetId
&#9;&#9;insertFrame.Button.BackgroundColor3 = Color3.new(1.0,1.0,1.0)
&#9;&#9;insertFrame.Visible = true
&#9;else
&#9;&#9;insertFrame.Visible = false
&#9;end&#9;&#9;
end

function mouseEnterSetButton(setFrame)
&#9;if setFrame.Button.AutoButtonColor then
&#9;&#9;setFrame.Button.Icon.Transparency = 0.0
&#9;end
end
function mouseLeaveSetButton(setFrame)
&#9;if setFrame.Button.AutoButtonColor then
&#9;&#9;setFrame.Button.Icon.Transparency = insertButtonTransparency
&#9;end
end

function buildSetButton(name, setId, setImageId, i,  count)
&#9;local buttonFrame = buildTextButton(&quot;&quot;)
&#9;buttonFrame.Name = &quot;SetButton&quot;
&#9;buttonFrame.Size = UDim2.new(1.0, 0, 0.0, height*2)
&#9;buttonFrame.Position = UDim2.new(0.0, 0, 0.0, (i-1)*height*2)
&#9;buttonFrame.Button.BackgroundColor3 = buttonColor
&#9;buttonFrame.Button.TextColor3 = buttonTextColor
&#9;buttonFrame.Visible = false

&#9;local setNameLabel = Instance.new(&quot;TextLabel&quot;)
&#9;setNameLabel.Name = &quot;Name&quot;
&#9;setNameLabel.Text = name
&#9;setNameLabel.TextColor3 = buttonTextColor
&#9;setNameLabel.BackgroundTransparency = 1.0
&#9;setNameLabel.Size = UDim2.new(1.0, -height*2, 1.0, 0.0)
&#9;setNameLabel.Position = UDim2.new(0.0, height*2, 0.0, 0)
&#9;setNameLabel.TextWrap = true
&#9;setNameLabel.TextXAlignment = Enum.TextXAlignment.Left
&#9;setNameLabel.Parent = buttonFrame.Button
&#9;
&#9;local iconLabel = Instance.new(&quot;ImageLabel&quot;)
&#9;iconLabel.Name = &quot;Icon&quot;
&#9;iconLabel.Image = BaseUrl .. &quot;asset/?id=&quot; .. setImageId
&#9;iconLabel.Size = UDim2.new(0.0, height*2 - 4, 0.0, height*2 -4)
&#9;iconLabel.Position = UDim2.new(0.0, 2, 0.0, 2)
&#9;iconLabel.Transparency = insertButtonTransparency
&#9;iconLabel.Parent = buttonFrame.Button
&#9;
&#9;local setValue = Instance.new(&quot;IntValue&quot;)
&#9;setValue.Name = &quot;SetId&quot;
&#9;setValue.Value = setId
&#9;setValue.Parent = buttonFrame

&#9;local setName = Instance.new(&quot;StringValue&quot;)
&#9;setName.Name = &quot;SetName&quot;
&#9;setName.Value = name
&#9;setName.Parent = buttonFrame
&#9;
&#9;buttonFrame.Button.MouseButton1Click:connect(function() selectSet(buttonFrame, buttonFrame.SetName.Value, buttonFrame.SetId.Value, 0) end)
&#9;buttonFrame.Button.MouseEnter:connect(function() mouseEnterSetButton(buttonFrame) end)
&#9;buttonFrame.Button.MouseLeave:connect(function() mouseLeaveSetButton(buttonFrame) end)

&#9;return buttonFrame
end

function previousSetPage()
&#9;if freeViewing == false then
&#9;&#9;local newIndex = math.max(1, Data.Category[Data.CurrentCategory].Index - (Data.Main.InsertRows * Data.Main.InsertColumns))
&#9;&#9;setSetIndex(newIndex)
&#9;else
&#9;&#9;freeIndex = math.max(freeIndex - 1,1)
&#9;&#9;if viewingModels then
&#9;&#9;&#9;loadFreeSets(freeModels,&quot;Models&quot;,currentSearchText)
&#9;&#9;else
&#9;&#9;&#9;loadFreeSets(freeDecals,&quot;Decals&quot;,currentSearchText)
&#9;&#9;end
&#9;&#9;Window.Main.NextPageButton.Visible = true
&#9;&#9;Window.Main.PreviousPageButton.Visible = true
&#9;&#9;if freeIndex == 1 then
&#9;&#9;&#9;Window.Main.PreviousPageButton.Visible = false
&#9;&#9;end
&#9;end
end

function nextSetPage()
&#9;if freeViewing == false then
&#9;&#9;local newIndex = math.max(0, Data.Category[Data.CurrentCategory].Index + (Data.Main.InsertRows * Data.Main.InsertColumns))
&#9;&#9;setSetIndex(newIndex)
&#9;else
&#9;&#9;freeIndex = freeIndex + 1
&#9;&#9;local models
&#9;&#9;if viewingModels then
&#9;&#9;&#9;loadFreeSets(freeModels,&quot;Models&quot;,currentSearchText)
&#9;&#9;&#9;models = game:GetService(&quot;InsertService&quot;):GetFreeModels(currentSearchText,freeIndex)
&#9;&#9;else
&#9;&#9;&#9;loadFreeSets(freeDecals,&quot;Decals&quot;,currentSearchText)
&#9;&#9;&#9;models = game:GetService(&quot;InsertService&quot;):GetFreeDecals(currentSearchText,freeIndex)
&#9;&#9;end
&#9;&#9;local totalCount = 21

&#9;&#9;for ndx,catinfo in ipairs( models ) do 
&#9;&#9;&#9;for k,v in pairs(catinfo) do 
&#9;&#9;&#9;&#9;if k == &quot;TotalCount&quot; then totalCount = v end
&#9;&#9;&#9;end 
&#9;&#9;end

&#9;&#9;-- we&apos;ve reach the end if true
&#9;&#9;if tonumber(totalCount) &lt; 21 then
&#9;&#9;&#9;Window.Main.NextPageButton.Visible = false
&#9;&#9;end

&#9;&#9;Window.Main.PreviousPageButton.Visible = true
&#9;end
end

function setSetIndex(dataOffset)
&#9;Data.Category[Data.CurrentCategory].Index = dataOffset

&#9;local PageSize = Data.Main.InsertRows*Data.Main.InsertColumns 
&#9;local contents = Data.Category[Data.CurrentCategory].Contents
&#9;if contents then
&#9;&#9;for index = 1, PageSize do
&#9;&#9;&#9;if Data.InsertButtons[index] then
&#9;&#9;&#9;&#9;if contents[index + dataOffset] then

&#9;&#9;&#9;&#9;&#9;local assetId
&#9;&#9;&#9;&#9;&#9;if useAssetVersionId then
&#9;&#9;&#9;&#9;&#9;&#9;assetId = contents[index + dataOffset].AssetVersionId 
&#9;&#9;&#9;&#9;&#9;else 
&#9;&#9;&#9;&#9;&#9;&#9;assetId = contents[index + dataOffset].AssetId
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;setInsertButtonImageBehavior(Data.InsertButtons[index], true, contents[index + dataOffset].Name, assetId)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;setInsertButtonImageBehavior(Data.InsertButtons[index], false)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Window.Main.PreviousPageButton.Visible = dataOffset &gt; 1
&#9;&#9;Window.Main.NextPageButton.Visible = ((dataOffset - 1) + PageSize) &lt; (#contents)
&#9;else
&#9;&#9;Window.Main.PreviousPageButton.Visible = false
&#9;&#9;Window.Main.NextPageButton.Visible = false
&#9;end
end

function previousCategoryPage() 
&#9;local newIndex = math.max(0, Data.Category[Data.CurrentCategory].SetIndex - Data.Main.InsertSets)
&#9;setCategoryIndex(newIndex) 
end

function nextCategoryPage()
&#9;local newIndex = math.max(0, Data.Category[Data.CurrentCategory].SetIndex + Data.Main.InsertSets)
&#9;setCategoryIndex(newIndex)
end

function setCategoryIndex(setIndex)
&#9;Data.Category[Data.CurrentCategory].SetIndex = setIndex
&#9;--This is how many vertical items we can display

&#9;--Layout all buttons in this setoh
&#9;if #Data.CurrentCategory &gt; Data.Main.InsertSets then
&#9;&#9;--Steal one for use by the layout buttons, when it rains it pours

&#9;&#9;--We can&apos;t fit all the buttons
&#9;&#9;local heightUsed = 0

&#9;&#9;local index = 1
&#9;&#9;if index &lt; setIndex then
&#9;&#9;&#9;heightUsed = height
&#9;&#9;&#9;Window.Main.PreviousSetButton.Visible = true
&#9;&#9;&#9;while index &lt; setIndex do
&#9;&#9;&#9;&#9;Data.CurrentCategory[index].Visible = false
&#9;&#9;&#9;&#9;index = index + 1
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Window.Main.PreviousSetButton.Visible = false
&#9;&#9;end

&#9;&#9;local offset = 0
&#9;&#9;while offset &lt; Data.Main.InsertSets and index + offset &lt;= #Data.CurrentCategory do
&#9;&#9;&#9;Data.CurrentCategory[index + offset].Size = UDim2.new(1.0, 0, 0.0, height*2)
&#9;&#9;&#9;Data.CurrentCategory[index + offset].Position = UDim2.new(0.0, 0, 0.0, height*2*offset + heightUsed)
&#9;&#9;&#9;Data.CurrentCategory[index + offset].Visible = true
&#9;&#9;&#9;offset = offset + 1
&#9;&#9;end
&#9;&#9;index = index + offset
&#9;&#9;heightUsed = heightUsed + Data.Main.InsertSets*height*2

&#9;&#9;if index &lt;= #Data.CurrentCategory then
&#9;&#9;&#9;Window.Main.NextSetButton.Position = UDim2.new(0.0, 0, 0.0, heightUsed)
&#9;&#9;&#9;Window.Main.NextSetButton.Size = UDim2.new(1.0, 0, 1.0, -heightUsed)
&#9;&#9;&#9;Window.Main.NextSetButton.Visible = true
&#9;&#9;&#9;while index &lt;=  #Data.CurrentCategory do
&#9;&#9;&#9;&#9;Data.CurrentCategory[index].Visible = false
&#9;&#9;&#9;&#9;index = index + 1
&#9;&#9;&#9;end&#9;&#9;
&#9;&#9;else
&#9;&#9;&#9;Window.Main.NextSetButton.Visible = false
&#9;&#9;end
&#9;else
&#9;&#9;Window.Main.PreviousSetButton.Visible = false
&#9;&#9;Window.Main.NextSetButton.Visible = false

&#9;&#9;for key, buttonFrame in pairs(Data.CurrentCategory) do
&#9;&#9;&#9;buttonFrame.Size = UDim2.new(1.0, 0, 0.0, height*2)
&#9;&#9;&#9;buttonFrame.Position = UDim2.new(0.0, 0, 0.0, height*2*(key-1))
&#9;&#9;&#9;buttonFrame.Visible = true
&#9;&#9;end

&#9;end
end

function selectCategoryPage(buttons, page)
&#9;if buttons ~= Data.CurrentCategory then&#9;&#9;
&#9;&#9;if Data.CurrentCategory then
&#9;&#9;&#9;for key, button in pairs(Data.CurrentCategory) do
&#9;&#9;&#9;&#9;button.Visible = false
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;Data.CurrentCategory = buttons&#9;&#9;
&#9;&#9;if Data.Category[Data.CurrentCategory] == nil then
&#9;&#9;&#9;Data.Category[Data.CurrentCategory] = {}
&#9;&#9;&#9;if #buttons &gt; 0 then
&#9;&#9;&#9;&#9;selectSet(buttons[1], buttons[1].SetName.Value, buttons[1].SetId.Value, 0)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;Data.Category[Data.CurrentCategory].Button = nil
&#9;&#9;&#9;selectSet(Data.Category[Data.CurrentCategory].ButtonFrame, Data.Category[Data.CurrentCategory].SetName, Data.Category[Data.CurrentCategory].SetId, Data.Category[Data.CurrentCategory].Index)
&#9;&#9;end
&#9;&#9;if Data.Main.FrameHeight then
&#9;&#9;&#9;if Data.Category[Data.CurrentCategory].SetIndex then
&#9;&#9;&#9;&#9;layoutSetButtons(Data.Main.FrameHeight, Data.Category[Data.CurrentCategory].SetIndex)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;layoutSetButtons(Data.Main.FrameHeight, 1)
&#9;&#9;&#9;end
&#9;&#9;end


&#9;end
end
function filterSet(set)
&#9;if soloGame then
&#9;&#9;return set
&#9;end

&#9;local result = {}
&#9;for pos, object in pairs(set) do
&#9;&#9;if object.IsTrusted then
&#9;&#9;&#9;result[#result+1] = object
&#9;&#9;end
&#9;end
&#9;return result
end
function selectSet(buttonFrame, setName, setId, setIndex)
&#9;if buttonFrame and Data.Category[Data.CurrentCategory] ~= nil then
&#9;&#9;if buttonFrame.Button ~= Data.Category[Data.CurrentCategory].Button or type(setId) ~= &quot;number&quot;  then
&#9;&#9;&#9;
&#9;&#9;&#9;Data.Category[Data.CurrentCategory].Button = buttonFrame.Button
&#9;&#9;
&#9;&#9;&#9;Data.Category[Data.CurrentCategory].Contents = setId

&#9;&#9;&#9;if type(setId) == &quot;number&quot; then
&#9;&#9;&#9;&#9;SetCache[setId] = filterSet(game:GetService(&quot;InsertService&quot;):GetCollection(setId))
&#9;&#9;&#9;&#9;Data.Category[Data.CurrentCategory].Contents = SetCache[setId]
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;Window.Main.Title.Text = setName
&#9;&#9;&#9;print(setName)

&#9;&#9;&#9;Data.Category[Data.CurrentCategory].SetName = setName
&#9;&#9;&#9;Data.Category[Data.CurrentCategory].SetId = setId
&#9;&#9;&#9;Data.Category[Data.CurrentCategory].ButtonFrame = buttonFrame
&#9;&#9;end

&#9;&#9;setSetIndex (setIndex)
&#9;end
end

function selectCategory(button, category)

&#9;selectCategoryPage(category, 0)

end

function processCategory(sets, setPanel)
&#9;local setButtons = {}
&#9;for index, object in pairs(sets) do
&#9;&#9;setButtons[index] = buildSetButton(object.Name, object.CategoryId, object.ImageAssetId, index, #sets)
&#9;&#9;setButtons[index].Parent = setPanel&#9;
&#9;end
&#9;return setButtons
end

function loadFreeSets(button,type,search)
&#9;
&#9;local stuff
&#9;if type == &quot;Models&quot; then
&#9;&#9;stuff = game:GetService(&quot;InsertService&quot;):GetFreeModels(search,freeIndex)
&#9;elseif type == &quot;Decals&quot; then
&#9;&#9;stuff = game:GetService(&quot;InsertService&quot;):GetFreeDecals(search,freeIndex)
&#9;end

&#9;for ndx,catinfo in ipairs( stuff ) do 
&#9;&#9;for k,v in pairs(catinfo) do 
&#9;&#9;&#9;if k == &quot;Results&quot; then
&#9;&#9;&#9;&#9;selectSet(button, button.Button.Text, v, 0)
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;end
&#9;&#9;end 
&#9;end

end

function createDropDownMenu(parent, Window)

&#9;local width = 1.1
&#9;local xPos = 0.055

&#9;local dropDownMenu = Instance.new(&quot;ImageButton&quot;)
&#9;dropDownMenu.Name = &quot;DropDownMenu&quot;
&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361347&quot;
&#9;dropDownMenu.BackgroundTransparency = 1
&#9;dropDownMenu.AutoButtonColor = false
&#9;dropDownMenu.Size = UDim2.new(width,0,0.06,0)
&#9;dropDownMenu.Position = UDim2.new(xPos,0,0.09,0)
&#9;dropDownMenu.Parent = parent
&#9;dropDownMenu.ZIndex = 2

&#9;local droppedDownMenu = Instance.new(&quot;ImageLabel&quot;)
&#9;droppedDownMenu.Name = &quot;List&quot;
&#9;droppedDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361705&quot;
&#9;droppedDownMenu.BackgroundTransparency = 1
&#9;droppedDownMenu.Visible = false
&#9;droppedDownMenu.Active = false
&#9;droppedDownMenu.Position = UDim2.new(xPos,0,0.085,0)
&#9;droppedDownMenu.Size = UDim2.new(width,0,1,0)
&#9;droppedDownMenu.Parent = dropDownMenu.Parent
&#9;droppedDownMenu.ZIndex = 3
&#9;
&#9;local titleFrame = Instance.new(&quot;TextLabel&quot;)
&#9;titleFrame.Name = &quot;Title&quot;
&#9;titleFrame.Position = UDim2.new(0.05, 0, 0, 0)
&#9;titleFrame.Size = UDim2.new(0.86, 0, 1, 0)
&#9;titleFrame.TextWrap = true
&#9;titleFrame.BackgroundColor3 = titleColor
&#9;titleFrame.TextColor3 = titleTextColor
&#9;titleFrame.BackgroundTransparency = 1
&#9;titleFrame.Text = &quot;Change me&quot;
&#9;titleFrame.ZIndex = 3
&#9;titleFrame.TextXAlignment = 0
&#9;titleFrame.Parent = dropDownMenu
&#9;Window.Main.Title = titleFrame

&#9;local textButton = Instance.new(&quot;TextButton&quot;)
&#9;textButton.Name = &quot;Button&quot;
&#9;textButton.BackgroundTransparency = 1
&#9;textButton.BorderSizePixel = 0
&#9;textButton.Text = &quot;Test&quot;
&#9;textButton.Size = UDim2.new(1,0,1,0)
&#9;textButton.TextXAlignment = 2
&#9;textButton.TextWrap = true
&#9;textButton.ZIndex = 5

&#9;local buttonFrame = Instance.new(&quot;ImageLabel&quot;)
&#9;buttonFrame.Image = &quot;http://www.roblox.com/asset/?id=36361705&quot;
&#9;buttonFrame.ZIndex = 4
&#9;buttonFrame.BackgroundTransparency = 1
&#9;
&#9;textButton.Parent = buttonFrame

&#9;local categories =  #Data.BaseCategoryButtons
&#9;local robloxMaxCat = categories
&#9;categories = categories + #Data.UserCategoryButtons

&#9;local spacing = 0.1
&#9;buttonFrame.Size = UDim2.new(0.9,0,(1 -  spacing)/(categories + 2),0) 


&#9;-- make sure buttons are big enough
&#9;local testButton = buttonFrame:clone()
&#9;testButton.Parent = droppedDownMenu

&#9;testButton:remove()
&#9;testButton = nil


&#9;
&#9;print(categories)
&#9;for i = 1, categories do
&#9;&#9;-- needed to maintain local scope for categories in event listeners below
&#9;&#9;local userCategory = masterCategory
&#9;&#9;local button = buttonFrame:clone()
&#9;&#9;button.Position = UDim2.new(0.05,0,(i - 1)/(categories + 2),0)
&#9;&#9;button.Parent = droppedDownMenu
&#9;&#9;if i &lt;= robloxMaxCat then
&#9;&#9;&#9;button.Button.Text = &quot;Roblox Set: &quot; .. tostring(Data.BaseCategoryButtons[i].SetName.Value)
&#9;&#9;else
&#9;&#9;&#9;button.Button.Text =  tostring(Data.UserCategoryButtons[userCategory].SetName.Value)
&#9;&#9;end


&#9;&#9;button.Button.MouseButton1Click:connect(function()
&#9;&#9;&#9;freeViewing = false
&#9;&#9;&#9;titleFrame.Text = button.Button.Text
&#9;&#9;&#9;parent.InsertTab.SearchFrame.Visible = false
&#9;&#9;&#9;if i &lt;= robloxMaxCat then
&#9;&#9;&#9;&#9;selectSet(button, button.Button.Text, Data.BaseCategoryButtons[i].SetId.Value, 0)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;selectSet(button, button.Button.Text, Data.UserCategoryButtons[userCategory].SetId.Value, 0)
&#9;&#9;&#9;end
&#9;&#9;&#9;dropDownSelected = not dropDownSelected
&#9;&#9;&#9;if not dropDownSelected then
&#9;&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361347&quot;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36701740&quot;
&#9;&#9;&#9;end
&#9;&#9;&#9;droppedDownMenu.Visible = not droppedDownMenu.Visible
&#9;&#9;&#9;droppedDownMenu.Active = not droppedDownMenu.Active
&#9;&#9;&#9;highlight = true
&#9;&#9;end)
&#9;&#9;if i &gt; robloxMaxCat then masterCategory = masterCategory + 1 end
&#9;end

&#9;freeModels = buttonFrame:clone()
&#9;freeModels.Position = UDim2.new(0.05,0,categories/(categories +2),0)
&#9;freeModels.Button.Text = &quot;Free Models&quot;
&#9;freeModels.Parent = droppedDownMenu
&#9;freeModels.Button.MouseButton1Click:connect(function()
&#9;&#9;freeViewing = true
&#9;&#9;viewingModels = true
&#9;&#9;freeIndex = 1
&#9;&#9;titleFrame.Text = freeModels.Button.Text
&#9;&#9;loadFreeSets(freeModels,&quot;Models&quot;,&quot;&quot;)
&#9;&#9;parent.InsertTab.SearchFrame.Visible = true
&#9;&#9;dropDownSelected = not dropDownSelected
&#9;&#9;if not dropDownSelected then
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361347&quot;
&#9;&#9;else
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36701740&quot;
&#9;&#9;end
&#9;&#9;droppedDownMenu.Visible = not droppedDownMenu.Visible
&#9;&#9;droppedDownMenu.Active = not droppedDownMenu.Active
&#9;&#9;highlight = true
&#9;end)

&#9;freeDecals = buttonFrame:clone()
&#9;freeDecals.Position = UDim2.new(0.05,0,(categories + 1)/(categories +2),0)
&#9;freeDecals.Button.Text = &quot;Free Decals&quot;
&#9;freeDecals.Parent = droppedDownMenu
&#9;freeDecals.Button.MouseButton1Click:connect(function()
&#9;&#9;freeViewing = true
&#9;&#9;viewingModels = false
&#9;&#9;freeIndex = 1
&#9;&#9;titleFrame.Text = freeDecals.Button.Text
&#9;&#9;loadFreeSets(freeDecals,&quot;Decals&quot;,&quot;&quot;)
&#9;&#9;parent.InsertTab.SearchFrame.Visible = true
&#9;&#9;dropDownSelected = not dropDownSelected
&#9;&#9;if not dropDownSelected then
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361347&quot;
&#9;&#9;else
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36701740&quot;
&#9;&#9;end

&#9;&#9;droppedDownMenu.Visible = not droppedDownMenu.Visible
&#9;&#9;droppedDownMenu.Active = not droppedDownMenu.Active
&#9;&#9;highlight = true
&#9;end)
&#9;

&#9;dropDownMenu.MouseButton1Click:connect(function()
&#9;&#9;Window.Main.RolloverText.Text = &quot;&quot;
&#9;&#9;dropDownSelected = not dropDownSelected
&#9;&#9;if not dropDownSelected then
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36361347&quot;
&#9;&#9;else
&#9;&#9;&#9;dropDownMenu.Image = &quot;http://www.roblox.com/asset/?id=36701740&quot;
&#9;&#9;end

&#9;&#9;droppedDownMenu.Visible = not droppedDownMenu.Visible
&#9;&#9;droppedDownMenu.Active = not droppedDownMenu.Active
&#9;&#9;highlight = false
&#9;end)

&#9;-- set first category as loaded for default
&#9;local buttons = droppedDownMenu:GetChildren()
&#9;selectSet(buttons[1], buttons[1].Button.Text, Data.BaseCategoryButtons[1].SetId.Value, 0)
&#9;selectCategory(buttons[1], Data.BaseCategoryButtons)
&#9;Window.Main.Title.Text = &quot;Roblox Set: &quot; ..  tostring(Data.BaseCategoryButtons[1].SetName.Value)

end

function buildMainGui(root, userId)
&#9;Window.Main = {}
&#9;Data.Main = {}
&#9;Data.Category = {}
&#9;
&#9;local mainFrame = Instance.new(&quot;Frame&quot;)
&#9;mainFrame.Name = &quot;InsertMainDialog&quot;
&#9;mainFrame.Position = UDim2.new(0.0, 0, 0, 0)
&#9;mainFrame.Size = UDim2.new(1, 0, 1, 0)
&#9;mainFrame.Transparency = 1.0
&#9;mainFrame.Active = true
&#9;mainFrame.Parent = root
&#9;Window.Main.Frame = mainFrame

&#9;local insertTab = Instance.new(&quot;Frame&quot;)
&#9;insertTab.Name = &quot;InsertTab&quot;
&#9;insertTab.Position = UDim2.new(0, 0, 0.0, 0)
&#9;insertTab.Size = UDim2.new(1, 0, 1.0, 0)
&#9;insertTab.BackgroundTransparency = 1.0
&#9;insertTab.Parent = mainFrame

&#9;local searchFrame = Instance.new(&quot;Frame&quot;)
&#9;searchFrame.Name = &quot;SearchFrame&quot;
&#9;searchFrame.Size = UDim2.new(1,0,0.1,0)
&#9;searchFrame.Position = UDim2.new(0.12,0,1.11,0)
&#9;searchFrame.BackgroundTransparency = 1
&#9;searchFrame.Visible = false
&#9;searchFrame.Parent = insertTab

&#9;local searchGraphicBox = Instance.new(&quot;ImageLabel&quot;)
&#9;searchGraphicBox.Image = &quot;http://www.roblox.com/asset/?id=36337274&quot;
&#9;searchGraphicBox.Name = &quot;SearchGraphicBox&quot;
&#9;searchGraphicBox.BackgroundTransparency = 1
&#9;searchGraphicBox.Size = UDim2.new(0.7,0,1,0)
&#9;searchGraphicBox.Parent = searchFrame

&#9;local searchBox = Instance.new(&quot;TextBox&quot;)
&#9;searchBox.Name = &quot;SearchBox&quot;
&#9;searchBox.Text = &quot;Enter Text Here&quot;
&#9;searchBox.TextWrap = true
&#9;searchBox.TextColor = BrickColor.White()
&#9;searchBox.BackgroundTransparency = 1
&#9;searchBox.Size = UDim2.new(1,0,1,0)
&#9;searchBox.Parent = searchGraphicBox

&#9;local searchButton = Instance.new(&quot;ImageButton&quot;)
&#9;searchButton.Name = &quot;SearchButton&quot;
&#9;searchButton.Image = &quot;http://www.roblox.com/asset/?id=37272267&quot;
&#9;searchButton.BackgroundTransparency = 1
&#9;searchButton.AutoButtonColor = false
&#9;searchButton.Size = UDim2.new(0.4,0,1,0)
&#9;searchButton.Position = UDim2.new(0.71,0,0)
&#9;searchButton.Parent = searchFrame

&#9;searchButton.MouseButton1Down:connect(function() 
&#9;&#9;currentSearchText = searchBox.Text
&#9;&#9;freeIndex = 1
&#9;&#9;if viewingModels then
&#9;&#9;&#9;loadFreeSets(freeModels,&quot;Models&quot;,searchBox.Text)
&#9;&#9;else
&#9;&#9;&#9;loadFreeSets(freeDecals,&quot;Decals&quot;,searchBox.Text)
&#9;&#9;end
&#9;end)

&#9;
&#9;Data.BaseCategoryButtons = processCategory(game:GetService(&quot;InsertService&quot;):GetBaseCategories(), setPanel)
&#9;local userData = game:GetService(&quot;InsertService&quot;):GetUserCategories(userId)
&#9;if userData then
&#9;&#9;Data.UserCategoryButtons = processCategory(userData, setPanel)
&#9;end

&#9;local insertPanel = Instance.new(&quot;ImageLabel&quot;)
&#9;insertPanel.Name = &quot;InsertPanel&quot;
&#9;insertPanel.Image = &quot;http://www.roblox.com/asset/?id=36337274&quot;
&#9;insertPanel.Position = UDim2.new(0.0, 0, 0.0, 0)
&#9;insertPanel.Size = UDim2.new(1.2, 0, 1.1, 0)
&#9;insertPanel.BackgroundTransparency = 1
&#9;insertPanel.Parent = insertTab

&#9;local insertButtons = {}
&#9;for y = 1, InsertRows do
&#9;&#9;for x = 1, InsertColumns do
&#9;&#9;&#9;insertButtons[x  + (y - 1) * InsertColumns] = buildInsertButton(UDim2.new(.3*(x-1) + 0.05, 0, 0.11*(y-1) + 0.15, 0), UDim2.new(.32, -4, .12, -4))
&#9;&#9;&#9;insertButtons[x  + (y - 1) * InsertColumns].Parent = insertPanel
&#9;&#9;end
&#9;end&#9;

&#9;Data.InsertButtons = insertButtons
&#9;Data.Main.InsertRows = InsertRows
&#9;Data.Main.InsertColumns = InsertColumns

&#9;local footerPanel = Instance.new(&quot;Frame&quot;)
&#9;footerPanel.Name = &quot;Footer&quot;
&#9;footerPanel.Size = UDim2.new(1.0, 0, 0.06, 0)
&#9;footerPanel.Position = UDim2.new(0.0, 0, 1.03, 0)
&#9;footerPanel.BackgroundTransparency = 1
&#9;footerPanel.BackgroundColor3 = frameColor
&#9;footerPanel.Parent = insertTab
&#9;
&#9;local rolloverText = Instance.new(&quot;TextLabel&quot;)
&#9;rolloverText.Name = &quot;RolloverText&quot;
&#9;rolloverText.Size = UDim2.new(0.8, 0, 1.0, 0)
&#9;rolloverText.Position = UDim2.new(0.2, 0, 0.0, 0)
&#9;rolloverText.TextColor = BrickColor.White()
&#9;rolloverText.BackgroundColor3 = frameColor
&#9;rolloverText.BackgroundTransparency = 1
&#9;rolloverText.Text = &quot;&quot;
&#9;rolloverText.TextWrap = true
&#9;rolloverTextXAlignment = 2
&#9;rolloverText.Parent = footerPanel
&#9;Window.Main.RolloverText = rolloverText

&#9;local previousButton = Instance.new(&quot;ImageButton&quot;)
&#9;previousButton.Image = &quot;http://www.roblox.com/asset/?id=36340011&quot;
&#9;previousButton.Name = &quot;PreviousPageButton&quot;
&#9;previousButton.Size = UDim2.new(0.1, 0, 1.0, 0)
&#9;previousButton.Position = UDim2.new(0.1, 0, 0.0, 0)
&#9;previousButton.BackgroundColor3 = buttonColor
&#9;previousButton.AutoButtonColor = false
&#9;previousButton.BackgroundTransparency = 1

&#9;previousButton.MouseButton1Click:connect(previousSetPage)
&#9;previousButton.Parent = footerPanel
&#9;previousButton.Visible = false
&#9;Window.Main.PreviousPageButton = previousButton

&#9;local nextButton = Instance.new(&quot;ImageButton&quot;)
&#9;nextButton.Image = &quot;http://www.roblox.com/asset/?id=36339978&quot;
&#9;nextButton.Name = &quot;NextPageButton&quot;
&#9;nextButton.Size = UDim2.new(0.1, 0, 1.0, 0)
&#9;nextButton.Position = UDim2.new(1, 0, 0.0, 0)
&#9;nextButton.AutoButtonColor = false
&#9;nextButton.BackgroundTransparency = 1

&#9;nextButton.MouseButton1Click:connect(nextSetPage)
&#9;nextButton.Parent = footerPanel
&#9;nextButton.Visible = false
&#9;Window.Main.NextPageButton = nextButton

&#9;createDropDownMenu(mainFrame, Window)

end

function layoutInsertButtons(guiMain)
&#9;local size = guiMain.AbsoluteSize
&#9;
&#9;local frameSize = 0.75 * size
&#9;local frameSizeUsed = Vector2.new(0, height*2)

&#9;--We want 15% or 100 pixels, which ever is smaller
&#9;if frameSize.x * .15 &lt; 100 then
&#9;&#9;local oldSize = Window.Main.Frame.SetTab.Size
&#9;&#9;Window.Main.Frame.SetTab.Size = UDim2.new(0.0, 100, oldSize.Y.Scale, oldSize.Y.Offset)
&#9;&#9;Window.Main.Frame.InsertTab.Position = UDim2.new(0.0, 100, 0.0, 0)
&#9;&#9;frameSizeUsed = Vector2.new(frameSizeUsed.x + 100, frameSizeUsed.y)
&#9;else
&#9;&#9;local oldSize = Window.Main.Frame.SetTab.Size
&#9;&#9;Window.Main.Frame.SetTab.Size = UDim2.new(0.15, 0, oldSize.Y.Scale, oldSize.Y.Offset)
&#9;&#9;Window.Main.Frame.InsertTab.Position = UDim2.new(0.15, 0, 0.0, 0)
&#9;&#9;frameSizeUsed = Vector2.new(frameSizeUsed.x + .15*frameSize.x, frameSizeUsed.y)
&#9;end

&#9;--Decide how many buttons we can fit, and what size to make the insert buttons
&#9;--2 sizes of insert buttons, 50x50 and 100x100

&#9;local buttonSize = 110
&#9;while buttonSize &gt; 70 and math.floor((frameSize - frameSizeUsed).x/buttonSize) * math.floor((frameSize - frameSizeUsed).y/buttonSize) &lt; 32 do
&#9;&#9;buttonSize = buttonSize - 10
&#9;end
&#9;
&#9;Data.Main.InsertColumns = math.min(math.max(1, math.floor((frameSize - frameSizeUsed).x/buttonSize)), InsertColumns)
&#9;Data.Main.InsertRows = math.min(math.max(1, math.floor((frameSize - frameSizeUsed).y/buttonSize)), InsertRows)
&#9;
&#9;for index, button in pairs(Data.InsertButtons) do
&#9;&#9;if index &lt;= Data.Main.InsertRows * Data.Main.InsertColumns then
&#9;&#9;&#9;button.Visible = true
&#9;&#9;&#9;button.Size = UDim2.new(0, buttonSize-4, 0, buttonSize-4)
&#9;&#9;&#9;button.Position = UDim2.new(0, buttonSize * ((index-1)%Data.Main.InsertColumns) + 2 + 2,
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;       0, buttonSize * math.floor((index-1)/Data.Main.InsertColumns) + 2 + 2)
&#9;&#9;else
&#9;&#9;&#9;button.Visible = false
&#9;&#9;end
&#9;end
&#9;Window.Main.Frame.InsertTab.Size = UDim2.new(0.0, buttonSize * Data.Main.InsertColumns + 4, 0.0, buttonSize * Data.Main.InsertRows + height*2 + 4)

&#9;if Data.Category[Data.CurrentCategory].Index == nil then
&#9;&#9;setSetIndex(0)
&#9;else
&#9;&#9;setSetIndex(Data.Category[Data.CurrentCategory].Index)
&#9;end
&#9;
&#9;local finalFrameHeight = frameSizeUsed.y + Data.Main.InsertRows*buttonSize + 4
&#9;Window.Main.Frame.Size = UDim2.new(0, frameSizeUsed.x + Data.Main.InsertColumns*buttonSize + 4, 0, finalFrameHeight)
&#9;Window.Main.Frame.Position = UDim2.new(0.0, 0, 1.0, -Window.Main.Frame.Size.Y.Offset)

&#9;if Data.Category[Data.CurrentCategory].SetIndex == nil then
&#9;&#9;layoutSetButtons(finalFrameHeight, 1)
&#9;else
&#9;&#9;layoutSetButtons(finalFrameHeight, Data.Category[Data.CurrentCategory].SetIndex)
&#9;end
end

function layoutSetButtons(frameHeight, setIndex)
&#9;Data.Main.FrameHeight = frameHeight
&#9;Data.Main.InsertSets = math.floor(frameHeight / (height*2))
&#9;if #Data.CurrentCategory &gt; Data.Main.InsertSets then
&#9;&#9;--Steal one entry since we have two many things
&#9;&#9;Data.Main.InsertSets = Data.Main.InsertSets - 1 
&#9;end

&#9;setCategoryIndex(setIndex)
end


function insertComplete()
&#9;Window.Loading.Frame.Visible = false
&#9;Window.Stamp.Frame.Visible = false
&#9;Window.Main.Frame.Visible = true
end

function UnlockInstances(object)
&#9;if object:IsA(&quot;BasePart&quot;) then
&#9;&#9;object.Locked = false
&#9;end
&#9;for index,child in pairs(object:GetChildren()) do
&#9;&#9;UnlockInstances(child)
&#9;end
end

function beginInsertDecal(decal)

&#9;Data.Stamp.DecalSelection = Instance.new(&quot;SurfaceSelection&quot;)
&#9;Data.Stamp.DecalSelection.Color = BrickColor.new(&quot;Bright orange&quot;)
&#9;Data.Stamp.DecalSelection.archivable = false
&#9;Data.Stamp.DecalSelection.Parent = getPlayer().PlayerGui
&#9;
&#9;--Save the decal in our Lua code for later use
&#9;Data.Stamp.Decal = decal
&#9;Data.Stamp.Decal.Parent = nil
end

function moveLoadingWindow()
&#9;local speed = 0.005
&#9;while Window.Loading.Frame.Visible do
&#9;&#9;while Window.Loading.Frame.Visible and Window.Loading.Frame.Position.Y.Scale &lt; (1 - Window.Loading.Frame.Size.Y.Scale) do
&#9;&#9;&#9;Window.Loading.Frame.Position = UDim2.new(Window.Loading.Frame.Position.X.Scale,Window.Loading.Frame.Position.X.Offset,Window.Loading.Frame.Position.Y.Scale + speed,Window.Loading.Frame.Position.Y.Offset)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;while Window.Loading.Frame.Visible and Window.Loading.Frame.Position.Y.Scale &gt; 0 do
&#9;&#9;&#9;Window.Loading.Frame.Position = UDim2.new(Window.Loading.Frame.Position.X.Scale,Window.Loading.Frame.Position.X.Offset,Window.Loading.Frame.Position.Y.Scale - speed,Window.Loading.Frame.Position.Y.Offset)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;end
end

function resetLoadingWindow()
&#9;Window.Loading.Frame.Visible = false
&#9;Window.Loading.Frame.Position = UDim2.new(0,0,0,0)
end

function beginInsertAsset(assetName, assetId, image, stampMode)
&#9;--Copy over details into dialog window
&#9;Window.Loading.AssetThumbLabel.Image = image
&#9;Window.Loading.AssetNameLabel.Text = assetName
&#9;
&#9;Window.Stamp.AssetThumbLabel.Image = image
&#9;Window.Stamp.AssetNameLabel.Text = assetName
&#9;Data.Stamp.StampMode = stampMode

&#9;--Hide the main window
&#9;Window.Main.Frame.Visible = false
&#9;--Show the dialog window
&#9;local mover = coroutine.create(moveLoadingWindow)
&#9;Window.Loading.Frame.Visible = true
&#9;coroutine.resume(mover)
&#9;Data.Loading.Cancelled = false

&#9;--This call will cause a &quot;wait&quot; until the data comes back
&#9;local id = math.random(5,500)
&#9;local root
&#9;local loader
&#9;loading = true
&#9;if useAssetVersionId then
&#9;&#9;loader = coroutine.create(function()&#9;
&#9;&#9;&#9;root = game:GetService(&quot;InsertService&quot;):LoadAssetVersion(assetId)
&#9;&#9;&#9;loading = false
&#9;&#9;end)
&#9;&#9;coroutine.resume(loader)
&#9;else
&#9;&#9;loader = coroutine.create(function()&#9;
&#9;&#9;&#9;root = game:GetService(&quot;InsertService&quot;):LoadAsset(assetId)
&#9;&#9;&#9;loading = false
&#9;&#9;end)
&#9;&#9;coroutine.resume(loader)
&#9;end
&#9;local count = 0
&#9;while loading and count &lt; 5 do
&#9;&#9;count = count + 1
&#9;&#9;wait(2)
&#9;end
&#9;loading = false

&#9;if Data.Loading.Cancelled or count &gt;=5 then

&#9;&#9;if root then
&#9;&#9;&#9;root:Remove()
&#9;&#9;end
&#9;&#9;Window.Loading.Frame.Visible = false
&#9;&#9;Window.Main.Frame.Visible = true
&#9;&#9;return

&#9;else&#9;&#9;
&#9;&#9;local instances = root:GetChildren()
&#9;&#9;if #instances == 0 then
&#9;&#9;&#9;root:Remove()
&#9;&#9;&#9;insertComplete()
&#9;&#9;&#9;return
&#9;&#9;end

&#9;&#9;--Unlock all parts that are inserted, to make sure they are editable
&#9;&#9;UnlockInstances(root)

&#9;&#9;--Continue the insert process
&#9;&#9;root.Name = &quot;InsertedObject&quot; .. assetId

&#9;&#9;--Examine the contents and decide what it looks like
&#9;&#9;for pos, instance in pairs(instances) do
&#9;&#9;&#9;--Single instance objects might be treated special, decals/skyboxes
&#9;&#9;&#9;if instance:IsA(&quot;Decal&quot;) then
&#9;&#9;&#9;&#9;--Current system here stops after finding one Decal (and gives you Decal tool)
&#9;&#9;&#9;&#9;--We should do the same (probably)
&#9;&#9;&#9;&#9;beginInsertDecal(instance)
&#9;&#9;&#9;&#9;root:Remove()
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;Window.Stamp.Frame.Visible = true
&#9;&#9;&#9;&#9;Window.Loading.Frame.Visible = false
&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;elseif instance:IsA(&quot;Team&quot;) then
&#9;&#9;&#9;&#9;instance.Parent = game:GetService(&quot;Teams&quot;)
&#9;&#9;&#9;elseif instance:IsA(&quot;SpawnLocation&quot;) then
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;elseif instance:IsA(&quot;HopperBin&quot;) then
&#9;&#9;&#9;&#9;instance.Parent = getPlayer().Backpack
&#9;&#9;&#9;elseif instance:IsA(&quot;Tool&quot;) then
&#9;&#9;&#9;&#9;-- nothing
&#9;&#9;&#9;elseif instance:IsA(&quot;Sky&quot;) then
&#9;&#9;&#9;&#9;local lightingService = game:GetService(&quot;Lighting&quot;)
&#9;&#9;&#9;&#9;for index,child in pairs(lightingService:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if child:IsA(&quot;Sky&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;child:Remove();
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;instance.Parent = lightingService
&#9;&#9;&#9;elseif instance:IsA(&quot;Script&quot;) then
&#9;&#9;&#9;&#9;instance.Parent = game.Workspace
&#9;&#9;&#9;elseif instance:IsA(&quot;LocalScript&quot;) then
&#9;&#9;&#9;&#9;instance.Parent = getPlayer()
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;if #root:GetChildren() == 0 then
&#9;&#9;&#9;root:Remove()
&#9;&#9;&#9;insertComplete()
&#9;&#9;&#9;return
&#9;&#9;end

&#9;&#9;resetLoadingWindow()

&#9;&#9;Window.Stamp.Frame.Visible = true
&#9;&#9;Data.Stamp.Model = root
&#9;end
end

function cancelAssetLoad()
&#9;Data.Loading.Cancelled = true
&#9;insertComplete()
end

function buildLoadingDialogGui(root)
&#9;Window.Loading = {}
&#9;Data.Loading = {}

&#9;local dialogFrame = Instance.new(&quot;ImageLabel&quot;)
&#9;dialogFrame.Image = &quot;http://www.roblox.com/asset/?id=36269485&quot;
&#9;dialogFrame.Name = &quot;InsertLoadingDialog&quot;
&#9;dialogFrame.Size = UDim2.new(1.6, 0, 0.3, 0)
&#9;dialogFrame.Position = UDim2.new(0.0, 0, 0, 0)
&#9;dialogFrame.BackgroundTransparency = 1
&#9;dialogFrame.Active = true
&#9;dialogFrame.Parent = root
&#9;dialogFrame.Visible = false
&#9;Window.Loading.Frame = dialogFrame

&#9;local assetBacking = Instance.new(&quot;ImageLabel&quot;)
&#9;assetBacking.Image = &quot;http://www.roblox.com/asset/?id=36426105&quot;
&#9;assetBacking.BackgroundTransparency = 1
&#9;assetBacking.ZIndex = 1
&#9;assetBacking.Size = UDim2.new(1,0,1,0)

&#9;local assetThumb = Instance.new(&quot;ImageLabel&quot;)
&#9;assetThumb.Position = UDim2.new(0.0, 2, 0.0, 2)
&#9;assetThumb.Size = UDim2.new(0.5, -4, 1.0, -4)
&#9;assetThumb.Parent = dialogFrame
&#9;assetThumb.BackgroundTransparency = 1
&#9;assetThumb.ZIndex = 2
&#9;Window.Loading.AssetThumbLabel = assetThumb
&#9;assetBacking.Parent = assetThumb

&#9;local descriptionFrame = Instance.new(&quot;Frame&quot;)
&#9;descriptionFrame.Name = &quot;Description&quot;
&#9;descriptionFrame.Size = UDim2.new(0.5, 0, 1.0, 0)
&#9;descriptionFrame.Position = UDim2.new(0.5, 0, 0.0, 0)
&#9;descriptionFrame.Transparency = 1
&#9;descriptionFrame.Parent = dialogFrame

&#9;local label = Instance.new(&quot;TextLabel&quot;)
&#9;label.Text = &quot;Loading...&quot;
&#9;label.FontSize = 2
&#9;label.Position = UDim2.new(0.5, 0, 0, 0);
&#9;label.Size = UDim2.new(0.0, 0, 0.0, height)
&#9;label.BorderSizePixel = 0
&#9;label.TextColor3 = frameTextColor
&#9;label.Parent = descriptionFrame
&#9;
&#9;local assetLabel = Instance.new(&quot;TextLabel&quot;)
&#9;assetLabel.Text = &quot;Your Asset Here&quot;
&#9;assetLabel.Position = UDim2.new(0.0, 0, 0.0, height)
&#9;assetLabel.Size = UDim2.new(1.0, 0, 1.0, -2*height)
&#9;assetLabel.BorderSizePixel = 0
&#9;assetLabel.BackgroundTransparency = 1.0
&#9;assetLabel.Parent = descriptionFrame
&#9;assetLabel.TextColor3 = frameTextColor
&#9;assetLabel.TextWrap = true
&#9;Window.Loading.AssetNameLabel = assetLabel&#9;

&#9;local cancelButton = Instance.new(&quot;TextButton&quot;)
&#9;cancelButton.Name = &quot;PreviousPageButton&quot;
&#9;cancelButton.Size = UDim2.new(1, 0, 0.180000007, 0)
&#9;cancelButton.Position = UDim2.new(-0.0500000007, 0, 0.699999988, 0)
&#9;cancelButton.BackgroundColor3 = Color3.new(1,0.2,0.2)
&#9;cancelButton.TextColor = BrickColor.White()
&#9;cancelButton.Text = &quot;Cancel&quot;
&#9;cancelButton.MouseButton1Click:connect(cancelAssetLoad)
&#9;cancelButton.Parent = descriptionFrame

end



function cancelAssetPlacement()
&#9;Data.Stamp.Cancelled = true
&#9;Data.Stamp.Dragger = nil
&#9;if Data.Stamp.Model then
&#9;&#9;Data.Stamp.Model:Remove()
&#9;&#9;Data.Stamp.Model = nil
&#9;end
&#9;if Data.Stamp.CurrentParts then
&#9;&#9;for index, object in pairs(Data.Stamp.CurrentParts) do
&#9;&#9;&#9;object:Remove()
&#9;&#9;end
&#9;&#9;Data.Stamp.CurrentParts = nil
&#9;end

&#9;if Data.Stamp.DecalSelection then
&#9;&#9;Data.Stamp.DecalSelection:Remove()
&#9;&#9;Data.Stamp.DecalSelection = nil
&#9;end
&#9;if Data.Stamp.Decal then
&#9;&#9;Data.Stamp.Decal:Remove()
&#9;&#9;Data.Stamp.Decal = nil
&#9;end

&#9;if Mouse then
&#9;&#9;Mouse.Icon =&quot;rbxasset://textures\\ArrowCursor.png&quot;
&#9;end&#9;
&#9;insertComplete()
end

function onInsertKeyDown(key)
&#9;if Data.Stamp.Dragger then
&#9;&#9;if key == &apos;R&apos; or key == &apos;r&apos;  then
&#9;&#9;&#9;Data.Stamp.Dragger:AxisRotate(Enum.Axis.Y)
&#9;&#9;elseif key == &apos;T&apos; or key == &apos;t&apos; then
&#9;&#9;&#9;Data.Stamp.Dragger:AxisRotate(Enum.Axis.Z)
&#9;&#9;end
&#9;end
end


function canSelectObject(part)
&#9;return part and not (part.Locked) and part:IsA(&quot;BasePart&quot;) and (part.Position - Tool.Parent.Head.Position).Magnitude &lt; 60
end

function setSelectionSurface(part, surface) 
&#9;if Data.Stamp.DecalSelection.Adornee == part and Data.Stamp.DecalSelection.TargetSurface == surface then
&#9;&#9;return
&#9;end
&#9;unsetSelectionSurface()
&#9;Data.Stamp.DecalSelection.Adornee = part
&#9;Data.Stamp.DecalSelection.TargetSurface = surface

&#9;local decalFound = false
&#9;for index,child in pairs(part:GetChildren()) do
&#9;&#9;if child:IsA(&quot;Decal&quot;) and child.Face == surface then
&#9;&#9;&#9;decalFound = true
&#9;&#9;&#9;break
&#9;&#9;end
&#9;end

&#9;if not(decalFound) then
&#9;&#9;Data.Stamp.Decal.Parent = part
&#9;&#9;Data.Stamp.Decal.Face = surface
&#9;end
end

function unsetSelectionSurface() 
&#9;Data.Stamp.DecalSelection.Adornee = nil
&#9;Data.Stamp.Decal.Parent = nil
end

function onInsertMouseMove() 
&#9;if Data.Stamp.MovingLock then
&#9;&#9;return
&#9;end

&#9;local newCursor = &quot;rbxasset://textures\\ArrowCursor.png&quot;
&#9;Data.Stamp.MovingLock = true
&#9;if Data.Stamp.Decal then
&#9;&#9;local part = Mouse.Target
&#9;&#9;if canSelectObject(part) then
&#9;&#9;&#9;setSelectionSurface(part, Mouse.TargetSurface)
&#9;&#9;else
&#9;&#9;&#9;unsetSelectionSurface()
&#9;&#9;&#9;newCursor = BaseUrl .. &quot;asset?id=20715642&quot;
&#9;&#9;end
&#9;elseif Data.Stamp.Dragger == nil then
&#9;&#9;if Data.Stamp.Model ~= nil then
&#9;&#9;&#9;Mouse.Icon =&quot;rbxasset://textures//GrabRotateCursor.png&quot;
&#9;&#9;&#9;setupDraggableClone()
&#9;&#9;end
&#9;else
&#9;&#9;Data.Stamp.Dragger:MouseMove(Mouse.UnitRay)
&#9;end
&#9;Mouse.Icon = newCursor

&#9;Data.Stamp.MovingLock = false
end

function onInsertMouseButton1Down()
&#9;if Data.Stamp.Dragger or Data.Stamp.Decal then
&#9;&#9;Data.Stamp.MouseDown = true
&#9;end
end

function onInsertMouseButton1Up()
&#9;if Data.Stamp.MouseDown then
&#9;&#9;Data.Stamp.MouseDown = false
&#9;&#9;if Data.Stamp.Decal then
&#9;&#9;&#9;local part = Mouse.Target
&#9;&#9;&#9;if canSelectObject(part) and Instance.Lock(part) then
&#9;&#9;&#9;&#9;local surface = Mouse.TargetSurface 
&#9;&#9;&#9;&#9;for index,child in pairs(part:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if child:IsA(&quot;Decal&quot;) and child.Face == surface then
&#9;&#9;&#9;&#9;&#9;&#9;child:Remove()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;local newDecal  = Data.Stamp.Decal:Clone()
&#9;&#9;&#9;&#9;newDecal.Face = surface
&#9;&#9;&#9;&#9;newDecal.Parent = part
&#9;&#9;&#9;&#9;&#9;Instance.Unlock(part)
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;if Data.Stamp.StampMode then
&#9;&#9;&#9;&#9;else 
&#9;&#9;&#9;&#9;&#9;Instance.Unlock(part)
&#9;&#9;&#9;&#9;&#9;cancelAssetPlacement()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif Data.Stamp.Dragger then
&#9;&#9;&#9;--Place the object where the mouse is currently positioned
&#9;&#9;&#9;Data.Stamp.Dragger:MouseUp()
&#9;&#9;
&#9;&#9;&#9;--Fix the transparency of all the parts
&#9;&#9;&#9;for part, transparency in pairs(Data.Stamp.TransparencyTable) do
&#9;&#9;&#9;&#9;part.Transparency = transparency
&#9;&#9;&#9;end
&#9;&#9;&#9;Data.Stamp.TransparencyTable = nil

&#9;&#9;&#9;--Re-enable the scripts
&#9;&#9;&#9;for index,script in pairs(Data.Stamp.DisabledScripts) do
&#9;&#9;&#9;&#9;script.Disabled = false
&#9;&#9;&#9;end
&#9;&#9;&#9;--Now that they are all marked enabled, reinsert them into the world so they start running
&#9;&#9;&#9;for index,script in pairs(Data.Stamp.DisabledScripts) do
&#9;&#9;&#9;&#9;local oldParent = script.Parent
&#9;&#9;&#9;&#9;script.Parent = nil
&#9;&#9;&#9;&#9;script:Clone().Parent = oldParent
&#9;&#9;&#9;end
&#9;&#9;&#9;Data.Stamp.DisabledScripts = nil

&#9;&#9;&#9;Data.Stamp.Dragger = nil
&#9;&#9;&#9;Data.Stamp.CurrentParts = nil
&#9;&#9;&#9;
&#9;&#9;&#9;if Data.Stamp.StampMode then
&#9;&#9;&#9;&#9;--Now set up a new instance of the object to allow a second copy to be stamped down
&#9;&#9;&#9;&#9;setupDraggableClone()
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;cancelAssetPlacement()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

function setupDraggableClone()
&#9;local clone = Data.Stamp.Model:Clone()
&#9;local scripts = {}
&#9;local parts = {}

&#9;collectParts(clone, parts, scripts)

&#9;if #parts &gt; 0 then
&#9;&#9;Data.Stamp.DisabledScripts = {}
&#9;&#9;Data.Stamp.TransparencyTable = {}

&#9;&#9;for index,script in pairs(scripts) do
&#9;&#9;&#9;if not(script.Disabled) then
&#9;&#9;&#9;&#9;script.Disabled = true
&#9;&#9;&#9;&#9;Data.Stamp.DisabledScripts[#Data.Stamp.DisabledScripts +1] = script
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for index, part in pairs(parts) do
&#9;&#9;&#9;Data.Stamp.TransparencyTable[part] = part.Transparency
&#9;&#9;&#9;part.Transparency = 0.5
&#9;&#9;end

&#9;&#9;game:GetService(&quot;InsertService&quot;):Insert(clone)
&#9;&#9;
&#9;&#9;Data.Stamp.CurrentParts = clone:GetChildren();
&#9;&#9;for index, object in pairs(Data.Stamp.CurrentParts) do
&#9;&#9;&#9;object.Parent = clone.Parent
&#9;&#9;end
&#9;&#9;clone:Remove();
&#9;&#9;
&#9;&#9;Data.Stamp.Dragger = Instance.new(&quot;Dragger&quot;)
&#9;&#9;--Begin a movement by faking a MouseDown signal
&#9;&#9;Data.Stamp.Dragger:MouseDown(parts[1], Vector3.new(0,0,0), parts)
&#9;&#9;Data.Stamp.Dragger:MouseMove(Mouse.UnitRay)
&#9;else
&#9;&#9;--Nothing draggable in the Model
&#9;&#9;Data.Stamp.Model:Remove()
&#9;&#9;Data.Stamp.Model = nil
&#9;&#9;Data.Stamp.TransparencyTable = nil
&#9;&#9;Data.Stamp.DisabledScripts = nil
&#9;end
end

function collectParts(object, baseParts, scripts)
&#9;if object:IsA(&quot;BasePart&quot;) then
&#9;&#9;baseParts[#baseParts+1] = object
&#9;elseif object:IsA(&quot;Script&quot;) then
&#9;&#9;scripts[#scripts+1] = object
&#9;end

&#9;for index,child in pairs(object:GetChildren()) do
&#9;&#9;collectParts(child, baseParts, scripts)
&#9;end
end

function buildStampDialogGui(root)

&#9;Window.Stamp = {}
&#9;Data.Stamp = {}

&#9;local dialogFrame = Instance.new(&quot;ImageLabel&quot;)
&#9;dialogFrame.Image = &quot;http://www.roblox.com/asset/?id=36269485&quot;
&#9;dialogFrame.Name = &quot;InsertStampDialog&quot;
&#9;dialogFrame.Size = UDim2.new(1.6, 0, 0.3, 0)
&#9;dialogFrame.Position = UDim2.new(0.0, 0, 0.7, 0)
&#9;dialogFrame.BackgroundTransparency = 1
&#9;dialogFrame.Active = true
&#9;dialogFrame.Parent = root
&#9;dialogFrame.Visible = false
&#9;Window.Stamp.Frame = dialogFrame

&#9;local assetBacking = Instance.new(&quot;ImageLabel&quot;)
&#9;assetBacking.Image = &quot;http://www.roblox.com/asset/?id=36426105&quot;
&#9;assetBacking.BackgroundTransparency = 1
&#9;assetBacking.ZIndex = 1
&#9;assetBacking.Size = UDim2.new(1,0,1,0)

&#9;local assetThumb = Instance.new(&quot;ImageLabel&quot;)
&#9;assetThumb.Position = UDim2.new(0.0, 2, 0.0, 2)
&#9;assetThumb.Size = UDim2.new(0.5, -4, 1.0, -4)
&#9;assetThumb.Parent = dialogFrame
&#9;assetThumb.BackgroundTransparency = 1
&#9;assetThumb.ZIndex = 2
&#9;Window.Stamp.AssetThumbLabel = assetThumb

&#9;assetBacking.Parent = assetThumb

&#9;local descriptionFrame = Instance.new(&quot;Frame&quot;)
&#9;descriptionFrame.Name = &quot;Description&quot;
&#9;descriptionFrame.Size = UDim2.new(0.5, 0, 1.0, 0)
&#9;descriptionFrame.Position = UDim2.new(0.5, 0, 0.0, 0)
&#9;descriptionFrame.Transparency = 1
&#9;descriptionFrame.Parent = dialogFrame

&#9;local assetLabel = Instance.new(&quot;TextLabel&quot;)
&#9;assetLabel.Text = &quot;Your Asset Here&quot;
&#9;assetLabel.Position = UDim2.new(-0.05, 0, 0.25, 0)
&#9;assetLabel.Size = UDim2.new(1.0, 0, 0.4, 0)
&#9;assetLabel.BorderSizePixel = 0
&#9;assetLabel.BackgroundTransparency = 1.0
&#9;assetLabel.Parent = descriptionFrame
&#9;assetLabel.TextColor3 = frameTextColor
&#9;assetLabel.TextWrap = true
&#9;Window.Stamp.AssetNameLabel = assetLabel

&#9;local readyFrame = Instance.new(&quot;Frame&quot;)
&#9;readyFrame.Name = &quot;ReadyDialogue&quot;
&#9;readyFrame.Size = UDim2.new(0.47, 0, 0.2, 0)
&#9;readyFrame.Position = UDim2.new(0.5, 0, 0.05, 0)
&#9;readyFrame.Transparency = 1
&#9;readyFrame.Parent = dialogFrame

&#9;local label = Instance.new(&quot;TextLabel&quot;)
&#9;label.Text = &quot;Ready to Place&quot;
&#9;label.FontSize = 2
&#9;label.TextWrap = true
&#9;label.Size = UDim2.new(1, 0, 1, 0)
&#9;label.BackgroundTransparency = 1
&#9;label.TextColor = BrickColor.White()
&#9;label.Parent = readyFrame

&#9;local cancelButton = Instance.new(&quot;TextButton&quot;)
&#9;cancelButton.Name = &quot;CancelButton&quot;
&#9;cancelButton.Size = UDim2.new(1, 0, 0.180000007, 0)
&#9;cancelButton.Position = UDim2.new(-0.0500000007, 0, 0.699999988, 0)
&#9;cancelButton.BackgroundColor3 = Color3.new(1,0.1,0.1)
&#9;cancelButton.TextColor = BrickColor.White()
&#9;cancelButton.TextWrap = true
&#9;cancelButton.Text = &quot;Back to Toolbox&quot;
&#9;cancelButton.MouseButton1Click:connect(cancelAssetPlacement)
&#9;cancelButton.Parent = descriptionFrame

&#9;Data.Stamp.MovingLock = false&#9;
end

function buildInitialLoadScreen(root)
&#9;local dialogFrame = Instance.new(&quot;Frame&quot;)
&#9;dialogFrame.Name = &quot;InsertLoadingScreen&quot;
&#9;dialogFrame.Size = UDim2.new(0.0, height*10, 0, height*5)
&#9;dialogFrame.Position = UDim2.new(0.5, -height*5, 0.5, -height*2.5)
&#9;dialogFrame.BackgroundColor3 = frameColor
&#9;dialogFrame.Active = true
&#9;dialogFrame.Visible = true
&#9;dialogFrame.Parent = root

&#9;local label = Instance.new(&quot;TextLabel&quot;)
&#9;label.Text = &quot;Loading&quot;
&#9;label.Position = UDim2.new(0.0, 0, 0, 0)
&#9;label.Size = UDim2.new(1.0, 0, 0.0, height)
&#9;label.BorderSizePixel = 1
&#9;label.TextColor3 = titleTextColor
&#9;label.BackgroundColor3 = titleColor
&#9;label.Parent = dialogFrame
&#9;
&#9;local assetLabel = Instance.new(&quot;TextLabel&quot;)
&#9;assetLabel.Text = &quot;Please Wait&quot;
&#9;assetLabel.Position = UDim2.new(0.0, 0, 0.0, height)
&#9;assetLabel.Size = UDim2.new(1.0, 0, 1.0, -2*height)
&#9;assetLabel.BorderSizePixel = 1
&#9;assetLabel.BackgroundTransparency = 1.0
&#9;assetLabel.TextColor3 = frameTextColor
&#9;assetLabel.TextWrap = true
&#9;assetLabel.Parent = dialogFrame
end

function buildMinimizedGui(root)
&#9;Window.Minimized = {}
&#9;Data.Minimized = {}
&#9;local minimizeButton = Instance.new(&quot;TextButton&quot;)
&#9;minimizeButton.Name = &quot;MinimizeButton&quot;
&#9;minimizeButton.Size = UDim2.new(0, height*4.5, 0, height)
&#9;minimizeButton.Position = UDim2.new(0.0, 0, 1.0, -height)
&#9;minimizeButton.BackgroundColor3 = buttonColor
&#9;minimizeButton.TextColor3 = buttonTextColor
&#9;minimizeButton.Text = &quot;Toolbox&quot;
&#9;minimizeButton.MouseButton1Click:connect(function() Window.Minimized.Frame.Visible = false Window.Main.Frame.Visible = true end)
&#9;minimizeButton.Visible = false
&#9;minimizeButton.Parent = root

&#9;Window.Minimized.Frame = minimizeButton
end


local CancelDuringLoad
local LoadScreen 
function onEquippedLocal(mouse)
&#9;Mouse = mouse
&#9;if Tool.SavedState.Value and Tool.PlayerOwner.Value == getPlayer() and Data and Data.FullyLoaded then
&#9;&#9;guiMain = Tool.SavedState.Value
&#9;&#9;guiMain.Parent = insertGui

&#9;&#9;Window.Stamp.Frame.Visible = false
&#9;&#9;Window.Loading.Frame.Visible = false
&#9;&#9;Window.Main.Frame.Visible = true

&#9;else
&#9;&#9;CancelDuringLoad = false

&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36269485&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36426105&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36361347&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36361705&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36701740&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36337274&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=37272267&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36337274&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36340011&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=36339978&quot;)
&#9;&#9;game:GetService(&quot;ContentProvider&quot;):Preload(&quot;http://www.roblox.com/asset/?id=20715642&quot;)

&#9;&#9;insertGui = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;insertGui.Name = &quot;InsertGui&quot;

&#9;&#9;guiMain = Instance.new(&quot;Frame&quot;)
&#9;&#9;guiMain.Size = UDim2.new(0,150,0,400)
&#9;&#9;guiMain.Position = UDim2.new(0,0,1,-550)
&#9;&#9;guiMain.BackgroundTransparency = 1
&#9;&#9;guiMain.Name = &quot;InsertToolboxMain&quot;

&#9;&#9;Window = {}
&#9;&#9;Data = {}
&#9;&#9;Data.FullyLoaded = false

&#9;&#9;buildMainGui(guiMain, getPlayer().userId)
&#9;&#9;buildLoadingDialogGui(guiMain)
&#9;&#9;buildStampDialogGui(guiMain)

&#9;&#9;if not(CancelDuringLoad) then
&#9;&#9;&#9;insertGui.Parent = game.Players.LocalPlayer:FindFirstChild(&quot;PlayerGui&quot;)
&#9;&#9;&#9;guiMain.Parent = insertGui

&#9;&#9;&#9;Tool.SavedState.Value = guiMain
&#9;&#9;&#9;Tool.PlayerOwner.Value = getPlayer()
&#9;&#9;end

&#9;&#9;Data.FullyLoaded = true
&#9;end

&#9;Mouse.Move:connect(onInsertMouseMove)
&#9;Mouse.Button1Down:connect(onInsertMouseButton1Down)
&#9;Mouse.Button1Up:connect(onInsertMouseButton1Up)
&#9;Mouse.KeyDown:connect(onInsertKeyDown)

end

function onUnequippedLocal()
&#9;Mouse:remove()

&#9;guiMain.Parent = nil

&#9;pcall(function()
&#9;&#9;cancelAssetPlacement()
&#9;&#9;cancelAssetLoad()
&#9;&#9;guiMain.Parent = nil
&#9;&#9;end)
&#9;
&#9;CancelDuringLoad = true

&#9;if LoadScreen then
&#9;&#9;LoadScreen:Remove()
&#9;end
end

function onAncestryChanged(child,parent)

&#9;if Tool.PlayerOwner.Value and not Tool:IsDescendantOf(Tool.PlayerOwner.Value) and not Tool:IsDescendantOf(Tool.PlayerOwner.Value.Character) then
&#9;&#9;--Tool was dropped in some way, so we need to nuke our external state
&#9;&#9;Tool.SavedState.Value = nil
&#9;&#9;Tool.PlayerOwner.Value = nil
&#9;end
&#9;
&#9;pcall(cancelAssetPlacement)
&#9;pcall(cancelAssetLoad)
end


Tool.Selected:connect(onEquippedLocal)
Tool.Deselected:connect(onUnequippedLocal)
Tool.AncestryChanged:connect(onAncestryChanged)</ProtectedString>
							</Properties>
						</Item>
						<Item class="ObjectValue" referent="RBX559">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">PlayerOwner</string>
								<Ref name="Value">null</Ref>
							</Properties>
						</Item>
						<Item class="ObjectValue" referent="RBX560">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">SavedState</string>
								<Ref name="Value">null</Ref>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX561">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Motor</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX562">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">MotorLocal</string>
								<ProtectedString name="Source">-- i would improve this, but i dont know how...

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Color = BrickColor.new(&quot;Really red&quot;)
selectionBox.Visible = true

selectionLasso = Instance.new(&quot;SelectionPartLasso&quot;)
selectionLasso.Color = BrickColor.Black()
selectionLasso.Humanoid = game.Players.LocalPlayer.Character.Humanoid


isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


bin = script.Parent
selected = nil
speed = 0.5
gui = script.Parent.MotorGui

function onMouseMoved(target)
&#9;if not BuildPermission(target) then return end
&#9;if target ~= nil then
&#9;&#9;if target.Locked == false then
&#9;&#9;&#9;selectionBox.Adornee = target
&#9;&#9;&#9;selectionBox.Color = BrickColor.Green()
&#9;&#9;&#9;selectionLasso.Part = target
&#9;&#9;else
&#9;&#9;&#9;selectionBox.Adornee = nil
&#9;&#9;&#9;selectionLasso.Part = nil
&#9;&#9;end
&#9;else
&#9;&#9;selectionBox.Adornee = nil
&#9;&#9;selectionLasso.Part = nil
&#9;end
end

function onButton1Down(mouse)
&#9;if not BuildPermission(mouse.Target) then return end
&#9;t = mouse.Target
&#9;if t == nil then return end
&#9;if t.Locked then return end
&#9;t.TopSurfaceInput = &quot;Constant&quot;
&#9;t.TopParamB = speed
&#9;t.TopParamA = speed - speed
end
function c1()
&#9;speed = speed + 0.1
&#9;txt.Text = speed
end
function c2()
&#9;speed = speed - 0.1
&#9;txt.Text = speed
end
function creategui()
&#9;guic = gui:clone()
&#9;guic.Parent = game.Players.LocalPlayer.PlayerGui
&#9;txt = guic.Frame.Speed
&#9;u = guic.Frame.Up
&#9;d = guic.Frame.Down
&#9;u.MouseButton1Click:connect(c1)
&#9;d.MouseButton1Click:connect(c2)
end
function removegui()
&#9;selectionBox.Parent = nil
&#9;selectionLasso.Parent = nil
&#9;guic:remove()
&#9;speed = 0
end
function onSelected(mouse)
&#9;selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
&#9;selectionLasso.Parent = game.Players.LocalPlayer.PlayerGui
&#9;creategui()
&#9;mouse.Move:connect(function() onMouseMoved(mouse.Target) end)
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end)
end

bin.Selected:connect(onSelected)
bin.Deselected:connect(removegui)</ProtectedString>
							</Properties>
						</Item>
						<Item class="ScreenGui" referent="RBX563">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">MotorGui</string>
							</Properties>
							<Item class="Frame" referent="RBX564">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">Frame</string>
									<UDim2 name="Position">
										<XS>0.5</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>-26</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextButton" referent="RBX565">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4291965696</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Down</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>101</XO>
											<YS>0</YS>
											<YO>15</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>26</XO>
											<YS>0</YS>
											<YO>13</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">\/</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX566">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4291965696</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Up</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>101</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>26</XO>
											<YS>0</YS>
											<YO>13</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">/\</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="TextLabel" referent="RBX567">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4278190080</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<string name="Name">Speed</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>100</XO>
											<YS>0</YS>
											<YO>26</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">0.5</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX568">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">HopperBin</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX569">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ParachuteLocal</string>
								<ProtectedString name="Source">Bin = script.Parent
bv = script.BV:Clone()
player = game.Players.LocalPlayer

Bin.Selected:connect(function() bv.Parent = player.Character.Torso end) 
Bin.Deselected:connect(function() bv.Parent = nil end)</ProtectedString>
							</Properties>
							<Item class="BodyVelocity" referent="RBX570">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">BV</string>
									<float name="P">1250</float>
									<Vector3 name="maxForce">
										<X>0</X>
										<Y>99999</Y>
										<Z>0</Z>
									</Vector3>
									<Vector3 name="velocity">
										<X>0</X>
										<Y>-10</Y>
										<Z>0</Z>
									</Vector3>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX571">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">VehicleBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX572">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;VehicleSeat&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX573">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Weld</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="ScreenGui" referent="RBX574">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">WeldGui</string>
							</Properties>
							<Item class="ImageLabel" referent="RBX575">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=53285947</url></Content>
									<string name="Name">Frame</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>250</XO>
										<YS>0</YS>
										<YO>150</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>200</XO>
										<YS>0</YS>
										<YO>200</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextLabel" referent="RBX576">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">8</token>
										<string name="Name">Label</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>100</XO>
											<YS>0</YS>
											<YO>100</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">...</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="ImageLabel" referent="RBX577">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><url>http://www.roblox.com/asset/?id=43708919</url></Content>
										<string name="Name">a</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>50</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="ImageLabel" referent="RBX578">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><url>http://www.roblox.com/asset/?id=43708993</url></Content>
										<string name="Name">b</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>50</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
							<Item class="ImageLabel" referent="RBX579">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4288914085</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=53285947</url></Content>
									<string name="Name">Frame1</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>500</XO>
										<YS>0</YS>
										<YO>150</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>200</XO>
										<YS>0</YS>
										<YO>200</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextLabel" referent="RBX580">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<token name="Font">2</token>
										<token name="FontSize">8</token>
										<string name="Name">Label</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>100</XO>
											<YS>0</YS>
											<YO>100</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<string name="Text">...</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="ImageLabel" referent="RBX581">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><url>http://www.roblox.com/asset/?id=43708919</url></Content>
										<string name="Name">a</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>50</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
								<Item class="ImageLabel" referent="RBX582">
									<Properties>
										<bool name="Active">false</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4288914085</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">0</int>
										<bool name="Draggable">false</bool>
										<Content name="Image"><url>http://www.roblox.com/asset/?id=43708993</url></Content>
										<string name="Name">b</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>50</XO>
											<YS>0</YS>
											<YO>50</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX583">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">WeldLocal</string>
								<ProtectedString name="Source">isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


local bin = script.Parent
local part0,part1 = nil
local part1 = nil
local partval = true
local play = game.Players.LocalPlayer

function weld(x,y)
&#9;local W = Instance.new(&quot;Weld&quot;)
&#9;W.Part0 = x
&#9;W.Part1 = y
&#9;local CJ = CFrame.new(x.Position)
&#9;local C0 = x.CFrame:inverse()*CJ
&#9;local C1 = y.CFrame:inverse()*CJ
&#9;W.C0 = C0
&#9;W.C1 = C1
&#9;W.Parent = x
end

function bdown(mouse)
&#9;if not BuildPermission(mouse.Target) then return end
&#9;targ = mouse.Target
&#9;if targ:IsA(&quot;BasePart&quot;) then 
&#9;&#9;if partval then
&#9;&#9;&#9;part0 = targ
&#9;&#9;&#9;gui.Frame.Label.Text=part0.Name
&#9;&#9;&#9;p1s = Instance.new(&quot;SelectionBox&quot;,targ)
&#9;&#9;&#9;p1s.Adornee = targ
&#9;&#9;else
&#9;&#9;&#9;part1 = m.Target
&#9;&#9;&#9;gui.Frame1.Label.Text=part1.Name
&#9;&#9;&#9;p2s = Instance.new(&quot;SelectionBox&quot;,targ)
&#9;&#9;&#9;p2s.Adornee = targ
&#9;&#9;end
&#9;end
end

function keydown(key)
&#9;if key == &quot;q&quot; then
&#9;&#9;partval = false
&#9;&#9;gui.Frame.a.Visible=true
&#9;&#9;gui.Frame.b.Visible=false
&#9;&#9;gui.Frame1.a.Visible=false
&#9;&#9;gui.Frame1.b.Visible=true
&#9;end
&#9;if key == &quot;e&quot; then
&#9;&#9;partval = true
&#9;&#9;gui.Frame.a.Visible=false
&#9;&#9;gui.Frame.b.Visible=true
&#9;&#9;gui.Frame1.a.Visible=true
&#9;&#9;gui.Frame1.b.Visible=false
&#9;end
&#9;if key == &quot;r&quot; then
&#9;&#9;pcall(function()p1s:remove()end)
&#9;&#9;pcall(function()p2s:remove()end)
&#9;&#9;pcall(function()part0 = nil end)
&#9;&#9;pcall(function()part1 = nil end)
&#9;&#9;pcall(function()gui.Frame.Label.Text = &quot;nil&quot; end)
&#9;&#9;pcall(function()gui.Frame1.Label.Text = &quot;nil&quot; end)
&#9;end
&#9;if key == &quot;g&quot; then
&#9;&#9;if part0 and part1 then
&#9;&#9;&#9;weld(part0,part1)
&#9;&#9;end
&#9;end
&#9;if key == &quot;t&quot; and partval == false then
&#9;&#9;part0 = play.Character.Torso
&#9;&#9;gui.Frame.Label.Text = part0.Name
&#9;&#9;p1s = Instance.new(&quot;SelectionBox&quot;,play.Character.Torso)
&#9;&#9;b1s.Adornee = play.Character.Torso
&#9;else 
&#9;&#9;part1 = play.Character.Torso
&#9;&#9;gui.Frame1.Label.Text = part1.Name
&#9;&#9;p2s = Instance.new(&quot;SelectionBox&quot;,play.Character.Torso)
&#9;&#9;p2s.Adornee = play.Character.Torso
&#9;end
end

function hSelect(mouse)
&#9;mouse.Icon = &quot;rbxasset://textures/WeldCursor.png&quot;
&#9;gui = bin.WeldGui:clone()
&#9;gui.Parent = play.PlayerGui
&#9;m.Button1Down:connect(function()bdown(mouse)end)
&#9;m.KeyDown:connect(keydown)
end

bin.Deselected:connect(function()pcall(function()gui:remove()end)end)
bin.Selected:connect(hSelect)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX584">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Spawner</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="Model" referent="RBX585">
							<Properties>
								<bool name="Archivable">true</bool>
								<CoordinateFrame name="ModelInPrimary">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<string name="Name">Model</string>
								<Ref name="PrimaryPart">null</Ref>
							</Properties>
							<Item class="Geometry" referent="RBX586">
								<Properties>
									<bool name="Archivable">true</bool>
									<string name="Name">OHAI</string>
								</Properties>
								<Item class="Model" referent="RBX587">
									<Properties>
										<bool name="Archivable">true</bool>
										<CoordinateFrame name="ModelInPrimary">
											<X>0</X>
											<Y>0</Y>
											<Z>0</Z>
											<R00>1</R00>
											<R01>0</R01>
											<R02>0</R02>
											<R10>0</R10>
											<R11>1</R11>
											<R12>0</R12>
											<R20>0</R20>
											<R21>0</R21>
											<R22>1</R22>
										</CoordinateFrame>
										<string name="Name">Controls</string>
										<Ref name="PrimaryPart">null</Ref>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX588">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ModelSpawnerLocal</string>
								<ProtectedString name="Source">orignmodel = bin.Model
bin = script.Parent
model = orignmodel:clone()
orignmodel:remove()


bin.Selected:connect(function(m) m.Button1Down:connect(function() local model2 = model:clone() model2.Parent = game.Workspace model2:MakeJoints() model2:MoveTo(m.Hit.p) end) end)</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX589">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Brick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX590">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;Part&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX591">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Explorer</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX592">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ExplorerLocal</string>
								<ProtectedString name="Source">gui = script.Parent.ExplorerGui:clone()

function onEquippedLocal(mouse)
&#9;player = game.Players.LocalPlayer
&#9;gui.Parent = player.PlayerGui
end

function onUnS()
&#9;gui.Parent = script.Parent
end

script.Parent.Selected:connect(onEquippedLocal)
script.Parent.Deselected:connect(onUnS)
</ProtectedString>
							</Properties>
						</Item>
						<Item class="ScreenGui" referent="RBX593">
							<Properties>
								<bool name="Archivable">true</bool>
								<string name="Name">ExplorerGui</string>
							</Properties>
							<Item class="Frame" referent="RBX594">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4292927712</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">RightBar</string>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">3</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBX595">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<string name="Name">Explorer</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>10</XO>
											<YS>0</YS>
											<YO>10</YO>
										</UDim2>
										<UDim2 name="Size">
											<XS>0.5</XS>
											<XO>-20</XO>
											<YS>0.5</YS>
											<YO>-20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">0</token>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Frame" referent="RBX596">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4289111464</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<string name="Name">Area</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>-20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextButton" referent="RBX597">
											<Properties>
												<bool name="Active">true</bool>
												<bool name="Archivable">true</bool>
												<bool name="AutoButtonColor">true</bool>
												<Color3 name="BackgroundColor3">4294967295</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">4279970357</Color3>
												<int name="BorderSizePixel">0</int>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<token name="FontSize">0</token>
												<bool name="Modal">false</bool>
												<string name="Name">Default</string>
												<UDim2 name="Position">
													<XS>0.100000001</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="Selected">false</bool>
												<UDim2 name="Size">
													<XS>0.899999976</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>20</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<token name="Style">2</token>
												<string name="Text">Error :(</string>
												<Color3 name="TextColor3">4294901760</Color3>
												<float name="TextTransparency">0</float>
												<bool name="TextWrap">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="ImageButton" referent="RBX598">
												<Properties>
													<bool name="Active">true</bool>
													<bool name="Archivable">true</bool>
													<bool name="AutoButtonColor">true</bool>
													<Color3 name="BackgroundColor3">4289177257</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">4279970357</Color3>
													<int name="BorderSizePixel">1</int>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxasset://textures/RecordIndicator.png</url></Content>
													<bool name="Modal">false</bool>
													<string name="Name">Icon</string>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>-4</YO>
													</UDim2>
													<bool name="Selected">false</bool>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>16</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<token name="Style">0</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="ObjectValue" referent="RBX599">
												<Properties>
													<bool name="Archivable">true</bool>
													<string name="Name">Item</string>
													<Ref name="Value">null</Ref>
												</Properties>
											</Item>
											<Item class="LocalScript" referent="RBX600">
												<Properties>
													<bool name="Archivable">true</bool>
													<bool name="Disabled">false</bool>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">LocalScript</string>
													<ProtectedString name="Source">button = script.Parent
area = button.Parent
selected = area.Selected
box = area.SelectionBox
surface = area.Parent.SurfaceSelection

item = button.Item.Value

icons = {
&#9;{&quot;http://wiki.roblox.com/images/b/b7/Workspace_icon.png&quot;,{&quot;Workspace&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/8/8c/Players_icon.png&quot;,{&quot;Players&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/5/57/Lighting_icon.png&quot;,{&quot;Lighting&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/5/5f/Object_Icon.png&quot;,{&quot;StarterGui&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/6/68/Starterpack_icon.png&quot;,{&quot;StarterPack&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/9/94/Debris_icon.png&quot;,{&quot;Debris&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/c/c6/Sound_icon.png&quot;,{&quot;SoundService&quot;}},

&#9;{&quot;http://wiki.roblox.com/images/b/bc/Part_icon.png&quot;,{&quot;BasePart&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/f/f2/BodyForce_icon.png&quot;,{&quot;BodyForce&quot;,&quot;BodyGyro&quot;,&quot;BodyVelocity&quot;,&quot;BodyThrust&quot;,&quot;BodyAngularVelocity&quot;,&quot;RocketPropulsion&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/5/50/Explosion_icon.png&quot;,{&quot;Explosion&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/c/cf/Localscript_icon.png&quot;,{&quot;LocalScript&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/a/ac/Script_icon.png&quot;,{&quot;Script&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/0/0e/Camera_icon.png&quot;,{&quot;Camera&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/c/ce/Message_icon.png&quot;,{&quot;Message&quot;,&quot;Hint&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/f/f0/Forcefield_icon.png&quot;,{&quot;ForceField&quot;,&quot;TouchTransmitter&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/4/49/Mesh_icon.png&quot;,{&quot;SpecialMesh&quot;,&quot;BlockMesh&quot;,&quot;CylinderMesh&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/0/0f/Weld_icon.png&quot;,{&quot;Weld&quot;,&quot;Glue&quot;,&quot;RotateP&quot;,&quot;Rotate&quot;,&quot;DynamicRotate&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/e/e1/Model_icon.png&quot;,{&quot;Model&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/8/8e/Networkclient_icon.png&quot;,{&quot;NetworkServer&quot;,&quot;NetworkClient&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/7/7a/Humanoid_icon.png&quot;,{&quot;Humanoid&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/c/cd/Hopperbin_icon.png&quot;,{&quot;HopperBin&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/f/fa/Tool_icon.png&quot;,{&quot;Tool&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/f/fd/Value_icon.png&quot;,{&quot;NumberValue&quot;,&quot;IntValue&quot;,&quot;Vector3Value&quot;,&quot;Color3Value&quot;,&quot;BrickColorValue&quot;,&quot;ObjectValue&quot;,&quot;StringValue&quot;,&quot;BoolValue&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/3/35/Fireicon.jpg&quot;,{&quot;Fire&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/a/aa/Animation_icon.png&quot;,{&quot;Animation&quot;,&quot;Keyframe&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/7/7e/Sparkles_icon.png&quot;,{&quot;Sparkles&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/6/67/Screengui_icon.png&quot;,{&quot;BillboardGui&quot;,&quot;GuiMain&quot;,&quot;ScreenGui&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/d/dd/Frame_icon.png&quot;,{&quot;Frame&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/6/63/Textbutton_icon.png&quot;,{&quot;TextButton&quot;,&quot;TextBox&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/0/06/Textlabel_icon.png&quot;,{&quot;TextLabel&quot;}},
&#9;{&quot;http://wiki.roblox.com/images/1/19/Imagebutton_icon.png&quot;,{&quot;ImageLabel&quot;,&quot;ImageButton&quot;}}
}

function getIcon(i)
&#9;local a = icons
&#9;local b
&#9;for b = 1, #a do
&#9;&#9;local c = a[b][2]
&#9;&#9;local d
&#9;&#9;for d = 1, #c do
&#9;&#9;&#9;if (i:IsA(c[d])) then
&#9;&#9;&#9;&#9;return a[b][1]
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return &quot;http://wiki.roblox.com/images/1/13/Object_blank_Icon.png&quot;
end

while item == nil do
&#9;wait()
end

button.Icon.Image = getIcon(item)
button.Text = item.Name
button.Name = &quot;Button&quot;
script.Parent.TextColor3 = Color3.new(0,0,0)

clicked = false

function onClick()
&#9;button.BackgroundColor3 = Color3.new(0.9,1,1)
&#9;selected.Value = button
&#9;if (item:IsA(&quot;BasePart&quot;) or item.className == &quot;Model&quot;) then
&#9;&#9;box.Adornee = item
&#9;else
&#9;&#9;box.Adornee = nil
&#9;end
&#9;if (item.className == &quot;Decal&quot; and item.Parent:IsA(&quot;BasePart&quot;)) then
&#9;&#9;surface.Adornee = item.Parent
&#9;&#9;surface.TargetSurface = item.Face
&#9;else
&#9;&#9;surface.Adornee = nil
&#9;end
&#9;if (clicked) then
&#9;&#9;area.Parent.Directory.Value = item
&#9;end
&#9;clicked = true
&#9;wait(0.3)
&#9;clicked = false
end

function onChanged()
&#9;if (selected.Value ~= button) then
&#9;&#9;button.BackgroundColor3 = Color3.new(1,1,1)
&#9;end
end

button.MouseButton1Click:connect(onClick)
selected.Changed:connect(onChanged)
</ProtectedString>
												</Properties>
											</Item>
										</Item>
										<Item class="ObjectValue" referent="RBX601">
											<Properties>
												<bool name="Archivable">true</bool>
												<string name="Name">Selected</string>
												<Ref name="Value">null</Ref>
											</Properties>
										</Item>
										<Item class="SelectionBox" referent="RBX602">
											<Properties>
												<Ref name="Adornee">null</Ref>
												<bool name="Archivable">true</bool>
												<int name="Color">23</int>
												<string name="Name">SelectionBox</string>
												<float name="Transparency">0</float>
												<bool name="Visible">true</bool>
											</Properties>
										</Item>
									</Item>
									<Item class="TextLabel" referent="RBX603">
										<Properties>
											<bool name="Active">false</bool>
											<bool name="Archivable">true</bool>
											<Color3 name="BackgroundColor3">4288532735</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">0</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<string name="Name">Text</string>
											<UDim2 name="Position">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<UDim2 name="Size">
												<XS>0.25</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<string name="Text">Explorer</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="ObjectValue" referent="RBX604">
										<Properties>
											<bool name="Archivable">true</bool>
											<string name="Name">Directory</string>
											<Ref name="Value">null</Ref>
										</Properties>
									</Item>
									<Item class="SurfaceSelection" referent="RBX605">
										<Properties>
											<Ref name="Adornee">null</Ref>
											<bool name="Archivable">true</bool>
											<int name="Color">133</int>
											<string name="Name">SurfaceSelection</string>
											<token name="TargetSurface">0</token>
											<float name="Transparency">0</float>
											<bool name="Visible">true</bool>
										</Properties>
									</Item>
									<Item class="TextButton" referent="RBX606">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4288914085</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<bool name="Modal">false</bool>
											<string name="Name">Clear</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<bool name="Selected">true</bool>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>40</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">2</token>
											<string name="Text">Clear</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="TextButton" referent="RBX607">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4288914085</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<bool name="Modal">false</bool>
											<string name="Name">Delete</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">true</bool>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>40</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">2</token>
											<string name="Text">Delete</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="TextButton" referent="RBX608">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4288914085</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<bool name="Modal">false</bool>
											<string name="Name">Insert</string>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>40</YO>
											</UDim2>
											<bool name="Selected">true</bool>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>40</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">2</token>
											<string name="Text">Insert</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
									<Item class="TextButton" referent="RBX609">
										<Properties>
											<bool name="Active">true</bool>
											<bool name="Archivable">true</bool>
											<bool name="AutoButtonColor">true</bool>
											<Color3 name="BackgroundColor3">4288914085</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">4279970357</Color3>
											<int name="BorderSizePixel">1</int>
											<bool name="Draggable">false</bool>
											<token name="Font">0</token>
											<token name="FontSize">0</token>
											<bool name="Modal">false</bool>
											<string name="Name">UpOneDir</string>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="Selected">true</bool>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>40</XO>
												<YS>0</YS>
												<YO>20</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<token name="Style">2</token>
											<string name="Text">Up</string>
											<Color3 name="TextColor3">4294967295</Color3>
											<float name="TextTransparency">0</float>
											<bool name="TextWrap">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="TextBox" referent="RBX610">
								<Properties>
									<bool name="Active">true</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="ClearTextOnFocus">true</bool>
									<bool name="Draggable">false</bool>
									<token name="Font">0</token>
									<token name="FontSize">9</token>
									<bool name="MultiLine">false</bool>
									<string name="Name">PermissionIssue</string>
									<UDim2 name="Position">
										<XS>0.5</XS>
										<XO>-200</XO>
										<YS>0.5</YS>
										<YO>-50</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>400</XO>
										<YS>0</YS>
										<YO>100</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<string name="Text">Error</string>
									<Color3 name="TextColor3">4294901760</Color3>
									<float name="TextTransparency">0</float>
									<bool name="TextWrap">false</bool>
									<token name="TextXAlignment">2</token>
									<token name="TextYAlignment">1</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">10</int>
								</Properties>
							</Item>
							<Item class="Model" referent="RBX611">
								<Properties>
									<bool name="Archivable">true</bool>
									<CoordinateFrame name="ModelInPrimary">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
										<R00>1</R00>
										<R01>0</R01>
										<R02>0</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>0</R20>
										<R21>0</R21>
										<R22>1</R22>
									</CoordinateFrame>
									<string name="Name">CreatableClasses</string>
									<Ref name="PrimaryPart">null</Ref>
								</Properties>
								<Item class="StringValue" referent="RBX612">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Accoutrement</string>
										<string name="Value">Accoutrement</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX613">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Animation</string>
										<string name="Value">Animation</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX614">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ArcHandles</string>
										<string name="Value">ArcHandles</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX615">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Backpack</string>
										<string name="Value">Backpack</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX616">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BillboardGui</string>
										<string name="Value">BillboardGui</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX617">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BlockMesh</string>
										<string name="Value">BlockMesh</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX618">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyAngularVelocity</string>
										<string name="Value">BodyAngularVelocity</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX619">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyColors</string>
										<string name="Value">BodyColors</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX620">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyForce</string>
										<string name="Value">BodyForce</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX621">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyGyro</string>
										<string name="Value">BodyGyro</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX622">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyPosition</string>
										<string name="Value">BodyPosition</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX623">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyThrust</string>
										<string name="Value">BodyThrust</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX624">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BodyVelocity</string>
										<string name="Value">BodyVelocity</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX625">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BoolValue</string>
										<string name="Value">BoolValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX626">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">BrickColorValue</string>
										<string name="Value">BrickColorValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX627">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">CFrameValue</string>
										<string name="Value">CFrameValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX628">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Camera</string>
										<string name="Value">Camera</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX629">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ChangeHistoryService</string>
										<string name="Value">ChangeHistoryService</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX630">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">CharacterMesh</string>
										<string name="Value">CharacterMesh</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX631">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ClickDetector</string>
										<string name="Value">ClickDetector</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX632">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Color3Value</string>
										<string name="Value">Color3Value</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX633">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Configuration</string>
										<string name="Value">Configuration</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX634">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">CylinderMesh</string>
										<string name="Value">CylinderMesh</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX635">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Debris</string>
										<string name="Value">Debris</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX636">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Decal</string>
										<string name="Value">Decal</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX637">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Explosion</string>
										<string name="Value">Explosion</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX638">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">FileMesh</string>
										<string name="Value">FileMesh</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX639">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Fire</string>
										<string name="Value">Fire</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX640">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Flag</string>
										<string name="Value">Flag</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX641">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">FlagStand</string>
										<string name="Value">FlagStand</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX642">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ForceField</string>
										<string name="Value">ForceField</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX643">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Frame</string>
										<string name="Value">Frame</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX644">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Glue</string>
										<string name="Value">Glue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX645">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">GuiMain</string>
										<string name="Value">GuiMain</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX646">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Handles</string>
										<string name="Value">Handles</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX647">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Hat</string>
										<string name="Value">Hat</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX648">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Hint</string>
										<string name="Value">Hint</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX649">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Hole</string>
										<string name="Value">Hole</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX650">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Hopper</string>
										<string name="Value">Hopper</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX651">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">HopperBin</string>
										<string name="Value">HopperBin</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX652">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Humanoid</string>
										<string name="Value">Humanoid</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX653">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ImageButton</string>
										<string name="Value">ImageButton</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX654">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ImageLabel</string>
										<string name="Value">ImageLabel</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX655">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">IntValue</string>
										<string name="Value">IntValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX656">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Lighting</string>
										<string name="Value">Lighting</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX657">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">LocalBackpack</string>
										<string name="Value">LocalBackpack</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX658">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">LocalScript</string>
										<string name="Value">LocalScript</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX659">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Message</string>
										<string name="Value">Message</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX660">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Model</string>
										<string name="Value">Model</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX661">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Motor</string>
										<string name="Value">Motor</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX662">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">MotorFeature</string>
										<string name="Value">MotorFeature</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX663">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">NumberValue</string>
										<string name="Value">NumberValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX664">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ObjectValue</string>
										<string name="Value">ObjectValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX665">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Pants</string>
										<string name="Value">Pants</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX666">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Part</string>
										<string name="Value">Part</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX667">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">PlayerGui</string>
										<string name="Value">PlayerGui</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX668">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">RocketPropulsion</string>
										<string name="Value">RocketPropulsion</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX669">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">RotateP</string>
										<string name="Value">RotateP</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX670">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">RotateV</string>
										<string name="Value">RotateV</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX671">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ScreenGui</string>
										<string name="Value">ScreenGui</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX672">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Script</string>
										<string name="Value">Script</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX673">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ScriptContext</string>
										<string name="Value">ScriptContext</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX674">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Seat</string>
										<string name="Value">Seat</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX675">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Selection</string>
										<string name="Value">Selection</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX676">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SelectionBox</string>
										<string name="Value">SelectionBox</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX677">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SelectionPartLasso</string>
										<string name="Value">SelectionPartLasso</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX678">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SelectionPointLasso</string>
										<string name="Value">SelectionPointLasso</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX679">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Shirt</string>
										<string name="Value">Shirt</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX680">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">ShirtGraphic</string>
										<string name="Value">ShirtGraphic</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX681">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SkateboardPlatform</string>
										<string name="Value">SkateboardPlatform</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX682">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Skin</string>
										<string name="Value">Skin</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX683">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Sky</string>
										<string name="Value">Sky</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX684">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Smoke</string>
										<string name="Value">Smoke</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX685">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Snap</string>
										<string name="Value">Snap</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX686">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Sound</string>
										<string name="Value">Sound</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX687">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SoundService</string>
										<string name="Value">SoundService</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX688">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Sparkles</string>
										<string name="Value">Sparkles</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX689">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SpawnLocation</string>
										<string name="Value">SpawnLocation</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX690">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SpecialMesh</string>
										<string name="Value">SpecialMesh</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX691">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">StarterGear</string>
										<string name="Value">StarterGear</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX692">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">StarterGui</string>
										<string name="Value">StarterGui</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX693">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">StarterPack</string>
										<string name="Value">StarterPack</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX694">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">StockSound</string>
										<string name="Value">StockSound</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX695">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">StringValue</string>
										<string name="Value">StringValue</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX696">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">SurfaceSelection</string>
										<string name="Value">SurfaceSelection</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX697">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Team</string>
										<string name="Value">Team</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX698">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Teams</string>
										<string name="Value">Teams</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX699">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">TextBox</string>
										<string name="Value">TextBox</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX700">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">TextButton</string>
										<string name="Value">TextButton</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX701">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">TextLabel</string>
										<string name="Value">TextLabel</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX702">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Texture</string>
										<string name="Value">Texture</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX703">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Tool</string>
										<string name="Value">Tool</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX704">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">TouchTransmitter</string>
										<string name="Value">TouchTransmitter</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX705">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">TrussPart</string>
										<string name="Value">TrussPart</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX706">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Vector3Value</string>
										<string name="Value">Vector3Value</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX707">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">VehicleSeat</string>
										<string name="Value">VehicleSeat</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX708">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">VelocityMotor</string>
										<string name="Value">VelocityMotor</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX709">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Visit</string>
										<string name="Value">Visit</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX710">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">WedgePart</string>
										<string name="Value">WedgePart</string>
									</Properties>
								</Item>
								<Item class="StringValue" referent="RBX711">
									<Properties>
										<bool name="Archivable">true</bool>
										<string name="Name">Weld</string>
										<string name="Value">Weld</string>
									</Properties>
								</Item>
							</Item>
							<Item class="Frame" referent="RBX712">
								<Properties>
									<bool name="Active">false</bool>
									<bool name="Archivable">true</bool>
									<Color3 name="BackgroundColor3">4289111464</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="Draggable">false</bool>
									<string name="Name">Classes</string>
									<UDim2 name="Position">
										<XS>0.25</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<UDim2 name="Size">
										<XS>0.5</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">3</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="TextButton" referent="RBX713">
									<Properties>
										<bool name="Active">true</bool>
										<bool name="Archivable">true</bool>
										<bool name="AutoButtonColor">true</bool>
										<Color3 name="BackgroundColor3">4294967295</Color3>
										<float name="BackgroundTransparency">0</float>
										<Color3 name="BorderColor3">4279970357</Color3>
										<int name="BorderSizePixel">1</int>
										<bool name="Draggable">false</bool>
										<token name="Font">0</token>
										<token name="FontSize">0</token>
										<bool name="Modal">false</bool>
										<string name="Name">Default</string>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="Selected">false</bool>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>120</XO>
											<YS>0</YS>
											<YO>20</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<token name="Style">2</token>
										<string name="Text">Default</string>
										<Color3 name="TextColor3">4294967295</Color3>
										<float name="TextTransparency">0</float>
										<bool name="TextWrap">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<bool name="Visible">false</bool>
										<int name="ZIndex">1</int>
									</Properties>
								</Item>
							</Item>
							<Item class="LocalScript" referent="RBX714">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">ClassesControler</string>
									<ProtectedString name="Source">function onClickClasses(name)
&#9;h = Instance.new(name)
&#9;h.Parent = directory.Value
&#9;button.Parent.Visible = false
end



directory = script.Parent.RightBar.Explorer.Directory
a = script.Parent.CreatableClasses:children()
c = 0
d = 0
for b = 1, #a do
&#9;e = script.Parent.Classes.Default:clone()
&#9;e.Position = UDim2.new(0,d*120,0,c*20)
&#9;e.Name = a[b].Name
&#9;e.Text = a[b].Name
&#9;e.Visible = true
&#9;e.Parent = script.Parent.Classes
&#9;c = c + 1
&#9;if (c == 30) then
&#9;&#9;c = 0
&#9;&#9;d = d + 1
&#9;end
&#9;a[b].MouseButton1Click:connect(function()onClickClasses(a[b].Name)end)
end
</ProtectedString>
								</Properties>
							</Item>
							<Item class="LocalScript" referent="RBX715">
								<Properties>
									<bool name="Archivable">true</bool>
									<bool name="Disabled">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">ExplorerControler</string>
									<ProtectedString name="Source">maingui = script.Parent
prnt = maingui.RightBar.Explorer
area = prnt.Area
selected = area.Selected
box = area.SelectionBox
default = area.Default
permissionerror = maingui.PermissionIssue
dirval = prnt.Directory
classesgui = maingui.Classes
button = prnt.UpOneDir
button2 = prnt.Clear
button3 = prnt.Delete
button4 = prnt.Insert
debounce = false



dir = workspace
function clearArea()
&#9;local a = area:children()
&#9;local b = 0
&#9;for b = 1, #a do
&#9;&#9;if (a[b] ~= default and a[b] ~= selected and a[b] ~= box) then
&#9;&#9;&#9;a[b]:remove()
&#9;&#9;end
&#9;end
end

function list(dir)
&#9;if (dir == nil) then
&#9;&#9;list(workspace)
&#9;&#9;return
&#9;end
&#9;local a = dir:children()
&#9;local b = 0
&#9;for b = 1, #a do
&#9;&#9;local c = default:clone()
&#9;&#9;c.Visible = true
&#9;&#9;c.Position = UDim2.new(0.1,0,0,(20*b)-20)
&#9;&#9;c.Item.Value = a[b]
&#9;&#9;c.Parent = area
&#9;end
end

list(workspace)

function onChanged()
&#9;dir = dirval.Value
&#9;clearArea()
&#9;list(dir)
&#9;selected.Value = nil
&#9;box.Adornee = nil
end

function onClick()
&#9;dir = dir.Parent
&#9;dirval.Value = dir
&#9;onChanged()
end


function clearArea()
&#9;local a = area:children()
&#9;local b = 0
&#9;for b = 1, #a do
&#9;&#9;if (a[b] ~= default and a[b] ~= selected and a[b] ~= box) then
&#9;&#9;&#9;if (a[b].Item.Value) then
&#9;&#9;&#9;&#9;a[b].Item.Value.Parent = nil
&#9;&#9;&#9;end
&#9;&#9;&#9;a[b]:remove()
&#9;&#9;end
&#9;end
end

function onClick2()
&#9;if (debounce) then return end
&#9;if (dirval.Value.Parent == game) then
&#9;&#9;debounce = true
&#9;&#9;permissionerror.Visible = true
&#9;&#9;wait(2)
&#9;&#9;permissionerror.Visible = false
&#9;&#9;debounce = false
&#9;&#9;return
&#9;end
&#9;clearArea()
&#9;selected.Value = nil
&#9;box.Adornee = nil
end

function onClick3()
&#9;if (selected.Value == nil) then return end
&#9;if (selected.Value.Item.Value == nil) then return end
&#9;selected.Value.Item.Value.Parent = nil
&#9;selected.Value.Parent = nil
&#9;selected.Value = nil
&#9;box.Adornee = nil
end

function onClick4()
&#9;dir = dirval.Value
&#9;classesgui.Visible = true
&#9;while classesgui.Visible do
&#9;&#9;wait()
&#9;end
&#9;dir2 = dir
&#9;dir = dir.Parent
&#9;dirval.Value = dir
&#9;wait(0.1)
&#9;a = area:children()
&#9;for b = 1, #a do
&#9;&#9;if (a[b]:findFirstChild(&quot;Item&quot;)) then
&#9;&#9;&#9;if (a[b].Item.Value == dir2) then
&#9;&#9;&#9;&#9;selected.Value = a[b]
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end

button.MouseButton1Click:connect(onClick)
button2.MouseButton1Click:connect(onClick2)
button3.MouseButton1Click:connect(onClick3)
button4.MouseButton1Click:connect(onClick4)
dirval.Changed:connect(onChanged)


</ProtectedString>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX716">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">CornerWedgeBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX717">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;CornerWedgePart&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX718">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">WedgeBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX719">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;WedgePart&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX720">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">TrussBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX721">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;TrussPart&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX722">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">SpawnBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX723">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;SpawnLocation&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX724">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">SkateboardBrick</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX725">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">NewBrickLocal</string>
								<ProtectedString name="Source">bin = script.Parent 
local g = Instance.new(&quot;SkateboardPlatform&quot;)
g.Anchored = true
g.Locked = true
g.CanCollide = false
g.Transparency = 1
g.Name = &quot;GuideBrick&quot;

selectionBox = Instance.new(&quot;SelectionBox&quot;)
selectionBox.Adornee = g
selectionBox.Parent = game.Players.LocalPlayer.PlayerGui
--[[
sou = Instance.new(&quot;Sound&quot;)
sou.SoundId = &quot;rbxasset://sounds\\flashbulb.wav&quot;
sou.Parent = game.Players.LocalPlayer.PlayerGui
--]]
isRestricted = false

function BuildPermission(brick)
&#9;if brick == nil then return false end
&#9;if isRestricted == false then return true end
&#9;if string.sub(brick.Name,1,16)==&quot;BlobbyblobBuild_&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end


  

function onButton1Down(mouse) 
&#9;c = g:clone()
&#9;c.CanCollide = true
&#9;c.Locked = false
&#9;c.Parent = workspace
&#9;c:MoveTo(g.Position)
&#9;c.Name = &quot;BlobbyblobBuild_&quot; .. game.Players.LocalPlayer.Name
end 

function onSelected(mouse) 
&#9;mouse.Button1Down:connect(function() onButton1Down(mouse) end) 
&#9;g.Parent = game.Workspace.CurrentCamera
&#9;while true do 
&#9;&#9;if g == nil or g.Parent == nil then break end
&#9;&#9;g.Position = mouse.Hit.p
&#9;&#9;wait()
&#9;end 
end


bin.Selected:connect(onSelected) 
bin.Deselected:connect(function(mouse)
g.Parent = nil
end) 
</ProtectedString>
							</Properties>
						</Item>
					</Item>
					<Item class="HopperBin" referent="RBX726">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<token name="BinType">0</token>
							<string name="Name">Triangle</string>
							<Content name="TextureId"><null></null></Content>
						</Properties>
						<Item class="LocalScript" referent="RBX727">
							<Properties>
								<bool name="Archivable">true</bool>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">TriangleLocal</string>
								<ProtectedString name="Source">--woah...
Triangle={elements={}, triangleparts={}};
Triangle.Get=function() return Triangle.elements; end;
Triangle.Parts=function() return Triangle.triangleparts; end;
Triangle.Check3=function(n1,n2,n3) for i,v in pairs(Triangle.elements) do if (v[1]==n1 or v[1]==n2 or v[1]==n3) and (v[2]==n1 or v[2]==n2 or v[2]==n3) and (v[3]==n1 or v[3]==n2 or v[3]==n3) then return i; end end return nil; end;
Triangle.Check=function(n) for i,v in pairs(Triangle.elements) do if v[1]==n or v[2]==n or v[3]==n then return i; end end return nil; end;
Triangle.Add=function(n1,n2,n3)   if (type(n1)~=&quot;userdata&quot; or type(n2)~=&quot;userdata&quot; or type(n3)~=&quot;userdata&quot;) or ((not n1:IsA(&quot;BasePart&quot;)) or (not n2:IsA(&quot;BasePart&quot;)) or (not n3:IsA(&quot;BasePart&quot;))) then   print(&quot;Creation failed - passed the wrong data type to Triangle.Add!&quot;);   return false;   end   if not Triangle.Check3(n1,n2,n3) then   table.insert(Triangle.elements,{n1,n2,n3,1,BrickColor.new(&quot;Medium stone grey&quot;)});   Triangle.Build(#Triangle.elements);   return true;   end   print(&quot;Creation failed - the triangle already exists!&quot;);   return false;   end;
Triangle.Remove=function(index)   if #Triangle.elements&gt;=index then   table.remove(Triangle.elements,index);   return true;   end   return false;   end;
Triangle.Build=function(index)   v=Triangle.elements[index]   p1,p2=createTriangle(v[1].Position,v[2].Position,v[3].Position);   p1.CFrame=p1.CFrame*CFrame.new(v[4]*.5,0,0);   p2.CFrame=p2.CFrame*CFrame.new(-.5*v[4],0,0);   p1.BrickColor=v[5];   p2.BrickColor=v[5];   table.insert(Triangle.triangleparts,{p1,p2,v});   end;
Triangle.Destroy=function(index)   if index&lt;=#Triangle.triangleparts then   Triangle.triangleparts[index][1]:remove();   Triangle.triangleparts[index][2]:remove();   table.remove(Triangle.triangleparts,index);   end   end;
Triangle.Clean=function() for i,v in pairs(Triangle.triangleparts) do v[1]:remove(); v[2]:remove(); end Triangle.triangleparts={}; end;
Triangle.Clear=function() Triangle.triangleparts={}; Triangle.elements={}; end;

local screen;

--[[
Pairs of WedgeParts are stored in triangleparts which can be accessed by
calling Triangle.Parts(). They&apos;re stored in the format {part1, part2, triad
value}, where triad value is what is stored in elements.
{p1 (obj), p2 (obj), elements (tab)}

elements can be called with Triangle.Get(), and contains object values for
the three vertices of the triangle, the orientation (-1, or 1), and the color
of the parts.
{n1 (obj), n2 (obj), n3 (obj), orient (int), color (brickcolor)}

Check3 returns the first match in Triangle.Get() that matches all three nodes.
Check returns the first match in Triangle.Get() that matches one node.
Add will add a triad value to Triangle.Get() given three node objects.
Remove will remove a triad value given an index.
Build will create the current Triangle Map given an index of elements.
Destroy will delete a member of the Triangle map given an index of triangleparts.
Clean will remove the entire Triangle Map.
Clear will delete all values.

]]

MainColor=Color3.new(254 / 255, 241 / 255, 229 / 255);
SecondaryColor=Color3.new(255 / 255, 223 / 255, 193 / 255)
--[[
Functions[index][1] is the referent of the function, and the name of the button.
Functions[index][2] is the description of the function, which goes on the button.
Functions[index][3] is the operation of the function.
]]
Functions={
{&quot;New&quot;,&quot;Click to create a new triangle&quot;},
{&quot;Delete&quot;,&quot;Click to delete all references to a specific node&quot;},
{&quot;Clean&quot;,&quot;Click to remove all triangles from the workspace.&quot;},
{&quot;Reverse&quot;,&quot;Click to offset the triangle in the opposite direction.&quot;},
{&quot;Clear&quot;,&quot;Click to clear all terrain values (warning, can&apos;t be undone)&quot;},
{&quot;Build&quot;,&quot;Click to create the triangle grid.&quot;},
{&quot;Finalize&quot;,&quot;Click to finalize the triangle grid&quot;},
};

Functions[1][3]=function(gui)
local Valid=function(p,nodes)
if p==nil then return false; end
for i,v in pairs(nodes) do if p==v then return false; end end
for i,v in pairs(Triangle.Parts()) do if v[1]==p or v[2]==p then return false; end end
return true
end;
local lshift=false;
local rshift=false;
thread = coroutine.create(function()
sb=Instance.new(&quot;SelectionBox&quot;);
sb.Parent=gui;
repeat
nodes={}
while #nodes&lt;3 do
coroutine.yield();
for i,v in pairs(Feed) do
if v[1]==&quot;Click&quot; then
if Valid(v[2].Target,nodes) then
table.insert(nodes,v[2].Target);
end
elseif v[1]==&quot;KeyDown&quot; then
if string.byte(v[3])==8 then
sb:remove();
return 0;
elseif string.byte(v[3])==47 then
rshift=true;
elseif string.byte(v[3])==48 then
lshift=true;
end
elseif v[1]==&quot;KeyUp&quot; then
if string.byte(v[3])==47 then
rshift=false;
elseif string.byte(v[3])==48 then
lshift=false;
end
elseif v[1]==&quot;MouseMove&quot; then
if Valid(v[2].Target,nodes) then
sb.Adornee=v[2].Target;
else
sb.Adornee=nil;
end
elseif v[1]==&quot;End Function&quot; then
sb:remove();
return 0;
end
end
Feed={};
end
Triangle.Add(nodes[1],nodes[2],nodes[3]);
until (not lshift and not rshift)
sb:remove();
end);
coroutine.resume(thread);
Feed={};
end

Functions[2][3]=function(gui)
local Valid=function(p)
for i,v in pairs(Triangle.Get()) do
if p==v[1] or p==v[2] or p==v[3] then
return true;
end
end
return false;
end;
local lshift=false;
local rshfit=false;
thread = coroutine.create(function()
sb=Instance.new(&quot;SelectionBox&quot;);
sb.Parent=gui;
repeat
chosen=nil;
while not chosen do
coroutine.yield();
for i,v in pairs(Feed) do
if v[1]==&quot;Click&quot; then
if Valid(v[2].Target) then
chosen=v[2].Target;
while Triangle.Check(chosen) do
Triangle.Remove(Triangle.Check(chosen));
end
--[[Clean parts associated with the node]]
sel=Triangle.Parts();
for i=#Triangle.Parts(),1,-1 do
if sel[i][3][1]==chosen or sel[i][3][2]==chosen or sel[i][3][3]==chosen then
Triangle.Destroy(i);
end
end
end
elseif v[1]==&quot;KeyDown&quot; then
if string.byte(v[3])==8 then
sb:remove();
return 0;
elseif string.byte(v[3])==47 then
rshift=true;
elseif string.byte(v[3])==48 then
lshift=true;
end
elseif v[1]==&quot;KeyUp&quot; then
if string.byte(v[3])==47 then
rshift=false;
elseif string.byte(v[3])==48 then
lshift=false;
end
elseif v[1]==&quot;MouseMove&quot; then
if Valid(v[2].Target) then
sb.Adornee=v[2].Target;
else
sb.Adornee=nil;
end
elseif v[1]==&quot;End Function&quot; then
sb:remove()
return 0;
end
end
Feed={};
end
until (not lshift and not rshift)
sb:remove()
end);
coroutine.resume(thread);
Feed={};
end;

Functions[3][3]=function(gui)   thread=coroutine.create(function() end);   Feed={};   Triangle.Clean();   end;

Functions[4][3]=function(gui)
thread=coroutine.create(function()
local Valid=function(p)
for i,v in pairs(Triangle.Parts()) do
if p==v[1] or p==v[2] then
return v;
end
end
return nil;
end;
local lshift=false;
local rshift=false;
sb1=Instance.new(&quot;SelectionBox&quot;);
sb2=Instance.new(&quot;SelectionBox&quot;);
sb1.Parent=gui;
sb2.Parent=gui
repeat
local chosen=nil;
while not chosen do
coroutine.yield();
for i,v in pairs(Feed) do
if v[1]==&quot;Click&quot; then

if Valid(v[2].Target) then
k=Valid(v[2].Target);
for i,v in pairs(Triangle.elements) do
if v==k[3] then
Triangle.elements[i][4]=v[4]*-1;
for a,b in pairs(Triangle.Parts()) do
if b==k then
Triangle.Destroy(a);
end
end
Triangle.Build(i);
chosen=k;
end
end
end
elseif v[1]==&quot;KeyDown&quot; then
if string.byte(v[3])==8 then
sb1:remove();
sb2:remove()
return 0;
elseif string.byte(v[3])==47 then
rshift=true;
elseif string.byte(v[3])==48 then
lshift=true;
end
elseif v[1]==&quot;KeyUp&quot; then
if string.byte(v[3])==47 then
rshift=false;
elseif string.byte(v[3])==48 then
lshift=false;
end
elseif v[1]==&quot;MouseMove&quot; then
if Valid(v[2].Target) then
k=Valid(v[2].Target);
sb1.Adornee=v[2].Target;
sb2.Adornee=(v[2].Target==k[1] and k[2] or k[1])
else
sb1.Adornee=nil;
sb2.Adornee=nil;
end
elseif v[1]==&quot;End Function&quot; then
sb1:remove();
sb2:remove();
return 0;
end
end
Feed={};
end
print(&quot;lshift: &quot;,lshift,&quot; - rshift: &quot;,rshift);
until (not lshift and not rshift)
sb1:remove();
sb2:remove();
return 0;
end)
Feed={};
coroutine.resume(thread);
end;

Functions[5][3]=function(gui)
thread=coroutine.create(function()
local frame=Instance.new(&quot;Frame&quot;);
frame.BackgroundColor3=MainColor;
frame.Position=UDim2.new(.5,-150,.5,-100);
frame.Size=UDim2.new(0,300,0,200);
frame.Name=&quot;Confirm&quot;;
local query=Instance.new(&quot;TextLabel&quot;);
query.Name=&quot;Query&quot;;
query.BackgroundTransparency=1;
query.FontSize=Enum.FontSize.Size14;
query.Position=UDim2.new(0,5,0,5);
query.Size=UDim2.new(1,-10,1,-55);
query.Text=&quot;This function will wipe all triangle data and clear the current map. Are you sure you wish to proceed?&quot;;
query.TextWrap=true;
query.Parent=frame;
local proceed=Instance.new(&quot;TextButton&quot;)
proceed.BackgroundColor3=SecondaryColor;
proceed.FontSize=Enum.FontSize.Size14;
proceed.Name=&quot;Proceed&quot;;
proceed.Position=UDim2.new(0,5,1,-45);
proceed.Size=UDim2.new(.5,-7,0,40);
proceed.Text=&quot;Proceed&quot;;
proceed.Parent=frame;
local btn_return=Instance.new(&quot;TextButton&quot;)
btn_return.BackgroundColor3=SecondaryColor;
btn_return.FontSize=Enum.FontSize.Size14;
btn_return.Name=&quot;Return&quot;;
btn_return.Position=UDim2.new(.5,2,1,-45);
btn_return.Size=UDim2.new(.5,-7,0,40);
btn_return.Text=&quot;Return&quot;;
btn_return.Parent=frame;
frame.Parent=gui;
proceed.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button1&quot;}); end)
btn_return.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button2&quot;}); end)
answer=nil;
while (answer==nil) do
&#9;coroutine.yield()
&#9;for i,v in pairs(Feed) do
&#9;&#9;if v[1]==&quot;ButtonClick&quot; then
&#9;&#9;&#9;if v[2]==&quot;button1&quot; or v[2]==&quot;button2&quot; then
&#9;&#9;&#9;&#9;answer=v[2];
&#9;&#9;&#9;end
&#9;&#9;elseif v[1]==&quot;KeyDown&quot; then
&#9;&#9;&#9;if string.byte(v[3])==8 then
&#9;&#9;&#9;&#9;frame:remove();
&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;end
&#9;&#9;elseif v[1]==&quot;End Function&quot; then
&#9;&#9;&#9;frame:remove()
&#9;&#9;&#9;return 0;
&#9;&#9;end
&#9;end
&#9;Feed={};
end
if (answer==&quot;button2&quot;) then
&#9;frame:remove();
&#9;coroutine.yield();
&#9;return 0;
elseif (answer==&quot;button1&quot;) then
&#9;query.Text=&quot;Do you wish to remove all nodes along with the triangles?&quot;;
&#9;btn_return.Text=&quot;No&quot;;
&#9;proceed.Text=&quot;Yes&quot;;
&#9;proceed.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button1&quot;}); end)
&#9;btn_return.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button2&quot;}); end)
&#9;answer=nil;
&#9;while (answer==nil) do
&#9;&#9;coroutine.yield()
&#9;&#9;for i,v in pairs(Feed) do
&#9;&#9;&#9;print(&quot;User input: &quot;..v[1]);
&#9;&#9;&#9;if v[1]==&quot;ButtonClick&quot; then
&#9;&#9;&#9;&#9;if v[2]==&quot;button1&quot; or v[2]==&quot;button2&quot; then
&#9;&#9;&#9;&#9;&#9;answer=v[2];
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif v[1]==&quot;KeyDown&quot; then
&#9;&#9;&#9;&#9;if string.byte(v[3])==8 then
&#9;&#9;&#9;&#9;&#9;frame:remove();
&#9;&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif v[1]==&quot;End Function&quot; then
&#9;&#9;&#9;&#9;frame:remove()
&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Feed={};
&#9;end
&#9;if (answer==&quot;button2&quot;) then
&#9;&#9;Triangle.Clean();
&#9;&#9;Triangle.Clear();
&#9;&#9;frame:remove();
&#9;&#9;return 0;
&#9;elseif (answer==&quot;button1&quot;) then
&#9;&#9;for i,v in pairs(Triangle.Get()) do
&#9;&#9;&#9;v[1]:remove();
&#9;&#9;&#9;v[2]:remove();
&#9;&#9;&#9;v[3]:remove();
&#9;&#9;end
&#9;&#9;Triangle.Clean();
&#9;&#9;Triangle.Clear();
&#9;&#9;frame:remove();
&#9;&#9;return 0;
&#9;end
end

coroutine.yield();
end)
coroutine.resume(thread);
Feed={};
end;


Functions[6][3]=function(gui)
Triangle.Clean();
sel=Triangle.Get();
for i=1,#sel do
if sel[i][1].Parent==nil or sel[i][2].Parent==nil or sel[i][3].Parent==nil then
Triangle.Remove(i);
end
end
for i=1,#sel do
Triangle.Build(i);
end
end;

Feed={};
thread=coroutine.create(function() end);

Functions[7][3]=function(gui)
thread=coroutine.create(function()
local frame=Instance.new(&quot;Frame&quot;);
frame.BackgroundColor3=MainColor;
frame.Position=UDim2.new(.5,-150,.5,-100);
frame.Size=UDim2.new(0,300,0,200);
frame.Name=&quot;Confirm&quot;;
local query=Instance.new(&quot;TextLabel&quot;);
query.Name=&quot;Query&quot;;
query.BackgroundTransparency=1;
query.FontSize=Enum.FontSize.Size14;
query.Position=UDim2.new(0,5,0,5);
query.Size=UDim2.new(1,-10,1,-55);
query.Text=&quot;This action will finalize the grid and prevent any further changes to it. Proceed?&quot;;
query.TextWrap=true;
query.Parent=frame;
local proceed=Instance.new(&quot;TextButton&quot;)
proceed.BackgroundColor3=SecondaryColor;
proceed.FontSize=Enum.FontSize.Size14;
proceed.Name=&quot;Yes&quot;;
proceed.Position=UDim2.new(0,5,1,-45);
proceed.Size=UDim2.new(.5,-7,0,40);
proceed.Text=&quot;Proceed&quot;;
proceed.Parent=frame;
local btn_return=Instance.new(&quot;TextButton&quot;)
btn_return.BackgroundColor3=SecondaryColor;
btn_return.FontSize=Enum.FontSize.Size14;
btn_return.Name=&quot;No&quot;;
btn_return.Position=UDim2.new(.5,2,1,-45);
btn_return.Size=UDim2.new(.5,-7,0,40);
btn_return.Text=&quot;Return&quot;;
btn_return.Parent=frame;
frame.Parent=gui;
proceed.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button1&quot;}); end)
btn_return.MouseButton1Down:connect(function() input({&quot;ButtonClick&quot;,&quot;button2&quot;}); end)
answer=nil;
while (answer==nil) do
&#9;coroutine.yield()
&#9;for i,v in pairs(Feed) do
&#9;&#9;if v[1]==&quot;ButtonClick&quot; then
&#9;&#9;&#9;if v[2]==&quot;button1&quot; or v[2]==&quot;button2&quot; then
&#9;&#9;&#9;&#9;answer=v[2];
&#9;&#9;&#9;end
&#9;&#9;elseif v[1]==&quot;KeyDown&quot; then
&#9;&#9;&#9;if string.byte(v[3])==8 then
&#9;&#9;&#9;&#9;frame:remove();
&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;end
&#9;&#9;elseif v[1]==&quot;End Function&quot; then
&#9;&#9;&#9;frame:remove()
&#9;&#9;&#9;return 0;
&#9;&#9;end
&#9;end
&#9;Feed={};
end
if (answer==&quot;button2&quot;) then
&#9;frame:remove();
&#9;coroutine.yield();
&#9;return 0;
elseif (answer==&quot;button1&quot;) then
&#9;query.Text=&quot;Do you wish to remove all the nodes?&quot;;
&#9;btn_return.Text=&quot;No&quot;;
&#9;proceed.Text=&quot;Yes&quot;;
&#9;answer=nil;
&#9;while (answer==nil) do
&#9;&#9;coroutine.yield()
&#9;&#9;for i,v in pairs(Feed) do
print(&quot;Elements in Feed: &quot;,#Feed);
print(&quot;v[1] = &quot;,v[1]);
&#9;&#9;&#9;if v[1]~=nil then
&#9;&#9;&#9;&#9;if v[1]==&quot;ButtonClick&quot; then
&#9;print(&quot;Hey! A button was clicked! :D&quot;);
&#9;&#9;&#9;&#9;&#9;if v[2]==&quot;button1&quot; or v[2]==&quot;button2&quot; then

&#9;&#9;&#9;&#9;&#9;&#9;answer=v[2];
&#9;print(v[2]);
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif v[1]==&quot;KeyDown&quot; then
&#9;&#9;&#9;&#9;&#9;if string.byte(v[3])==8 then
&#9;&#9;&#9;&#9;&#9;&#9;frame:remove();
&#9;&#9;&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif v[1]==&quot;End Function&quot; then
&#9;&#9;&#9;&#9;&#9;frame:remove()
&#9;&#9;&#9;&#9;&#9;return 0;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;Feed={};
&#9;end
&#9;if (answer==&quot;button2&quot;) then
&#9;&#9;Triangle.Clean();
&#9;&#9;sel=Triangle.Get();
&#9;&#9;for i=#sel,1,-1 do
&#9;&#9;if sel[i][1].Parent==nil or sel[i][2].Parent==nil or sel[i][3].Parent==nil then
&#9;&#9;Triangle.Remove(i);
&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i=1,#sel do
&#9;&#9;Triangle.Build(i);
&#9;&#9;end
&#9;&#9;frame:remove();
&#9;&#9;Triangle.Clear();
&#9;&#9;coroutine.yield();
&#9;&#9;return 0;
&#9;elseif (answer==&quot;button1&quot;) then
&#9;&#9;print(&quot;Clean all, remove nodes&quot;);
&#9;&#9;Triangle.Clean();
&#9;&#9;sel=Triangle.Get();
&#9;&#9;for i=#sel,1,-1 do
&#9;&#9;if sel[i][1].Parent==nil or sel[i][2].Parent==nil or sel[i][3].Parent==nil then
&#9;&#9;Triangle.Remove(i);
&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i=1,#sel do
&#9;&#9;Triangle.Build(i);
&#9;&#9;end
&#9;&#9;for i,v in pairs(Triangle.Get()) do
&#9;&#9;&#9;v[1]:remove();
&#9;&#9;&#9;v[2]:remove();
&#9;&#9;&#9;v[3]:remove();
&#9;&#9;end
&#9;&#9;Triangle.Clear();
&#9;&#9;frame:remove();
&#9;&#9;coroutine.yield();
&#9;&#9;return 0;
&#9;end
end
print(&quot;Function ended&quot;);
frame:remove()
end);
Feed={};
coroutine.resume(thread);
end;


input=function(...)
if #{...}&gt;0 then
for i,v in pairs({...}) do
table.insert(Feed,v);
if coroutine.status(thread)==&quot;suspended&quot; then
assert((coroutine.resume(thread)));
end
end
end
end;

function onButton1Down(mouse)
input({&quot;Click&quot;,mouse});
end
function onKeyDown(mouse, key)
input({&quot;KeyDown&quot;,mouse,key});
end
function onMove(mouse)
input({&quot;MouseMove&quot;,mouse});
end
function onKeyUp(mouse, key)
input({&quot;KeyUp&quot;,mouse,key});
end

function onSelected(mouse)
mouse.Button1Down:connect(function() onButton1Down(mouse); end)
mouse.KeyDown:connect(function(key) onKeyDown(mouse, key); end)
mouse.KeyUp:connect(function(key) onKeyUp(mouse, key); end)
mouse.Move:connect(function() onMove(mouse); end)
CreateGui(game.Players.LocalPlayer);
end

function CreateGui(player)
local gui = player:findFirstChild(&quot;PlayerGui&quot;);
screen = Instance.new(&quot;ScreenGui&quot;);
screen.Name = &quot;DynamicTriangle&quot;;
screen.Parent=gui;
local frame=Instance.new(&quot;Frame&quot;);
frame.BackgroundColor3=MainColor;
frame.Size=UDim2.new(0,260,0,5 + 20 * #Functions);
frame.Position=UDim2.new(0,20,1,-1 * frame.Size.Y.Offset - 20);
frame.Parent=screen;
for i,v in pairs(Functions) do
local button=Instance.new(&quot;TextButton&quot;);
button.Size=UDim2.new(1,-10,0,17);
button.Position = UDim2.new(0,5,0,i * 20 + 5 - 20);
button.BackgroundColor3=SecondaryColor;
button.Name=v[1];
button.Text=v[2];
button.Parent=frame;
button.MouseButton1Down:connect(function()
input(Feed,{&quot;End Function&quot;});
v[3](screen);
end)
end
end

script.Parent.Selected:connect(onSelected)

function createTriangle(n1,n2,n3)
local w1=Instance.new(&quot;WedgePart&quot;)
w1.Name=&quot;BlobbyblobBuild_&quot;..game.Players.LocalPlayer.Name
w1.formFactor=&quot;Symmetric&quot;
w1.Anchored=true

findingSolution=true
while findingSolution do
r=Ray.new(n1,(n3-n1).unit)
d=r:ClosestPoint(n2)
if (n1-d).magnitude&gt;=(n1-n3).magnitude or (n3-d).magnitude&gt;=(n3-n1).magnitude then
local n=n1
n1=n3
n3=n2
n2=n
else
findingSolution=false
end
end

local pos=(n1:lerp(n2,.5))
local v2=(n1:lerp(d,.5)-pos).unit*-1
local v3=(n2:lerp(d,.5)-pos).unit
local v1=(v2:Cross(v3))
local y=(n2-d).magnitude
local z=(n1-d).magnitude
w1.Size=Vector3.new(1,y,z)
w1.CFrame=CFrame.new(pos.x,pos.y,pos.z,v1.x,v2.x,v3.x,v1.y,v2.y,v3.y,v1.z,v2.z,v3.z)
highestVal=0
local m=Instance.new(&quot;SpecialMesh&quot;)
m.MeshType=&quot;Wedge&quot;
m.Scale=Vector3.new(1,y/w1.Size.y,z/w1.Size.z)
m.Parent=w1
local w2=Instance.new(&quot;WedgePart&quot;)
w2.Name=&quot;BlobbyblobBuild_&quot;..game.Players.LocalPlayer.Name
w2.formFactor=&quot;Symmetric&quot;
w2.Anchored=true
local pos=(n3:lerp(n2,.5))
local v2=(n3:lerp(d,.5)-pos).unit*-1
local v3=(n2:lerp(d,.5)-pos).unit
local v1=(v2:Cross(v3))
local y=(n2-d).magnitude
local z=(n3-d).magnitude
w2.Size=Vector3.new(1,y,z)
w2.CFrame=CFrame.new(pos.x,pos.y,pos.z,v1.x,v2.x,v3.x,v1.y,v2.y,v3.y,v1.z,v2.z,v3.z)
local m=Instance.new(&quot;SpecialMesh&quot;)
m.MeshType=&quot;Wedge&quot;
m.Scale=Vector3.new(1,y/w2.Size.y,z/w2.Size.z)
m.Parent=w2
w2.Parent=workspace
w1.Parent=workspace
return w1,w2
end

script.Parent.Deselected:connect(function(mouse)
if screen~=nil then
screen.Parent=nil;
end
end)
</ProtectedString>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ScreenGui" referent="RBX728">
					<Properties>
						<bool name="Archivable">true</bool>
						<string name="Name">MainGui</string>
					</Properties>
					<Item class="Frame" referent="RBX729">
						<Properties>
							<bool name="Active">false</bool>
							<bool name="Archivable">true</bool>
							<Color3 name="BackgroundColor3">4279970357</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="Draggable">false</bool>
							<string name="Name">WindowFrame</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">0</int>
						</Properties>
						<Item class="TextLabel" referent="RBX730">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4291677645</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">4</token>
								<string name="Name">TextLabel</string>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>-37</XO>
									<YS>1</YS>
									<YO>-25</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>80</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Page 1 of 1</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX731">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4279308561</Color3>
								<float name="BackgroundTransparency">0.25</float>
								<Color3 name="BorderColor3">4279308561</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">4</token>
								<bool name="Modal">false</bool>
								<string name="Name">Back</string>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>-75</XO>
									<YS>1</YS>
									<YO>-25</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">2</token>
								<string name="Text">&lt;</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBX732">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="Archivable">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4279308561</Color3>
								<float name="BackgroundTransparency">0.25</float>
								<Color3 name="BorderColor3">4279308561</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="Draggable">false</bool>
								<token name="Font">2</token>
								<token name="FontSize">4</token>
								<bool name="Modal">false</bool>
								<string name="Name">Forward</string>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>75</XO>
									<YS>1</YS>
									<YO>-25</YO>
								</UDim2>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">2</token>
								<string name="Text">&gt;</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<float name="TextTransparency">0</float>
								<bool name="TextWrap">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX733">
							<Properties>
								<bool name="Active">false</bool>
								<bool name="Archivable">true</bool>
								<Color3 name="BackgroundColor3">4279308561</Color3>
								<float name="BackgroundTransparency">0.300000012</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="Draggable">false</bool>
								<string name="Name">Frame</string>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>70</XO>
									<YS>0</YS>
									<YO>60</YO>
								</UDim2>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-140</XO>
									<YS>1</YS>
									<YO>-230</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">3</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">0</int>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="StarterGui" referent="RBX734">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">StarterGui</string>
			<bool name="ShowDevelopmentGui">true</bool>
		</Properties>
	</Item>
	<Item class="SoundService" referent="RBX735">
		<Properties>
			<token name="AmbientReverb">0</token>
			<bool name="Archivable">true</bool>
			<float name="DistanceFactor">10</float>
			<float name="DopplerScale">1</float>
			<string name="Name">Soundscape</string>
			<float name="RolloffScale">1</float>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX736">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">CollectionService</string>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBX737">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">PhysicsService</string>
		</Properties>
	</Item>
	<Item class="BadgeService" referent="RBX738">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">BadgeService</string>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX739">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Geometry</string>
		</Properties>
	</Item>
	<Item class="RenderHooksService" referent="RBX740">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">RenderHooksService</string>
		</Properties>
	</Item>
	<Item class="SocialService" referent="RBX741">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">SocialService</string>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX742">
		<Properties>
			<bool name="Archivable">true</bool>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
		</Properties>
	</Item>
	<Item class="Timer" referent="RBX743">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="ScriptInformationProvider" referent="RBX744">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX745">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">CookiesService</string>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX746">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Teleport Service</string>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBX747">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Selection</string>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX748">
		<Properties>
			<Color3 name="Ambient">4286611584</Color3>
			<bool name="Archivable">true</bool>
			<float name="Brightness">1</float>
			<Color3 name="ColorShift_Bottom">4278190080</Color3>
			<Color3 name="ColorShift_Top">4278190080</Color3>
			<float name="GeographicLatitude">41.7332993</float>
			<string name="Name">Lighting</string>
			<Color3 name="ShadowColor">4289967032</Color3>
			<string name="TimeOfDay">14:00:00</string>
		</Properties>
	</Item>
	<Item class="ChangeHistoryService" referent="RBX749">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">ChangeHistoryService</string>
		</Properties>
	</Item>
	<Item class="MeshContentProvider" referent="RBX750">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
	<Item class="TextureContentProvider" referent="RBX751">
		<Properties>
			<bool name="Archivable">true</bool>
			<string name="Name">Instance</string>
		</Properties>
	</Item>
</roblox>